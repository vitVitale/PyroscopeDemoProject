{"version":3,"file":"605.js?_cache=b377ed0c9a21dfecf5e8","mappings":"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","sources":["webpack://grafana-metricsdrilldown-app/./shared/user-preferences/pref-keys.ts","webpack://grafana-metricsdrilldown-app/./App/useCatchExceptions.ts","webpack://grafana-metricsdrilldown-app/./shared/services/levels.ts","webpack://grafana-metricsdrilldown-app/./shared/services/sorting.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/helpers/displayStatus.ts","webpack://grafana-metricsdrilldown-app/./App/ErrorView.tsx","webpack://grafana-metricsdrilldown-app/./shared/utils/utils.feature-toggles.ts","webpack://grafana-metricsdrilldown-app/./shared/utils/utils.datasource.ts","webpack://grafana-metricsdrilldown-app/./shared/user-preferences/userStorage.ts","webpack://grafana-metricsdrilldown-app/./AppDataTrail/header/GiveFeedbackButton.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/components/SceneDrawer.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/MetricsSorter/events/EventSortByChanged.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/MetricsSorter/fetchers/fetchAlertingMetrics.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/MetricsSorter/fetchers/fetchDashboardMetrics.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/MetricsSorter/MetricUsageFetcher.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/MetricsSorter/MetricsSorter.tsx","webpack://grafana-metricsdrilldown-app/./shared/shared.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/events/EventMetricsVariableActivated.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/events/EventMetricsVariableDeactivated.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/events/EventMetricsVariableLoaded.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/withLifecycleEvents.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/MetricsVariable.ts","webpack://grafana-metricsdrilldown-app/./AppDataTrail/MetricsDrilldownDataSourceVariable.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/helpers/areArraysEqual.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/matchers/isClassicHistogramMetric.ts","webpack://grafana-metricsdrilldown-app/./AppDataTrail/MetricDatasourceHelper/types/language-provider/versionCheck.ts","webpack://grafana-metricsdrilldown-app/./AppDataTrail/MetricDatasourceHelper/types/language-provider/v11-6-x.ts","webpack://grafana-metricsdrilldown-app/./AppDataTrail/MetricDatasourceHelper/types/language-provider/v12-0-0.ts","webpack://grafana-metricsdrilldown-app/./AppDataTrail/MetricDatasourceHelper/types/language-provider/v12-1-0-plus.ts","webpack://grafana-metricsdrilldown-app/./AppDataTrail/MetricDatasourceHelper/MetricDatasourceHelper.ts","webpack://grafana-metricsdrilldown-app/./shared/utils/utils.variables.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/labels/LabelsDataSource.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/labels/LabelsVariable.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/LayoutSwitcher.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/FilteredMetricsVariable.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/QuickSearch/CountsProvider/CountsProvider.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/QuickSearch/CountsProvider/MetricVariableCountsProvider.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/QuickSearch/EventQuickSearchChanged.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/QuickSearch/QuickSearch.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/list-controls/ListControls.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/MetricsVariableFilterEngine.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/RelatedMetrics/sortRelatedMetrics.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/MetricsVariableSortEngine.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/components/SceneByVariableRepeater.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/components/ShowMoreButton.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/MetricsList/UsageData.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/MetricsList/WithUsageDataPreviewPanel.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/custom-icons/GroupsIcon.tsx","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/EventConfigurePanel.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/ConfigurePanelAction.tsx","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/SelectAction.tsx","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/EventPanelTypeChanged.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/presets/types.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/promql-functions.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/getPreferredConfigForMetric.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/available-panel-types.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/panel-heights.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/query-resolutions.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/matchers/isStatusUpDownMetric.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/matchers/getPanelTypeForMetric.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/buildQueryExpression.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/units/getUnit.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/heatmap/buildHeatmapPanel.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/heatmap/getHeatmapQueryRunnerParams.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/matchers/isCounterMetric.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/percentiles/getPercentilesQueryRunnerParams.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/percentiles/buildPercentilesPanel.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/stat/getStatQueryRunnerParams.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/statushistory/value-mappings.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/stat/buildStatPanel.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/statushistory/buildStatushistoryPanel.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/statushistory/getStatushistoryQueryRunnerParams.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/timeseries/getTimeseriesQueryRunnerParams.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/behaviors/extremeValueFilterBehavior/isAllDataNaN.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/behaviors/extremeValueFilterBehavior/extremeValueFilterBehavior.tsx","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/timeseries/transformations/addRefId.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/timeseries/transformations/addUnspecifiedLabel.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/timeseries/transformations/sliceSeries.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/timeseries/buildTimeseriesPanel.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/GmdVizPanel.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/MetricsList/MetricsList.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/MetricsGroupByList/MetricsGroupByRow.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/labels/LabelValuesVariable.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/MetricsGroupByList/MetricsGroupByList.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/MetricsFilterSection/EventFiltersChanged.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/MetricsFilterSection/rule-group-labels.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/EventSectionValueChanged.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/SectionTitle.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/MetricsFilterSection/CheckboxWithCount.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/MetricsFilterSection/CheckBoxList.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/MetricsFilterSection/MetricsFilterSection.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/computeMetricPrefixGroups.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/computeMetricSuffixGroups.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/metrics-variables/computeRulesGroups.ts","webpack://grafana-metricsdrilldown-app/./shared/bookmarks/genBookmarkKey.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/BookmarksList/BookmarkListItem.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/BookmarksList/BookmarksList.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/LabelsBrowser/LabelsList.tsx","webpack://grafana-metricsdrilldown-app/./shared/bookmarks/useBookmarks.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/LabelsBrowser/LabelsBrowser.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/sections/Settings.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/SideBarButton.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/custom-icons/RulesIcon.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/SideBar/SideBar.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/MetricsReducer.tsx","webpack://grafana-metricsdrilldown-app/./MetricsReducer/helpers/registerRuntimeDataSources.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/matchers/getMetricType.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/matchers/isAgeMetric.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/presets/config-presets-ages.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/presets/config-presets-histograms.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/presets/config-presets-status-updown.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/presets/config-presets-timeseries.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/presets/getConfigPresetsForMetric.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/ConfigurePanelForm/EventApplyPanelConfig.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/ConfigurePanelForm/EventCancelConfigurePanel.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/config/percentiles-options.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/ConfigurePanelForm/WithConfigPanelOptions.tsx","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/ConfigurePanelForm/ConfigurePanelForm.tsx","webpack://grafana-metricsdrilldown-app/./AppDataTrail/header/PluginInfo/PluginLogo.tsx","webpack://grafana-metricsdrilldown-app/./AppDataTrail/header/PluginInfo/PluginInfo.tsx","webpack://grafana-metricsdrilldown-app/./shared/constants/ui.ts","webpack://grafana-metricsdrilldown-app/./AppDataTrail/header/SelectNewMetricButton.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelsList/events/EventForceSyncYAxis.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelsList/events/EventResetSyncYAxis.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelsList/events/EventTimeseriesDataReceived.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelsList/behaviors/syncYAxis.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/GroupBySelector/GroupBySelector.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/GroupByVariable.tsx","webpack://grafana-metricsdrilldown-app/./shared/utils/utils.styles.ts","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/types/timeseries/behaviors/addCardinalityInfo.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelsList/behaviors/publishTimeseriesData.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelsList/SelectLabelAction.tsx","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/BookmarkHeaderAction.tsx","webpack://grafana-metricsdrilldown-app/./shared/GmdVizPanel/components/GmdVizPanelVariantSelector.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/MetricGraphScene.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/PanelMenu/actions/CopyUrlAction.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/PanelMenu/actions/ExploreAction.ts","webpack://grafana-metricsdrilldown-app/./shared/utils/utils.queries.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/PanelMenu/actions/investigation/AddToExplorationsButton.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/PanelMenu/actions/investigation/InvestigationAction.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/PanelMenu/PanelMenu.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelsList/MetricLabelsList.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelValuesList/AddToFiltersGraphAction.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelValuesList/getLabelValueFromDataFrame.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelValuesList/SortBySelector.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelValuesList/SceneByFrameRepeater.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelValuesList/LabelValuesCountProvider.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/MetricLabelValuesList/MetricLabelValuesList.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/Breakdown/LabelBreakdownScene.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/RelatedMetrics/PrefixFilterDropdown.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/RelatedMetrics/RelatedListControls.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/RelatedMetrics/RelatedMetricsScene.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/MetricActionBar.tsx","webpack://grafana-metricsdrilldown-app/./Integrations/logs/labelsCrossReference.ts","webpack://grafana-metricsdrilldown-app/./Integrations/logs/lokiRecordingRules.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/RelatedLogs/RelatedLogsOrchestrator.ts","webpack://grafana-metricsdrilldown-app/./MetricScene/RelatedLogs/NoRelatedLogsFound.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/RelatedLogs/OpenInLogsDrilldownButton.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/RelatedLogs/RelatedLogsScene.tsx","webpack://grafana-metricsdrilldown-app/./MetricScene/MetricScene.tsx","webpack://grafana-metricsdrilldown-app/./AppDataTrail/DataTrail.tsx","webpack://grafana-metricsdrilldown-app/./shared/utils/utils.scopes.ts","webpack://grafana-metricsdrilldown-app/./shared/utils/utils.ts","webpack://grafana-metricsdrilldown-app/./shared/tracking/interactions.ts","webpack://grafana-metricsdrilldown-app/./MetricsReducer/helpers/localCompare.ts","webpack://grafana-metricsdrilldown-app/./App/InlineBanner.tsx","webpack://grafana-metricsdrilldown-app/./App/AppContext.tsx","webpack://grafana-metricsdrilldown-app/./App/Routes.tsx"],"sourcesContent":["export const PREF_KEYS = {\n  DATASOURCE: 'datasource',\n  RECENT_METRICS: 'recent-metrics',\n  BOOKMARKS: 'bookmarks',\n  METRIC_PREFS: 'metric-prefs',\n  BREAKDOWN_SORTBY: 'breakdown.sortby',\n  SIDEBAR_SECTION: 'sidebar.section',\n};\n","import { useEffect, useState } from 'react';\n\nimport { logger } from '../shared/logger/logger';\n\nexport function ensureErrorObject(error: any, defaultMessage: string): Error {\n  if (error instanceof Error) {\n    return error;\n  }\n  if (typeof error === 'string') {\n    return new Error(error);\n  }\n  if (typeof error.message === 'string') {\n    const e = new Error(error.message);\n    for (const prop of Object.getOwnPropertyNames(error)) {\n      (e as any)[prop] = error[prop];\n    }\n    return e;\n  }\n  return new Error(defaultMessage);\n}\n\n/**\n * Determines if an error should be treated as an application-breaking error.\n * Filters out known non-critical errors like browser extension errors and ResizeObserver warnings.\n */\nfunction shouldTreatAsApplicationError(errorEvent: ErrorEvent): boolean {\n  // Check if error is from a browser extension\n  if (errorEvent.filename) {\n    const protocol = new URL(errorEvent.filename).protocol;\n\n    if (protocol.endsWith('extension:')) {\n      logger.error(new Error(`Browser extension error: ${errorEvent.message}`), {\n        filename: errorEvent.filename,\n        lineno: errorEvent.lineno?.toString(),\n        colno: errorEvent.colno?.toString(),\n      });\n      return false;\n    }\n  }\n\n  // Check for null error with message (like ResizeObserver warnings)\n  if (errorEvent.error === null && errorEvent.message) {\n    logger.error(new Error(`Non-critical error: ${errorEvent.message}`), {\n      filename: errorEvent.filename,\n      lineno: errorEvent.lineno?.toString(),\n      colno: errorEvent.colno?.toString(),\n    });\n    return false;\n  }\n\n  return true;\n}\n\nexport function useCatchExceptions(): [Error | undefined, React.Dispatch<React.SetStateAction<Error | undefined>>] {\n  const [error, setError] = useState<Error>();\n\n  // even though we wrap the app in an ErrorBoundary, some errors are not caught,\n  // so we have to set global handlers to catch these (e.g. error thrown from some click handlers)\n  useEffect(() => {\n    const onError = (errorEvent: ErrorEvent) => {\n      if (!shouldTreatAsApplicationError(errorEvent)) {\n        return;\n      }\n\n      setError(ensureErrorObject(errorEvent.error, 'Uncaught exception!'));\n    };\n\n    const onUnHandledRejection = (event: PromiseRejectionEvent) => {\n      // TODO: remove me when we remove MetricSelectScene\n      // indeed, it seems there's always  a cancelled request when landing on the view :man_shrug:\n      // Ideally, the code in DataTrail should handle the cancellation but we do it here because it's easier\n      if (event.reason.type === 'cancelled') {\n        setError(undefined);\n        return;\n      }\n\n      setError(ensureErrorObject(event.reason, 'Unhandled rejection!'));\n    };\n\n    window.addEventListener('error', onError);\n    window.addEventListener('unhandledrejection', onUnHandledRejection);\n    return () => {\n      window.removeEventListener('unhandledrejection', onUnHandledRejection);\n      window.removeEventListener('error', onError);\n    };\n  }, []);\n\n  return [error, setError];\n}\n","import { type DataFrame } from '@grafana/data';\n\nexport function getLabelValueFromDataFrame(frame: DataFrame) {\n  const labels = frame.fields[1]?.labels;\n\n  if (!labels) {\n    return null;\n  }\n\n  const keys = Object.keys(labels);\n  if (keys.length === 0) {\n    return null;\n  }\n\n  return labels[keys[0]];\n}\n","import { OutlierDetector, type OutlierOutput } from '@bsull/augurs/outlier';\nimport {\n  doStandardCalcs,\n  fieldReducers,\n  FieldType,\n  outerJoinDataFrames,\n  ReducerID,\n  type DataFrame,\n} from '@grafana/data';\nimport { memoize } from 'lodash';\n\nimport { displayWarning } from 'MetricsReducer/helpers/displayStatus';\nimport { localeCompare } from 'MetricsReducer/helpers/localCompare';\n\nimport { getLabelValueFromDataFrame } from './levels';\nimport { reportExploreMetrics } from '../tracking/interactions';\n\nexport type SortSeriesByOption = 'alphabetical' | 'alphabetical-reversed' | 'outliers' | ReducerID.stdDev;\ntype SortSeriesDirection = 'asc' | 'desc';\n\n// Alphabetical sort\nconst sortAlphabetical = (series: DataFrame[], direction: SortSeriesDirection = 'asc') => {\n  const compareFn: (a: string, b: string) => number =\n    direction === 'asc' ? (a, b) => localeCompare(a, b) : (a, b) => localeCompare(b, a);\n\n  return series.sort((a, b) => {\n    const labelA = getLabelValueFromDataFrame(a);\n    if (!labelA) {\n      return 0;\n    }\n\n    const labelB = getLabelValueFromDataFrame(b);\n    if (!labelB) {\n      return 0;\n    }\n\n    return compareFn(labelA, labelB);\n  });\n};\n\n// Field reducer sort\nconst sortByFieldReducer = (series: DataFrame[], sortBy: string, direction: SortSeriesDirection = 'asc') => {\n  const fieldReducer = fieldReducers.get(sortBy);\n\n  const seriesCalcs = series.map((dataFrame) => {\n    const field = dataFrame.fields[1];\n    if (!field) {\n      return {\n        value: 0,\n        dataFrame,\n      };\n    }\n\n    const value = fieldReducer.reduce?.(field, true, true) ?? doStandardCalcs(field, true, true);\n    return {\n      value: value[sortBy] ?? 0,\n      dataFrame,\n    };\n  });\n\n  seriesCalcs.sort(direction === 'asc' ? (a, b) => a.value - b.value : (a, b) => b.value - a.value);\n\n  return seriesCalcs.map(({ dataFrame }) => dataFrame);\n};\n\n// Outlier sort\nconst sortByOutliers = (series: DataFrame[], direction: 'asc' | 'desc' = 'asc') => {\n  if (!wasmSupported()) {\n    throw new Error('WASM not supported');\n  }\n\n  const outliers = getOutliers(series);\n\n  const seriesCalcs = series.map((dataFrame, index) => ({\n    value: calculateOutlierValue(outliers, index),\n    dataFrame: dataFrame,\n  }));\n\n  seriesCalcs.sort(direction === 'asc' ? (a, b) => a.value - b.value : (a, b) => b.value - a.value);\n\n  return seriesCalcs.map(({ dataFrame }) => dataFrame);\n};\n\nconst getOutliers = (series: DataFrame[]): OutlierOutput => {\n  // Combine all frames into one by joining on time.\n  const joined = outerJoinDataFrames({ frames: series });\n  if (!joined) {\n    throw new Error('Error while joining frames into a single one');\n  }\n\n  // Get number fields: these are our series.\n  const joinedSeries = joined.fields.filter((f) => f.type === FieldType.number);\n  const points = joinedSeries.map((series) => new Float64Array(series.values));\n\n  return OutlierDetector.dbscan({ sensitivity: 0.9 }).detect(points);\n};\n\nconst calculateOutlierValue = (outliers: OutlierOutput, index: number): number => {\n  if (outliers.seriesResults[index].isOutlier) {\n    return -outliers.seriesResults[index].outlierIntervals.length;\n  }\n  return 0;\n};\n\nexport const sortSeries = memoize(\n  (origSeries: DataFrame[], sortBy: SortSeriesByOption, direction: SortSeriesDirection = 'asc') => {\n    if (!origSeries.length) {\n      return [];\n    }\n\n    const series = [...origSeries];\n\n    // Alphabetical sorting\n    if (sortBy === 'alphabetical') {\n      return sortAlphabetical(series, 'asc');\n    }\n\n    if (sortBy === 'alphabetical-reversed') {\n      return sortAlphabetical(series, 'desc');\n    }\n\n    // Outlier detection sorting\n    if (sortBy === 'outliers') {\n      try {\n        return sortByOutliers(series, direction);\n      } catch (e) {\n        const msg = `Error while sorting by outlying series: \"${(e as Error).toString()}\"!`;\n        displayWarning([msg, 'Falling back to standard deviation to identify the most variable series.']);\n\n        return sortByFieldReducer(series, ReducerID.stdDev, direction);\n      }\n    }\n\n    // Field reducer sorting (default case)\n    return sortByFieldReducer(series, sortBy, direction);\n  },\n  (series: DataFrame[], sortBy: string, direction: SortSeriesDirection = 'asc') => {\n    const firstTimestamp = seriesIsNotEmpty(series) ? series[0].fields[0].values[0] : 0;\n    const lastTimestamp = seriesIsNotEmpty(series)\n      ? series[series.length - 1].fields[0].values[series[series.length - 1].fields[0].values.length - 1]\n      : 0;\n\n    const firstValue = series.length > 0 ? getLabelValueFromDataFrame(series[0]) : '';\n    const lastValue = series.length > 0 ? getLabelValueFromDataFrame(series[series.length - 1]) : '';\n\n    const key = `${firstValue}_${lastValue}_${firstTimestamp}_${lastTimestamp}_${series.length}_${sortBy}_${direction}`;\n\n    return key;\n  }\n);\n\nfunction seriesIsNotEmpty(series: DataFrame[]) {\n  return series.length > 0 && series[0].fields.length > 0 && series[0].fields[0].values.length > 0;\n}\n\nexport const wasmSupported = () => {\n  const support = typeof WebAssembly === 'object';\n\n  if (!support) {\n    reportExploreMetrics('wasm_not_supported', {});\n  }\n\n  return support;\n};\n","import { AppEvents } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport { logger } from 'shared/logger/logger';\n\nexport function displayError(error: Error, msgs: Array<string | React.ReactElement>) {\n  const context = msgs.reduce((acc, msg, i) => ({ ...acc, [`info${i + 1}`]: msg }), { handheldBy: 'displayError' });\n\n  logger.error(error, context);\n\n  getAppEvents().publish({\n    type: AppEvents.alertError.name,\n    payload: msgs,\n  });\n}\n\nexport function displayWarning(msgs: Array<string | React.ReactElement>) {\n  logger.warn(msgs);\n\n  getAppEvents().publish({\n    type: AppEvents.alertWarning.name,\n    payload: msgs,\n  });\n}\n\nexport function displaySuccess(msgs: Array<string | React.ReactElement>) {\n  getAppEvents().publish({\n    type: AppEvents.alertSuccess.name,\n    payload: msgs,\n  });\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Collapse, TextLink, useStyles2 } from '@grafana/ui';\nimport React, { useCallback, useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { InlineBanner } from './InlineBanner';\n\ntype ErrorViewProps = { error: Error };\n\nexport function ErrorView({ error }: Readonly<ErrorViewProps>) {\n  const styles = useStyles2(getStyles);\n\n  const navigate = useNavigate();\n  const { pathname, search } = useLocation();\n\n  const onClickReload = useCallback(() => {\n    const searchParams = new URLSearchParams(search);\n    const newSearchParams = new URLSearchParams();\n\n    // these are safe keys to keep\n    ['from', 'to', 'timezone']\n      .filter((key) => searchParams.has(key))\n      .forEach((key) => newSearchParams.set(key, searchParams.get(key)!));\n\n    navigate({ pathname, search: newSearchParams.toString() });\n    window.location.reload();\n  }, [navigate, pathname, search]);\n\n  const [isCollapseOpen, setIsCollapseOpen] = useState(false);\n\n  return (\n    <div className={styles.container}>\n      <InlineBanner\n        severity=\"error\"\n        title=\"Fatal error!\"\n        error={error}\n        errorContext={{ handheldBy: 'React error boundary' }}\n        message={\n          <>\n            <p className={styles.message}>\n              Please{' '}\n              <TextLink href=\"#\" onClick={onClickReload}>\n                try reloading the page\n              </TextLink>{' '}\n              or, if the problem persists, contact your organization admin. Sorry for the inconvenience.\n            </p>\n            <p>\n              <Collapse\n                className={styles.callStack}\n                collapsible\n                label=\"View stack trace\"\n                isOpen={isCollapseOpen}\n                onToggle={() => setIsCollapseOpen(!isCollapseOpen)}\n              >\n                <pre>\n                  <code>{error.stack}</code>\n                </pre>\n              </Collapse>\n            </p>\n          </>\n        }\n      />\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      margin: theme.spacing(2),\n    }),\n    message: css({\n      margin: theme.spacing(2, 0, 1, 0),\n    }),\n    callStack: css({\n      backgroundColor: 'transparent',\n      border: '0 none',\n\n      '& button': css({\n        paddingLeft: theme.spacing(1.5),\n      }),\n\n      '& button:focus': css({\n        outline: 'none',\n        boxShadow: 'none',\n      }),\n\n      '& button > svg': css({\n        marginLeft: theme.spacing(-2),\n        marginRight: theme.spacing(0.5),\n      }),\n\n      '& [class$=\"collapse__loader\"]': css({\n        display: 'none',\n      }),\n    }),\n  };\n}\n","import { type FeatureToggles } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\n/**\n * Feature toggles defined in Hosted Grafana (not OSS).\n * @remarks See https://github.com/grafana/hosted-grafana/wiki/All-Things-Feature-Toggles#grafana-plugins for details.\n */\nexport const HGFeatureToggles = {\n  // Add new feature toggles here\n  sidebarOpenByDefault: 'metricsDrilldownDefaultOpenSidebar',\n} as const;\n\ntype HGFeatureToggleName = (typeof HGFeatureToggles)[keyof typeof HGFeatureToggles];\n\ntype OssAndHGFeatureToggles = FeatureToggles & {\n  [key in HGFeatureToggleName]: boolean;\n};\n\nexport function isFeatureToggleEnabled(featureToggle: HGFeatureToggleName): boolean {\n  return (config.featureToggles as OssAndHGFeatureToggles)[featureToggle] ?? false;\n}\n","import { type DataSourceInstanceSettings, type DataSourceJsonData } from '@grafana/data';\nimport { type PrometheusDatasource } from '@grafana/prometheus';\nimport { getBackendSrv, getDataSourceSrv } from '@grafana/runtime';\n\nimport { logger } from '../logger/logger';\nexport type DataSource = DataSourceInstanceSettings<DataSourceJsonData>;\n\n// This regex matches Grafana developed Prometheus data sources that are compatible with the vanilla Prometheus data source\nconst PROMETHEUS_DATA_SOURCE_REGEX = /^grafana-[0-9a-z]+prometheus-datasource$/;\n\n/**\n * Helper function to determine if a datasource is a Prometheus datasource\n */\nexport function isPrometheusDataSource(input: unknown): input is PrometheusDatasource {\n  return (\n    typeof input === 'object' &&\n    input !== null &&\n    'type' in input &&\n    typeof input.type === 'string' &&\n    (input.type === 'prometheus' || PROMETHEUS_DATA_SOURCE_REGEX.test(input.type)) &&\n    'uid' in input &&\n    typeof input.uid === 'string'\n  );\n}\n\ntype DataSourceType = 'prometheus' | 'loki';\n\n/**\n * Fetches and caches healthy data sources\n */\nexport class DataSourceFetcher {\n  private readonly pendingRequests = new Map<DataSourceType, Promise<DataSource[]>>();\n  private readonly cache = new Map<DataSourceType, DataSource[]>();\n\n  /**\n   * Retrieves healthy data sources of the specified type\n   * Results are cached indefinitely until the `DataSourceFetcher` is destroyed\n   *\n   * @param type - The type of data source to retrieve ('prometheus' or loki)\n   * @returns Array of healthy data sources\n   */\n  public async getHealthyDataSources(type: DataSourceType): Promise<DataSource[]> {\n    // Check if we have cached results\n    const cachedDataSources = this.cache.get(type);\n    if (cachedDataSources?.length) {\n      return cachedDataSources;\n    }\n\n    // If there's already a pending request for this type, wait for it\n    let pendingRequest = this.pendingRequests.get(type);\n    if (!pendingRequest) {\n      pendingRequest = this.fetchHealthyDataSources(type).finally(() => {\n        // Clean up the pending request after it completes\n        this.pendingRequests.delete(type);\n      });\n      this.pendingRequests.set(type, pendingRequest);\n    }\n\n    // Wait for the request to complete and update cache\n    const dataSources = await pendingRequest;\n    this.cache.set(type, dataSources);\n\n    return dataSources;\n  }\n\n  /**\n   * Fetches healthy data sources of the specified type\n   */\n  private async fetchHealthyDataSources(type: DataSourceType): Promise<DataSource[]> {\n    const allDataSourcesOfType = getDataSourceSrv().getList({\n      logs: true,\n      type,\n      filter: (ds) => ds.uid !== 'grafana',\n    });\n\n    const healthyDataSources: DataSource[] = [];\n    const unhealthyDataSources: DataSource[] = [];\n\n    await Promise.all(\n      allDataSourcesOfType.map(async (ds) => {\n        try {\n          const health = await getBackendSrv().get(`/api/datasources/uid/${ds.uid}/health`, undefined, undefined, {\n            showSuccessAlert: false,\n            showErrorAlert: false,\n          });\n\n          if (health?.status === 'OK') {\n            healthyDataSources.push(ds);\n          } else {\n            unhealthyDataSources.push(ds);\n          }\n        } catch {\n          unhealthyDataSources.push(ds);\n        }\n      })\n    );\n\n    if (unhealthyDataSources.length > 0) {\n      logger.warn(\n        `Found ${unhealthyDataSources.length} unhealthy ${type} data sources: ${unhealthyDataSources\n          .map((ds) => ds.name)\n          .join(', ')}`\n      );\n    }\n\n    return healthyDataSources;\n  }\n}\n\nlet dataSourceFetcherSingleton: DataSourceFetcher | undefined;\n\nexport function getDataSourceFetcher(): DataSourceFetcher {\n  if (!dataSourceFetcherSingleton) {\n    dataSourceFetcherSingleton = new DataSourceFetcher();\n  }\n\n  return dataSourceFetcherSingleton;\n}\n","import { reportExploreMetrics } from 'shared/tracking/interactions';\n\nimport { PREF_KEYS } from './pref-keys';\nimport pluginJson from '../../plugin.json';\n\nclass UserStorage {\n  private service: string;\n\n  constructor(service: string) {\n    this.service = service;\n  }\n\n  // TODO: temporary, let's wait for the new version to be in prod to remove it\n  public migrate() {\n    let hasMigrations = false;\n\n    const migrations = [\n      { legacyKey: 'metricsDrilldownDataSource', newKey: PREF_KEYS.DATASOURCE },\n      { legacyKey: 'metrics-drilldown-recent-metrics/v1', newKey: PREF_KEYS.RECENT_METRICS },\n      { legacyKey: 'grafana.trails.bookmarks', newKey: PREF_KEYS.BOOKMARKS },\n      { legacyKey: 'grafana.trails.breakdown.sort.labels.by', newKey: PREF_KEYS.BREAKDOWN_SORTBY },\n    ];\n\n    for (const { legacyKey, newKey } of migrations) {\n      let existingItem = localStorage.getItem(legacyKey);\n      if (existingItem === null) {\n        continue;\n      }\n\n      try {\n        existingItem = JSON.parse(existingItem);\n      } catch {}\n\n      this.setItem(newKey, existingItem);\n      localStorage.removeItem(legacyKey);\n\n      hasMigrations = true;\n    }\n\n    if (hasMigrations) {\n      reportExploreMetrics('user_preferences_migrated', {});\n    }\n  }\n\n  private buildStorageKey(key: string) {\n    return `${this.service}.${key}`;\n  }\n\n  getItem(key: string): any {\n    const storageKey = this.buildStorageKey(key);\n    const item = localStorage.getItem(storageKey);\n    return item === null ? null : JSON.parse(item);\n  }\n\n  setItem(key: string, value: any): void {\n    const storageKey = this.buildStorageKey(key);\n    localStorage.setItem(storageKey, JSON.stringify(value));\n  }\n\n  removeItem(key: string): void {\n    const storageKey = this.buildStorageKey(key);\n    localStorage.removeItem(storageKey);\n  }\n\n  clear() {\n    localStorage.clear();\n  }\n}\n\nexport const userStorage = new UserStorage(pluginJson.id);\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\n\n// TODO: review on the 25th of September 2025 (see https://github.com/grafana/metrics-drilldown/issues/579)\n// const FEEDBACK_FORM_URL_QUALTRICS = 'https://grafana.qualtrics.com/jfe/form/SV_9FXX8XzCNe7G1g2';\nconst FEEDBACK_FORM_URL_GOOGLE = 'https://forms.gle/dKHDM4GDXVYPny3L6';\n\nfunction trackUsage() {\n  reportExploreMetrics('give_feedback_clicked', {});\n}\n\nexport const GiveFeedbackButton = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <a\n        href={FEEDBACK_FORM_URL_GOOGLE}\n        className={styles.feedback}\n        title=\"Share your thoughts about Metrics in Grafana.\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n        onClick={trackUsage}\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      position: 'absolute',\n      top: 0,\n      right: 0,\n    }),\n    feedback: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n};\n","import { SceneObjectBase, type SceneComponentProps, type SceneObject, type SceneObjectState } from '@grafana/scenes';\nimport { Drawer } from '@grafana/ui';\nimport React from 'react';\n\ninterface SceneDrawerState extends SceneObjectState {\n  key?: string;\n  isOpen?: boolean;\n  title?: string;\n  subTitle?: string;\n  body?: SceneObject;\n}\n\nexport class SceneDrawer extends SceneObjectBase<SceneDrawerState> {\n  constructor(state?: SceneDrawerState) {\n    super({\n      key: 'drawer',\n      isOpen: false,\n      ...state,\n    });\n  }\n\n  open = ({\n    title,\n    subTitle,\n    body,\n  }: {\n    title?: SceneDrawerState['title'];\n    subTitle?: SceneDrawerState['subTitle'];\n    body?: SceneDrawerState['body'];\n  }) => {\n    this.setState({ ...this.state, isOpen: true, title, subTitle, body });\n  };\n\n  close = () => {\n    this.setState({ isOpen: false });\n  };\n\n  static readonly Component = ({ model }: SceneComponentProps<SceneDrawer>) => {\n    const { isOpen, title, subTitle, body } = model.useState();\n\n    return (\n      <>\n        {body && isOpen && (\n          <Drawer size=\"lg\" title={title} subtitle={subTitle} closeOnMaskClick onClose={model.close}>\n            <body.Component model={body} />\n          </Drawer>\n        )}\n      </>\n    );\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { type SortingOption } from '../MetricsSorter';\n\ninterface EventSortByChangedPayload {\n  sortBy: SortingOption;\n}\n\nexport class EventSortByChanged extends BusEventWithPayload<EventSortByChangedPayload> {\n  public static readonly type = 'sort-by-changed';\n}\n","import { getBackendSrv, type BackendSrvRequest } from '@grafana/runtime';\n\nimport { logger } from 'shared/logger/logger';\n\nimport { extractMetricNames } from '../../../../shared/utils/utils.promql';\n\nimport type { MetricUsageDetails } from './fetchDashboardMetrics';\ninterface AlertingRule {\n  id: number;\n  uid: string;\n  title: string;\n  data: Array<{\n    refId: string;\n    queryType: string;\n    datasourceUid: string;\n    model: {\n      expr?: string;\n      expression?: string;\n      type?: string;\n      datasource?: {\n        type: string;\n        uid: string;\n      };\n    };\n  }>;\n}\n\nconst usageRequestOptions: Partial<BackendSrvRequest> = {\n  showSuccessAlert: false,\n  showErrorAlert: false,\n} as const;\n\n// TODO: update parseAlertingRules to do what the dashboards function does\nfunction transformCountsToAlertingUsage(counts: Record<string, number>): Record<string, MetricUsageDetails> {\n  const result: Record<string, MetricUsageDetails> = {};\n  for (const metric in counts) {\n    result[metric] = {\n      usageType: 'alerting-usage',\n      count: counts[metric],\n    };\n  }\n  return result;\n}\n\n/**\n * Fetches metric usage data from alerting rules\n * @returns A record mapping metric names to their occurrence count in alerting rules\n */\nexport async function fetchAlertingMetrics(): Promise<Record<string, MetricUsageDetails>> {\n  try {\n    const alertingRules = await getBackendSrv().get<AlertingRule[]>(\n      '/api/v1/provisioning/alert-rules',\n      undefined,\n      'grafana-metricsdrilldown-app-alert-rule-metric-usage',\n      usageRequestOptions\n    );\n\n    const metricCounts = await parseAlertingRules(alertingRules);\n    return transformCountsToAlertingUsage(metricCounts);\n  } catch (err) {\n    const error = typeof err === 'string' ? new Error(err) : (err as Error);\n    logger.error(error, {\n      message: 'Failed to fetch alerting rules',\n    });\n    // Return empty object when fetch fails\n    return {};\n  }\n}\n\nasync function parseAlertingRules(alertingRules: AlertingRule[]): Promise<Record<string, number>> {\n  // Create a map to count metric occurrences\n  const metricCounts: Record<string, number> = {};\n\n  const relevantRules = alertingRules.filter((rule) => rule?.data.length > 0);\n\n  for (const rule of relevantRules) {\n    // Skip non-Prometheus queries or expression queries (like threshold or reduce expressions)\n    const prometheusQueries = rule.data.filter(\n      (query) => typeof query.model?.expr === 'string' && query.datasourceUid !== '__expr__'\n    );\n\n    const queryPromises = prometheusQueries.map(async (query) => {\n      try {\n        // Extract metrics from the PromQL expression\n        const metrics = await extractMetricNames(query.model.expr as string);\n\n        // Count each metric occurrence\n        for (const metric of metrics) {\n          metricCounts[metric] = (metricCounts[metric] || 0) + 1;\n        }\n      } catch (error) {\n        // Log parsing errors but continue processing other expressions\n        logger.warn(error, {\n          message: `Failed to parse PromQL expression in alert rule ${rule.title}`,\n        });\n      }\n    });\n\n    await Promise.all(queryPromises);\n  }\n\n  return metricCounts;\n}\n","import { getBackendSrv, type BackendSrvRequest } from '@grafana/runtime';\nimport { type Dashboard, type Panel } from '@grafana/schema';\nimport { limitFunction } from 'p-limit';\n\nimport { logger } from 'shared/logger/logger';\n\nimport { isPrometheusDataSource } from '../../../../shared/utils/utils.datasource';\nimport { extractMetricNames } from '../../../../shared/utils/utils.promql';\n\ninterface DashboardSearchItem {\n  id: number;\n  uid: string;\n  title: string;\n  url: string;\n  folderTitle?: string;\n  folderUid?: string;\n  tags: string[];\n  isStarred: boolean;\n}\n\nexport type MetricUsageDetails =\n  | {\n      usageType: 'dashboard-usage';\n      count: number;\n      dashboards: Record<string, { count: number; uid: string; url: string }>;\n    } // e.g., {\"Dashboard A\": { count: 2, uid: \"123\" }}\n  | { usageType: 'alerting-usage'; count: number }; // TODO: implement `alerts: Record<string, number>`\n\ntype MetricUsageMap = Record<string, MetricUsageDetails>;\n\nconst usageRequestOptions: Partial<BackendSrvRequest> = {\n  showSuccessAlert: false,\n  showErrorAlert: false,\n} as const;\n\ntype DashboardWithUrl = Dashboard & { url: string };\n\nconst dashboardRequestMap = new Map<string, Promise<DashboardWithUrl | null>>();\n\nconst getDashboardLimited = limitFunction(\n  async (dashboardUid: string, url, dashboardRequestsFailedCount: number) => {\n    let promise = dashboardRequestMap.get(dashboardUid);\n\n    if (!promise) {\n      promise = getBackendSrv()\n        .get<{ dashboard: Dashboard }>(\n          `/api/dashboards/uid/${dashboardUid}`,\n          undefined,\n          `grafana-metricsdrilldown-app-dashboard-metric-usage-${dashboardUid}`,\n          usageRequestOptions\n        )\n        .then(({ dashboard }) => ({ ...dashboard, url } as DashboardWithUrl))\n        .catch((error) => {\n          // Prevent excessive noise\n          if (dashboardRequestsFailedCount <= 5) {\n            logger.error(error, { dashboardUid });\n          }\n\n          dashboardRequestsFailedCount++;\n          return Promise.resolve(null);\n        })\n        .finally(() => {\n          dashboardRequestMap.delete(dashboardUid);\n        });\n      dashboardRequestMap.set(dashboardUid, promise);\n    }\n\n    return promise;\n  },\n  { concurrency: 50 }\n);\n\n/**\n * Fetches metric usage data from dashboards\n * @returns A record mapping metric names to their dashboard usage data\n */\nexport async function fetchDashboardMetrics(): Promise<Record<string, MetricUsageDetails>> {\n  try {\n    const dashboards = await getBackendSrv().get<DashboardSearchItem[]>(\n      '/api/search',\n      {\n        type: 'dash-db',\n        limit: 500,\n      },\n      'grafana-metricsdrilldown-app-dashboard-search',\n      usageRequestOptions\n    );\n\n    let dashboardRequestsFailedCount = 0;\n\n    const metricCounts = await Promise.all(\n      dashboards.map(({ uid, url }) => getDashboardLimited(uid, url, dashboardRequestsFailedCount))\n    ).then(async (response) => await parseDashboardSearchResponse(response));\n\n    return metricCounts;\n  } catch (err) {\n    const error = typeof err === 'string' ? new Error(err) : (err as Error);\n    logger.error(error, {\n      message: 'Failed to fetch dashboard metrics',\n    });\n    return {};\n  }\n}\n\nfunction getDashboardsWithPanels(\n  dashboardSearchResponse: Array<DashboardWithUrl | null>\n): Array<DashboardWithUrl & { panels: NonNullable<Panel[]> }> {\n  return dashboardSearchResponse.filter((dashboard) => dashboard && dashboard?.panels?.length) as Array<\n    DashboardWithUrl & { panels: NonNullable<Panel[]> }\n  >;\n}\n\nfunction getPanelsWithTargets(panels: Panel[]): Array<Panel & { targets: NonNullable<Panel['targets']> }> {\n  return panels.filter(\n    (panel) => isPrometheusDataSource(panel.datasource) && 'targets' in panel && panel.targets?.length\n  ) as Array<Panel & { targets: NonNullable<Panel['targets']> }>;\n}\n\nasync function processTargetsForMetrics(\n  targets: NonNullable<Panel['targets']>,\n  dashboardName: string,\n  dashboardUid: string,\n  dashboardUrl: string,\n  dashboardData: Record<string, MetricUsageDetails>\n): Promise<void> {\n  for (const target of targets) {\n    const expr = typeof target.expr === 'string' ? target.expr : '';\n    const metrics = await extractMetricNames(expr);\n\n    for (const metric of metrics) {\n      updateMetricUsage(metric, dashboardName, dashboardUid, dashboardUrl, dashboardData);\n    }\n  }\n}\n\nfunction updateMetricUsage(\n  metric: string,\n  dashboardName: string,\n  dashboardUid: string,\n  dashboardUrl: string,\n  dashboardData: Record<string, MetricUsageDetails>\n): void {\n  if (!dashboardData[metric]) {\n    dashboardData[metric] = { usageType: 'dashboard-usage', count: 0, dashboards: {} };\n  }\n\n  dashboardData[metric].count++;\n  if (dashboardData[metric].usageType === 'dashboard-usage') {\n    dashboardData[metric].dashboards[dashboardName] = {\n      count: (dashboardData[metric].dashboards[dashboardName]?.count || 0) + 1,\n      uid: dashboardUid || 'unknown',\n      url: dashboardUrl,\n    };\n  }\n}\n\nasync function parseDashboardSearchResponse(\n  dashboardSearchResponse: Array<DashboardWithUrl | null>\n): Promise<MetricUsageMap> {\n  // Create a map to track metric names and their usage details\n  const dashboardData: Record<string, MetricUsageDetails> = {};\n\n  for (const dashboard of getDashboardsWithPanels(dashboardSearchResponse)) {\n    for (const panel of getPanelsWithTargets(dashboard.panels)) {\n      await processTargetsForMetrics(\n        panel.targets,\n        dashboard.title || `Dashboard ${dashboard.uid}`,\n        dashboard.uid || 'unknown',\n        dashboard.url,\n        dashboardData\n      );\n    }\n  }\n\n  return dashboardData;\n}\n","import { fetchAlertingMetrics } from './fetchers/fetchAlertingMetrics';\nimport { fetchDashboardMetrics, type MetricUsageDetails } from './fetchers/fetchDashboardMetrics';\n\ninterface MetricsUsageState {\n  metrics: Record<string, MetricUsageDetails>;\n  metricsPromise: Promise<Record<string, MetricUsageDetails>> | undefined;\n  fetcher: () => Promise<Record<string, MetricUsageDetails>>;\n}\n\nexport type MetricUsageType = 'dashboard-usage' | 'alerting-usage';\n// Fetches and stores metric usage data for dashboards and alerting rules\nexport class MetricUsageFetcher {\n  private _usageState: Record<MetricUsageType, MetricsUsageState> = {\n    'dashboard-usage': {\n      metrics: {},\n      metricsPromise: undefined,\n      fetcher: fetchDashboardMetrics,\n    },\n    'alerting-usage': {\n      metrics: {},\n      metricsPromise: undefined,\n      fetcher: fetchAlertingMetrics,\n    },\n  };\n\n  public getUsageMetrics(usageType: MetricUsageType): Promise<Record<string, MetricUsageDetails>> {\n    const hasExistingMetrics =\n      this._usageState[usageType].metrics && Object.keys(this._usageState[usageType].metrics).length > 0;\n\n    if (hasExistingMetrics) {\n      return Promise.resolve(this._usageState[usageType].metrics);\n    }\n\n    if (!this._usageState[usageType].metricsPromise) {\n      this._usageState[usageType].metricsPromise = this._usageState[usageType].fetcher().then((metrics) => {\n        this._usageState[usageType].metrics = metrics;\n        this._usageState[usageType].metricsPromise = undefined;\n        return metrics;\n      });\n    }\n\n    return this._usageState[usageType].metricsPromise;\n  }\n\n  public getUsageForMetric(metricName: string, usageType: MetricUsageType): Promise<number> {\n    return this.getUsageMetrics(usageType).then((metrics) => metrics[metricName]?.count ?? 0);\n  }\n\n  public getUsageDetailsForMetric(metricName: string, usageType: MetricUsageType): Promise<MetricUsageDetails> {\n    return this.getUsageMetrics(usageType).then(\n      (metrics) =>\n        metrics[metricName] ??\n        (usageType === 'dashboard-usage'\n          ? { usageType: 'dashboard-usage', count: 0, dashboards: {} }\n          : { usageType: 'alerting-usage', count: 0 })\n    );\n  }\n}\n","import {\n  CustomVariable,\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n  VariableValueSelectors,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type VariableValueOption,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { localeCompare } from 'MetricsReducer/helpers/localCompare';\nimport { logger } from 'shared/logger/logger';\nimport { PREF_KEYS } from 'shared/user-preferences/pref-keys';\nimport { userStorage } from 'shared/user-preferences/userStorage';\n\nimport { EventSortByChanged } from './events/EventSortByChanged';\nimport { type MetricUsageDetails } from './fetchers/fetchDashboardMetrics';\nimport { MetricUsageFetcher, type MetricUsageType } from './MetricUsageFetcher';\nexport type SortingOption = 'default' | 'dashboard-usage' | 'alerting-usage';\n\nconst MAX_RECENT_METRICS = 6;\nconst RECENT_METRICS_EXPIRY_DAYS = 30;\n\ninterface RecentMetric {\n  name: string;\n  timestamp: number;\n}\n\n/**\n * Adds a metric to the recent metrics list in localStorage\n * @param metricName The name of the metric to add\n */\nexport function addRecentMetric(metricName: string): void {\n  try {\n    const recentMetrics = getRecentMetrics();\n    const now = Date.now();\n\n    // Remove the metric if it already exists and add it with new timestamp\n    const filteredMetrics = recentMetrics.filter((m) => m.name !== metricName);\n    filteredMetrics.unshift({ name: metricName, timestamp: now });\n\n    // Keep only the most recent metrics\n    const updatedMetrics = filteredMetrics.slice(0, MAX_RECENT_METRICS);\n    userStorage.setItem(PREF_KEYS.RECENT_METRICS, updatedMetrics);\n  } catch (error) {\n    const errorObject = error instanceof Error ? error : new Error(String(error));\n\n    logger.error(errorObject, {\n      ...(errorObject.cause || {}),\n      metricName,\n    });\n  }\n}\n\n/**\n * Gets the list of recent metrics from localStorage, removing expired ones\n * @returns Array of recent metric names\n */\nexport function getRecentMetrics(): RecentMetric[] {\n  try {\n    const recentMetrics: RecentMetric[] = userStorage.getItem(PREF_KEYS.RECENT_METRICS) || [];\n    if (!recentMetrics.length) {\n      return [];\n    }\n\n    const now = Date.now();\n    const thirtyDaysAgo = now - RECENT_METRICS_EXPIRY_DAYS * 24 * 60 * 60 * 1000;\n\n    // Filter out expired metrics\n    const validMetrics = recentMetrics.filter((metric) => metric.timestamp > thirtyDaysAgo);\n\n    // If any metrics were removed, update storage\n    if (validMetrics.length !== recentMetrics.length) {\n      userStorage.setItem(PREF_KEYS.RECENT_METRICS, validMetrics);\n    }\n\n    return validMetrics;\n  } catch (error) {\n    logger.error(error as Error, { message: 'Failed to get recent metrics:' });\n    return [];\n  }\n}\n\ninterface MetricsSorterState extends SceneObjectState {\n  $variables: SceneVariableSet;\n  inputControls: SceneObject;\n}\n\nconst sortByOptions: VariableValueOption[] = [\n  { label: 'Default', value: 'default' },\n  { label: 'Dashboard Usage', value: 'dashboard-usage' },\n  { label: 'Alerting Usage', value: 'alerting-usage' },\n] as const;\n\nexport const VAR_WINGMAN_SORT_BY = 'metrics-reducer-sort-by';\n\nexport class MetricsSorter extends SceneObjectBase<MetricsSorterState> {\n  initialized = false;\n  supportedSortByOptions = new Set<SortingOption>(['default', 'dashboard-usage', 'alerting-usage']);\n  private usageFetcher = new MetricUsageFetcher();\n\n  constructor(state: Partial<MetricsSorterState>) {\n    super({\n      ...state,\n      key: 'metrics-sorter',\n      $variables: new SceneVariableSet({\n        variables: [\n          new CustomVariable({\n            name: VAR_WINGMAN_SORT_BY,\n            label: 'Sort by',\n            value: 'default',\n            query: sortByOptions.map((option) => `${option.label} : ${option.value}`).join(','),\n            description:\n              'Sort metrics by default (alphabetically, with recently-selected metrics first), by prevalence in dashboard panel queries, or by prevalence in alerting rules',\n          }),\n        ],\n      }),\n      inputControls: new VariableValueSelectors({ layout: 'horizontal' }),\n    });\n\n    this.addActivationHandler(() => this.activationHandler());\n  }\n\n  private activationHandler() {\n    const sortByVar = sceneGraph.getVariables(this).getByName(VAR_WINGMAN_SORT_BY) as CustomVariable;\n\n    if (!this.supportedSortByOptions.has(sortByVar.getValue() as SortingOption)) {\n      // Migration for the old sortBy values\n      sortByVar.changeValueTo('default');\n    }\n\n    this._subs.add(\n      sortByVar.subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          this.publishEvent(new EventSortByChanged({ sortBy: newState.value as SortingOption }), true);\n        }\n      })\n    );\n  }\n\n  public getUsageDetailsForMetric(metricName: string, usageType: MetricUsageType): Promise<MetricUsageDetails> {\n    return this.usageFetcher.getUsageDetailsForMetric(metricName, usageType);\n  }\n\n  // Converts MetricUsageDetails format to simple counts (Record<string, number>) for backward compatibility with sorting logic\n  public getUsageMetrics(usageType: MetricUsageType): Promise<Record<string, number>> {\n    return this.usageFetcher.getUsageMetrics(usageType).then((metrics) => {\n      const metricsToCounts: Record<string, number> = {};\n      for (const metric in metrics) {\n        metricsToCounts[metric] = metrics[metric].count;\n      }\n      return metricsToCounts;\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<MetricsSorter>) => {\n    const { inputControls } = model.useState();\n\n    return (\n      <div data-testid=\"sort-by-select\">\n        <inputControls.Component model={inputControls} />\n      </div>\n    );\n  };\n}\n\n/**\n * Sort metrics by an arbitrary count (descending)\n * @param metrics Array of metric names\n * @param counts A record mapping metric names to an arbitrary count\n * @returns Sorted array of metric names\n */\nexport function sortMetricsByCount(metrics: string[], counts: Record<string, number>): string[] {\n  return [...metrics].sort((a, b) => {\n    const scoreA = counts[a] || 0;\n    const scoreB = counts[b] || 0;\n\n    // Primary sort by score (descending)\n    if (scoreB !== scoreA) {\n      return scoreB - scoreA;\n    }\n\n    // Secondary sort alphabetically for metrics with the same score\n    return localeCompare(a, b);\n  });\n}\n\n/**\n * Sort metrics in alphabetical order\n * @param metrics Array of metric names\n * @returns Sorted array of metric names in alphabetical order\n */\nfunction sortMetricsAlphabetically(metrics: string[]): string[] {\n  return [...metrics].sort((a, b) => localeCompare(a, b));\n}\n\n/**\n * Sort metrics with recent metrics first (by recency), then alphabetically\n * @param metrics Array of metric names\n * @returns Sorted array of metric names\n */\nexport function sortMetricsWithRecentFirst(metrics: string[]): string[] {\n  const allRecentMetrics = getRecentMetrics().map((m) => m.name);\n  const allRecentMetricsSet = new Set(allRecentMetrics);\n  const [recent, nonRecent] = metrics.reduce<[string[], string[]]>(\n    ([recent, nonRecent], metric) => {\n      if (allRecentMetricsSet.has(metric)) {\n        recent.push(metric);\n      } else {\n        nonRecent.push(metric);\n      }\n      return [recent, nonRecent];\n    },\n    [[], []]\n  );\n  const sortedNonRecent = sortMetricsAlphabetically(nonRecent);\n  // `recentMetrics` are already sorted by recency, so we just need to filter them\n  const sortedRecent = allRecentMetrics.filter((m) => recent.includes(m));\n\n  return [...sortedRecent, ...sortedNonRecent];\n}\n","import { BusEventBase, BusEventWithPayload } from '@grafana/data';\nimport { type SceneObjectUrlValues } from '@grafana/scenes';\n\nexport const VAR_FILTERS = 'filters';\nexport const VAR_FILTERS_EXPR = '${filters}';\nexport const VAR_METRIC = 'metric';\nexport const VAR_METRIC_EXPR = '${metric}';\nexport const VAR_GROUP_BY = 'groupby';\nexport const VAR_DATASOURCE = 'ds';\nexport const VAR_DATASOURCE_EXPR = '${ds}';\nexport const VAR_LOGS_DATASOURCE = 'logsDs';\nexport const VAR_LOGS_DATASOURCE_EXPR = '${logsDs}';\nexport const VAR_OTHER_METRIC_FILTERS = 'other_metric_filters';\n\nexport const LOGS_METRIC = '$__logs__';\n\nexport const trailDS = { uid: VAR_DATASOURCE_EXPR };\n\nexport type MakeOptional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;\n\ntype MetricSelectedEventPayload = {\n  metric?: string;\n  urlValues?: SceneObjectUrlValues;\n};\n\nexport class MetricSelectedEvent extends BusEventWithPayload<MetricSelectedEventPayload> {\n  public static readonly type = 'metric-selected-event';\n}\n\nexport class RefreshMetricsEvent extends BusEventBase {\n  public static readonly type = 'refresh-metrics-event';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\ninterface EventMetricsVariableActivatedPayload {\n  key: string;\n}\n\nexport class EventMetricsVariableActivated extends BusEventWithPayload<EventMetricsVariableActivatedPayload> {\n  public static readonly type = 'metrics-variable-activated';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\ninterface EventMetricsVariableDeactivatedPayload {\n  key: string;\n}\n\nexport class EventMetricsVariableDeactivated extends BusEventWithPayload<EventMetricsVariableDeactivatedPayload> {\n  public static readonly type = 'metrics-variable-deactivated';\n}\n","import { BusEventWithPayload } from '@grafana/data';\nimport { type VariableValueOption } from '@grafana/scenes';\n\ninterface EventMetricsVariableLoadedPayload {\n  key: string;\n  options: VariableValueOption[];\n}\n\nexport class EventMetricsVariableLoaded extends BusEventWithPayload<EventMetricsVariableLoadedPayload> {\n  public static readonly type = 'metrics-variable-loaded';\n}\n","import { type MultiValueVariable, type MultiValueVariableState } from '@grafana/scenes';\n\nimport { EventMetricsVariableActivated } from './events/EventMetricsVariableActivated';\nimport { EventMetricsVariableDeactivated } from './events/EventMetricsVariableDeactivated';\nimport { EventMetricsVariableLoaded } from './events/EventMetricsVariableLoaded';\n\n/**\n * Adds the publication of lifecycle events to a metrics variable:\n *\n * - `EventMetricsVariableActivated`\n * - `EventMetricsVariableDeactivated`\n * - `EventMetricsVariableLoaded`\n *\n * This is particularly useful for filtering and sorting the variable options, while keeping the\n * different pieces of code decoupled.\n *\n * The filtering and sorting logic is centralized in the `MetricsReducer` class.\n */\nexport function withLifecycleEvents<T extends MultiValueVariable>(variable: T): T {\n  const key = variable.state.key as string;\n\n  if (!key) {\n    throw new TypeError(\n      `Variable \"${variable.state.name}\" has no key. Please provide a key in order to publish its lifecycle events.`\n    );\n  }\n\n  variable.addActivationHandler(() => {\n    variable.publishEvent(new EventMetricsVariableActivated({ key }), true);\n\n    // We make sure filtering and sorting work in a scenario where the user goes from the MetricsReducer to the MetricScene and back.\n    // Indeed, sometimes, the variable already has its options and does not load new ones (issue reported in a dev env).\n    if (!variable.state.loading && variable.state.options.length) {\n      variable.publishEvent(new EventMetricsVariableLoaded({ key, options: variable.state.options }), true);\n    }\n\n    const sub = variable.subscribeToState((newState: MultiValueVariableState, prevState: MultiValueVariableState) => {\n      if (!newState.loading && prevState.loading) {\n        variable.publishEvent(new EventMetricsVariableLoaded({ key, options: newState.options }), true);\n      }\n    });\n\n    return () => {\n      sub.unsubscribe();\n      variable.publishEvent(new EventMetricsVariableDeactivated({ key }), true);\n    };\n  });\n\n  return variable;\n}\n","import { VariableHide, VariableRefresh, VariableSort } from '@grafana/data';\nimport { QueryVariable, type SceneObjectState } from '@grafana/scenes';\n\nimport { type LabelMatcher } from 'shared/GmdVizPanel/buildQueryExpression';\nimport { trailDS, VAR_FILTERS } from 'shared/shared';\n\nimport { withLifecycleEvents } from './withLifecycleEvents';\n\nexport const VAR_METRICS_VARIABLE = 'metrics-wingman';\n\nexport type MetricOptions = Array<{ label: string; value: string }>;\n\ninterface MetricsVariableState extends SceneObjectState {\n  key?: string;\n  name?: string;\n  labelMatcher?: LabelMatcher;\n  addLifeCycleEvents?: boolean;\n}\n\nexport class MetricsVariable extends QueryVariable {\n  constructor({ key, name, labelMatcher, addLifeCycleEvents }: MetricsVariableState = {}) {\n    super({\n      key: key || VAR_METRICS_VARIABLE,\n      name: name || VAR_METRICS_VARIABLE,\n      label: 'Metrics',\n      datasource: trailDS,\n      query: labelMatcher\n        ? `label_values({${labelMatcher.key}${labelMatcher.operator}\"${labelMatcher.value}\",$${VAR_FILTERS}}, __name__)`\n        : `label_values({$${VAR_FILTERS}}, __name__)`,\n      includeAll: true,\n      value: '$__all',\n      skipUrlSync: true,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      sort: VariableSort.alphabeticalAsc,\n      hide: VariableHide.hideVariable,\n    });\n\n    if (addLifeCycleEvents) {\n      // required for filtering and sorting\n      return withLifecycleEvents<MetricsVariable>(this);\n    }\n  }\n}\n","import { config } from '@grafana/runtime';\nimport { DataSourceVariable } from '@grafana/scenes';\n\nimport { logger } from 'shared/logger/logger';\nimport { VAR_DATASOURCE } from 'shared/shared';\nimport { PREF_KEYS } from 'shared/user-preferences/pref-keys';\nimport { userStorage } from 'shared/user-preferences/userStorage';\nimport { isPrometheusDataSource } from 'shared/utils/utils.datasource';\n\nexport class MetricsDrilldownDataSourceVariable extends DataSourceVariable {\n  constructor({ initialDS }: { initialDS?: string }) {\n    super({\n      key: VAR_DATASOURCE,\n      name: VAR_DATASOURCE,\n      pluginId: 'prometheus',\n      label: 'Data source',\n      description: 'Only prometheus data sources are supported',\n      // if no initialDS is passed to the constructor, we bypass Scenes native behaviour by determining the data source ourselves (see getCurrentDataSource())...\n      skipUrlSync: !initialDS,\n      // ... by doing this, we make sure that we'll always have a data source when the \"var-ds\" URL search param is missing, incorrect, etc.\n      value: initialDS || MetricsDrilldownDataSourceVariable.getCurrentDataSource(),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.setState({ skipUrlSync: false }); // restore URL sync\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.value && newState.value !== prevState.value) {\n        // store the new value for future visits\n        userStorage.setItem(PREF_KEYS.DATASOURCE, newState.value as string);\n      }\n    });\n  }\n\n  private static getCurrentDataSource(): string {\n    const prometheusDataSources = Object.values(config.datasources).filter((ds) => isPrometheusDataSource(ds));\n\n    const uidFromUrl = new URL(window.location.href).searchParams.get(`var-${VAR_DATASOURCE}`);\n    const uidFromLocalStorage = userStorage.getItem(PREF_KEYS.DATASOURCE);\n\n    const currentDataSource =\n      prometheusDataSources.find((ds) => ds.uid === uidFromUrl) ||\n      prometheusDataSources.find((ds) => ds.uid === uidFromLocalStorage) ||\n      prometheusDataSources.find((ds) => ds.isDefault) ||\n      prometheusDataSources[0];\n\n    if (!currentDataSource) {\n      logger.warn('Cannot find any Prometheus data source!');\n      return 'no-data-source-configured';\n    }\n\n    return currentDataSource.uid;\n  }\n}\n","import { isEqual } from 'lodash';\n\nexport const areArraysEqual = (array1: any[], array2: any[]) =>\n  array1.length === array2.length && isEqual(array1, array2);\n","export const isClassicHistogramMetric = (metric: string) => metric.endsWith('_bucket');\n","import { isPrometheusDatasourceV11_6_x } from './v11-6-x';\nimport { isPrometheusDatasourceV12_0_0 } from './v12-0-0';\nimport { isPrometheusDatasourceV12_1_0Plus } from './v12-1-0-plus';\n\nexport const languageProviderVersionIs = {\n  '11.6.x': isPrometheusDatasourceV11_6_x,\n  '12.0.0': isPrometheusDatasourceV12_0_0,\n  '12.1.0-plus': isPrometheusDatasourceV12_1_0Plus,\n};\n","import {\n  type AbstractQuery,\n  type AdHocVariableFilter,\n  type LanguageProvider,\n  type Scope,\n  type TimeRange,\n} from '@grafana/data';\nimport { type PrometheusDatasource, type PromMetricsMetadata, type PromQuery } from '@grafana/prometheus';\nimport { type BackendSrvRequest } from '@grafana/runtime';\n\nimport { type PromQLLabelMatcher } from 'shared/utils/utils.promql';\n\nimport { type PrometheusRuntimeDatasource } from '../../../MetricDatasourceHelper/MetricDatasourceHelper';\n\ninterface PromQlLanguageProviderElevenDotSix extends LanguageProvider {\n  histogramMetrics: string[];\n  timeRange: TimeRange;\n  metrics: string[];\n  metricsMetadata?: PromMetricsMetadata;\n  startTask: Promise<any>;\n  datasource: PrometheusDatasource;\n  labelKeys: string[];\n  labelFetchTs: number;\n  getDefaultCacheHeaders():\n    | {\n        headers: {\n          'X-Grafana-Cache': string;\n        };\n      }\n    | undefined;\n  cleanText(s: string): string;\n  get syntax(): Prism.Grammar;\n  request: (url: string, defaultValue: any, params?: {}, options?: Partial<BackendSrvRequest>) => Promise<any>;\n  start: (timeRange?: TimeRange) => Promise<any[]>;\n  loadMetricsMetadata(): Promise<void>;\n  getLabelKeys(): string[];\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): PromQuery;\n  exportToAbstractQuery(query: PromQuery): AbstractQuery;\n  getSeries(selector: string, withName?: boolean): Promise<Record<string, string[]>>;\n  /**\n   * @param key\n   */\n  fetchLabelValues: (key: string) => Promise<string[]>;\n  getLabelValues(key: string): Promise<string[]>;\n  /**\n   * Fetches all label keys\n   */\n  fetchLabels: (timeRange?: TimeRange, queries?: PromQuery[]) => Promise<string[]>;\n  /**\n   * Gets series values\n   * Function to replace old getSeries calls in a way that will provide faster endpoints for new prometheus instances,\n   * while maintaining backward compatability\n   * @param labelName\n   * @param selector\n   */\n  getSeriesValues: (labelName: string, selector: string) => Promise<string[]>;\n  /**\n   * Fetches all values for a label, with optional match[]\n   * @param name\n   * @param match\n   * @param timeRange\n   * @param requestId\n   */\n  fetchSeriesValuesWithMatch: (\n    name: string,\n    match: string,\n    requestId?: string,\n    timeRange?: TimeRange\n  ) => Promise<string[]>;\n  /**\n   * Gets series labels\n   * Function to replace old getSeries calls in a way that will provide faster endpoints for new prometheus instances,\n   * while maintaining backward compatability. The old API call got the labels and the values in a single query,\n   * but with the new query we need two calls, one to get the labels, and another to get the values.\n   *\n   * @param selector\n   * @param otherLabels\n   */\n  getSeriesLabels: (selector: string, otherLabels: PromQLLabelMatcher[]) => Promise<string[]>;\n  /**\n   * Fetch labels using the best endpoint that datasource supports.\n   * This is cached by its args but also by the global timeRange currently selected as they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchLabelsWithMatch: (name: string, withName?: boolean) => Promise<Record<string, string[]>>;\n  /**\n   * Fetch labels for a series using /series endpoint. This is cached by its args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   * @param withLimit\n   */\n  fetchSeriesLabels: (name: string, withName?: boolean, withLimit?: string) => Promise<Record<string, string[]>>;\n  /**\n   * Fetch labels for a series using /labels endpoint.  This is cached by its args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabelsMatch: (name: string, withName?: boolean) => Promise<Record<string, string[]>>;\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries: (match: string) => Promise<Array<Record<string, string>>>;\n  /**\n   * Fetch this only one as we assume this won't change over time. This is cached differently from fetchSeriesLabels\n   * because we can cache more aggressively here and also we do not want to invalidate this cache the same way as in\n   * fetchSeriesLabels.\n   */\n  fetchDefaultSeries: () => Promise<{}>;\n  /**\n   * Fetch labels or values for a label based on the queries, scopes, filters and time range\n   * @param timeRange\n   * @param queries\n   * @param scopes\n   * @param adhocFilters\n   * @param labelName\n   * @param limit\n   * @param requestId\n   */\n  fetchSuggestions: (\n    timeRange?: TimeRange,\n    queries?: PromQuery[],\n    scopes?: Scope[],\n    adhocFilters?: AdHocVariableFilter[],\n    labelName?: string,\n    limit?: number,\n    requestId?: string\n  ) => Promise<string[]>;\n}\n\nexport function isPrometheusDatasourceV11_6_x(ds: PrometheusRuntimeDatasource): ds is PrometheusRuntimeDatasource & {\n  languageProvider: PromQlLanguageProviderElevenDotSix;\n} {\n  const languageProvider = ds.languageProvider as PromQlLanguageProviderElevenDotSix;\n\n  return (\n    // eslint-disable-next-line sonarjs/deprecation\n    typeof languageProvider.fetchLabelValues === 'function' && languageProvider.fetchLabelValues.length === 1\n  );\n}\n","import {\n  type AbstractQuery,\n  type AdHocVariableFilter,\n  type LanguageProvider,\n  type Scope,\n  type TimeRange,\n} from '@grafana/data';\nimport { type PrometheusDatasource, type PromMetricsMetadata, type PromQuery } from '@grafana/prometheus';\nimport { type BackendSrvRequest } from '@grafana/runtime';\n\nimport { type PrometheusRuntimeDatasource } from 'AppDataTrail/MetricDatasourceHelper/MetricDatasourceHelper';\nimport { type PromQLLabelMatcher } from 'shared/utils/utils.promql';\n\ninterface PromQlLanguageProviderTwelveDotZero extends LanguageProvider {\n  histogramMetrics: string[];\n  metrics: string[];\n  metricsMetadata?: PromMetricsMetadata;\n  startTask: Promise<any>;\n  datasource: PrometheusDatasource;\n  labelKeys: string[];\n  labelFetchTs: number;\n  getDefaultCacheHeaders():\n    | {\n        headers: {\n          'X-Grafana-Cache': string;\n        };\n      }\n    | undefined;\n  cleanText(s: string): string;\n  get syntax(): Prism.Grammar;\n  request: (url: string, defaultValue: any, params?: {}, options?: Partial<BackendSrvRequest>) => Promise<any>;\n  start: (timeRange?: TimeRange) => Promise<any[]>;\n  loadMetricsMetadata(): Promise<void>;\n  getLabelKeys(): string[];\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): PromQuery;\n  exportToAbstractQuery(query: PromQuery): AbstractQuery;\n  getSeries(timeRange: TimeRange, selector: string, withName?: boolean): Promise<Record<string, string[]>>;\n  fetchLabelValues: (range: TimeRange, key: string) => Promise<string[]>;\n  getLabelValues(range: TimeRange, key: string): Promise<string[]>;\n  /**\n   * Fetches all label keys\n   */\n  fetchLabels: (timeRange: TimeRange, queries?: PromQuery[]) => Promise<string[]>;\n  /**\n   * Gets series values\n   * Function to replace old getSeries calls in a way that will provide faster endpoints\n   * for new prometheus instances, while maintaining backward compatability\n   */\n  getSeriesValues: (timeRange: TimeRange, labelName: string, selector: string) => Promise<string[]>;\n  /**\n   * Fetches all values for a label, with optional match[]\n   * @param name\n   * @param match\n   * @param timeRange\n   * @param requestId\n   */\n  fetchSeriesValuesWithMatch: (\n    timeRange: TimeRange,\n    name: string,\n    match: string,\n    requestId?: string\n  ) => Promise<string[]>;\n  /**\n   * Gets series labels\n   * Function to replace old getSeries calls in a way that will provide faster endpoints for new prometheus instances,\n   * while maintaining backward compatability. The old API call got the labels and the values in a single query,\n   * but with the new query we need two calls, one to get the labels, and another to get the values.\n   *\n   * @param selector\n   * @param otherLabels\n   */\n  getSeriesLabels: (timeRange: TimeRange, selector: string, otherLabels: PromQLLabelMatcher[]) => Promise<string[]>;\n  /**\n   * Fetch labels using the best endpoint that datasource supports.\n   * This is cached by its args but also by the global timeRange currently selected as they can change over requested time.\n   */\n  fetchLabelsWithMatch: (timeRange: TimeRange, name: string, withName?: boolean) => Promise<Record<string, string[]>>;\n  /**\n   * Fetch labels for a series using /series endpoint. This is cached by its args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   */\n  fetchSeriesLabels: (\n    timeRange: TimeRange,\n    name: string,\n    withName?: boolean,\n    withLimit?: string\n  ) => Promise<Record<string, string[]>>;\n  /**\n   * Fetch labels for a series using /labels endpoint.  This is cached by its args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   */\n  fetchSeriesLabelsMatch: (timeRange: TimeRange, name: string, withName?: boolean) => Promise<Record<string, string[]>>;\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   */\n  fetchSeries: (timeRange: TimeRange, match: string) => Promise<Array<Record<string, string>>>;\n  /**\n   * Fetch this only one as we assume this won't change over time. This is cached differently from fetchSeriesLabels\n   * because we can cache more aggressively here and also we do not want to invalidate this cache the same way as in\n   * fetchSeriesLabels.\n   */\n  fetchDefaultSeries: (timeRange: TimeRange) => Promise<{}>;\n  /**\n   * Fetch labels or values for a label based on the queries, scopes, filters and time range\n   * @param timeRange\n   * @param queries\n   * @param scopes\n   * @param adhocFilters\n   * @param labelName\n   * @param limit\n   * @param requestId\n   */\n  fetchSuggestions: (\n    timeRange?: TimeRange,\n    queries?: PromQuery[],\n    scopes?: Scope[],\n    adhocFilters?: AdHocVariableFilter[],\n    labelName?: string,\n    limit?: number,\n    requestId?: string\n  ) => Promise<string[]>;\n}\n\nexport function isPrometheusDatasourceV12_0_0(ds: PrometheusRuntimeDatasource): ds is PrometheusRuntimeDatasource & {\n  languageProvider: PromQlLanguageProviderTwelveDotZero;\n} {\n  const languageProvider = ds.languageProvider as PromQlLanguageProviderTwelveDotZero;\n\n  // eslint-disable-next-line sonarjs/deprecation\n  return typeof languageProvider.fetchLabelValues === 'function' && languageProvider.fetchLabelValues.length > 1;\n}\n","import { type PrometheusDatasource } from '@grafana/prometheus';\n\nimport { type PrometheusRuntimeDatasource } from 'AppDataTrail/MetricDatasourceHelper/MetricDatasourceHelper';\n\nexport function isPrometheusDatasourceV12_1_0Plus(ds: PrometheusRuntimeDatasource): ds is PrometheusDatasource {\n  return typeof (ds.languageProvider as PrometheusDatasource['languageProvider']).queryLabelKeys === 'function';\n}\n","import {\n  type DataSourceGetTagKeysOptions,\n  type DataSourceGetTagValuesOptions,\n  type MetricFindValue,\n  type TimeRange,\n} from '@grafana/data';\nimport {\n  type PrometheusDatasource,\n  type PromMetricsMetadata,\n  type PromMetricsMetadataItem,\n  type PromQuery,\n} from '@grafana/prometheus';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { sceneGraph, type DataSourceVariable, type SceneObject, type VariableValueOption } from '@grafana/scenes';\nimport { type Unsubscribable } from 'rxjs';\n\nimport { type DataTrail } from 'AppDataTrail/DataTrail';\nimport { MetricsDrilldownDataSourceVariable } from 'AppDataTrail/MetricsDrilldownDataSourceVariable';\nimport { displayError, displayWarning } from 'MetricsReducer/helpers/displayStatus';\nimport { areArraysEqual } from 'MetricsReducer/metrics-variables/helpers/areArraysEqual';\nimport { MetricsVariable, VAR_METRICS_VARIABLE } from 'MetricsReducer/metrics-variables/MetricsVariable';\nimport { isClassicHistogramMetric } from 'shared/GmdVizPanel/matchers/isClassicHistogramMetric';\nimport { isPrometheusDataSource } from 'shared/utils/utils.datasource';\n\nimport { languageProviderVersionIs } from './types/language-provider/versionCheck';\nimport { VAR_DATASOURCE, VAR_DATASOURCE_EXPR } from '../../shared/shared';\n\n/**\n * When we fetch the Prometheus data source with `@grafana/runtime`, its language provider\n * could be one of multiple flavors that we need to support. We use this type to represent\n * the Prometheus data source before we have checked the version of the language provider.\n * The language provider version is then checked with the `languageProviderVersionIs` helper.\n */\nexport type PrometheusRuntimeDatasource = Omit<PrometheusDatasource, 'languageProvider'> & {\n  languageProvider: unknown;\n};\n\nexport class MetricDatasourceHelper {\n  private trail: DataTrail;\n  private datasource?: PrometheusRuntimeDatasource;\n  private cache = {\n    metadata: new Map<string, PromMetricsMetadataItem>(),\n    classicHistograms: new Set<string>(),\n  };\n  private subs: Unsubscribable[] = [];\n\n  constructor(trail: DataTrail) {\n    this.trail = trail;\n  }\n\n  private async getRuntimeDatasource(): Promise<PrometheusRuntimeDatasource | undefined> {\n    if (!this.datasource) {\n      const ds = await getDataSourceSrv().get(VAR_DATASOURCE_EXPR, { __sceneObject: { value: this.trail } });\n      this.datasource = isPrometheusDataSource(ds) ? ds : undefined;\n    }\n    return this.datasource;\n  }\n\n  public init() {\n    this.reset();\n\n    for (const sub of this.subs) {\n      sub.unsubscribe();\n    }\n\n    this.subs = [];\n\n    const metricsVariable = sceneGraph.findByKeyAndType(this.trail, VAR_METRICS_VARIABLE, MetricsVariable);\n    this.subs.push(\n      metricsVariable.subscribeToState((newState, prevState) => {\n        if (!areArraysEqual(newState.options, prevState.options)) {\n          this.onNewMetrics(newState.options);\n        }\n      })\n    );\n\n    const datasourceVariable = sceneGraph.findByKeyAndType(\n      this.trail,\n      VAR_DATASOURCE,\n      MetricsDrilldownDataSourceVariable\n    );\n    this.subs.push(\n      datasourceVariable.subscribeToState(async (newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          this.reset();\n        }\n      })\n    );\n\n    this.onNewMetrics(metricsVariable.state.options);\n  }\n\n  private reset() {\n    this.datasource = undefined;\n\n    this.cache = {\n      metadata: new Map(),\n      classicHistograms: new Set(),\n    };\n\n    this.fetchMetricsMetadata().catch(() => {});\n  }\n\n  private onNewMetrics(metricsVariableOptions: VariableValueOption[]) {\n    for (const metricData of metricsVariableOptions) {\n      const name = metricData.value as string;\n\n      if (isClassicHistogramMetric(name)) {\n        this.cache.classicHistograms.add(name);\n      }\n    }\n  }\n\n  /**\n   * Identify native histograms by 2 strategies.\n   * 1. querying classic histograms and all metrics,\n   * then comparing the results and build the collection of native histograms.\n   * 2. querying all metrics and checking if the metric is a histogram type and does not have the bucket suffix.\n   *\n   * classic histogram = test_metric_bucket\n   * native histogram = test_metric\n   */\n  public async isNativeHistogram(metric: string): Promise<boolean> {\n    if (this.cache.classicHistograms.has(metric)) {\n      return false;\n    }\n\n    // Prometheus creates a classic histogram metric, which is useful when the metadata is not available\n    // TODO: add reference for future review\n    if (this.cache.classicHistograms.has(`${metric}_bucket`)) {\n      return true;\n    }\n\n    try {\n      const metadata = await this.getMetadataForMetric(metric);\n      return metadata?.type === 'histogram';\n    } catch (error) {\n      displayWarning([`Error while fetching ${metric} metadata!`, (error as Error).toString()]);\n      return false;\n    }\n  }\n\n  /**\n   * We fetch all the metadata at once in init() but it can lead to inconsistencies in the UI because\n   * it usually takes a couple of Prometheus scrape intervals to have all the metadata available.\n   * Additionally, fetching them separately and caching them once we have a result gives another chance to Prometheus while the user navigates across the app.\n   */\n  public async getMetadataForMetric(metric: string): Promise<PromMetricsMetadataItem | undefined> {\n    if (this.cache.metadata.has(metric)) {\n      return this.cache.metadata.get(metric)!;\n    }\n\n    const ds = await this.getRuntimeDatasource();\n    if (!ds) {\n      return;\n    }\n\n    const response = await (ds.languageProvider as any).request(`/api/v1/metadata?metric=${metric}`);\n    const metadata = response[metric]?.[0];\n\n    if (metadata) {\n      this.cache.metadata.set(metric, metadata);\n    }\n\n    return metadata;\n  }\n\n  private async fetchMetricsMetadata() {\n    const ds = await this.getRuntimeDatasource();\n    if (!ds) {\n      return;\n    }\n\n    const queryMetadata = getQueryMetricsMetadata(ds);\n    let metadata = await queryMetadata();\n\n    if (!metadata) {\n      const loadMetadata = getLoadMetricsMetadata(ds, queryMetadata);\n      metadata = await loadMetadata();\n    }\n\n    if (metadata) {\n      for (const [metric, metricMetadata] of Object.entries(metadata)) {\n        this.cache.metadata.set(metric, metricMetadata);\n      }\n    }\n  }\n\n  /**\n   * Used for additional filtering for adhoc vars labels in Metrics Drilldown.\n   * @param options\n   * @returns\n   */\n  public async getTagKeys(options: DataSourceGetTagKeysOptions<PromQuery>): Promise<MetricFindValue[]> {\n    const ds = await this.getRuntimeDatasource();\n    if (!ds) {\n      return [];\n    }\n\n    const keys = await ds.getTagKeys(options);\n    return keys;\n  }\n\n  /**\n   * Used for additional filtering for adhoc vars label values in Metrics Drilldown.\n   * @param options\n   * @returns\n   */\n  public async getTagValues(options: DataSourceGetTagValuesOptions<PromQuery>) {\n    const ds = await this.getRuntimeDatasource();\n    if (!ds) {\n      return [];\n    }\n\n    options.key = unwrapQuotes(options.key);\n    const keys = await ds.getTagValues(options);\n    return keys;\n  }\n\n  /**\n   * Fetches available labels from a Prometheus datasource with version compatibility.\n   *\n   * This method abstracts the complexity of supporting multiple versions of `@grafana/prometheus`\n   * spanning from 11.6.0 up to the latest 12.x versions. It detects which API style the current\n   * datasource supports and calls the appropriate method with the correct signature.\n   * It handles three different `@grafana/prometheus` API styles:\n   *\n   * 1. **(12.1.0+)**: Uses the modern `queryLabelKeys` method\n   * 2. **(12.0.0)**: Uses `fetchLabelsWithMatch` with timeRange parameter\n   * 3. **(11.6.0-11.x)**: Uses `fetchLabelsWithMatch` without timeRange parameter\n   *\n   * @param params - Configuration object containing datasource, time range, and matcher\n   * @param params.ds - The Prometheus datasource instance\n   * @param params.timeRange - Time range for the query\n   * @param params.matcher - PromQL matcher string to filter labels (e.g., '{job=\"prometheus\"}')\n   * @returns Promise that resolves to an array of available label keys\n   *\n   * @example\n   * ```typescript\n   * const labels = await MetricDatasourceHelper.fetchLabels({\n   *   ds: prometheusDatasource,\n   *   timeRange: { from: 'now-1h', to: 'now' },\n   *   matcher: '{job=\"prometheus\"}'\n   * });\n   * ```\n   */\n  public static fetchLabels(params: FetchLabelsOptions): Promise<string[]> {\n    const { timeRange, matcher } = params;\n    const ds = params.ds;\n\n    if (languageProviderVersionIs['12.1.0-plus'](ds)) {\n      return ds.languageProvider.queryLabelKeys(timeRange, matcher);\n    } else if (languageProviderVersionIs['12.0.0'](ds)) {\n      return ds.languageProvider.fetchLabelsWithMatch(timeRange, matcher).then((labels) => Object.keys(labels));\n    } else if (languageProviderVersionIs['11.6.x'](ds)) {\n      return ds.languageProvider.fetchLabelsWithMatch(matcher).then((labels) => Object.keys(labels));\n    }\n\n    throw new Error('Unsupported language provider version');\n  }\n\n  /**\n   * Fetches available values for a specific label from a Prometheus datasource with version compatibility.\n   *\n   * This method abstracts the complexity of supporting multiple versions of `@grafana/prometheus`\n   * spanning from 11.6.0 up to the latest 12.x versions. It detects which API style the current\n   * datasource supports and calls the appropriate method with the correct signature.\n   * It handles three different `@grafana/prometheus` API styles:\n   *\n   * 1. **(12.1.0+)**: Uses the modern `queryLabelValues` method\n   * 2. **(12.0.0)**: Uses `fetchLabelValues` or `fetchSeriesValuesWithMatch` with timeRange parameter\n   * 3. **(11.6.0-11.x)**: Uses `fetchLabelValues` or `fetchSeriesValuesWithMatch` without timeRange parameter\n   *\n   * @param params - Configuration object containing datasource, label name, time range, and optional matcher\n   * @param params.ds - The Prometheus datasource instance\n   * @param params.labelName - The name of the label to fetch values for (e.g., 'job', 'instance')\n   * @param params.timeRange - Time range for the query\n   * @param params.matcher - Optional PromQL matcher string to filter results (e.g., '{job=\"prometheus\"}')\n   * @returns Promise that resolves to an array of available values for the specified label\n   *\n   * @example\n   * ```typescript\n   * const jobValues = await MetricDatasourceHelper.fetchLabelValues({\n   *   ds: prometheusDatasource,\n   *   labelName: 'job',\n   *   timeRange: { from: 'now-1h', to: 'now' },\n   *   matcher: '{__name__=~\".*_total\"}'\n   * });\n   * ```\n   */\n  public static fetchLabelValues(params: FetchLabelValuesOptions) {\n    const { labelName, timeRange, matcher = '' } = params;\n    const ds = params.ds as PrometheusRuntimeDatasource;\n\n    if (languageProviderVersionIs['12.1.0-plus'](ds)) {\n      return ds.languageProvider.queryLabelValues(timeRange, labelName, matcher);\n    }\n\n    if (languageProviderVersionIs['12.0.0'](ds)) {\n      // If a matcher isn't provided, use the simpler `fetchLabelValues` method.\n      const fetchLabelValuesWithOptionalMatcher = matcher\n        ? ds.languageProvider.fetchSeriesValuesWithMatch\n        : ds.languageProvider.fetchLabelValues;\n\n      return fetchLabelValuesWithOptionalMatcher(timeRange, labelName, matcher);\n    }\n\n    if (languageProviderVersionIs['11.6.x'](ds)) {\n      // If a matcher isn't provided, use the simpler `fetchLabelValues` method.\n      const fetchLabelValuesWithOptionalMatcher = matcher\n        ? ds.languageProvider.fetchSeriesValuesWithMatch\n        : ds.languageProvider.fetchLabelValues;\n\n      return fetchLabelValuesWithOptionalMatcher(labelName, matcher);\n    }\n\n    throw new Error('Unsupported language provider version');\n  }\n\n  public static async getPrometheusDataSourceForScene(\n    sceneObject: SceneObject\n  ): Promise<PrometheusDatasource | undefined> {\n    try {\n      const dsVariable = sceneGraph.findByKey(sceneObject, VAR_DATASOURCE) as DataSourceVariable;\n      const uid = (dsVariable?.state.value as string) ?? '';\n      const ds = await getDataSourceSrv().get({ uid });\n\n      return ds as unknown as PrometheusDatasource; // we trust that VAR_DATASOURCE has been set to a Prometheus datasource\n    } catch (error) {\n      displayError(error as Error, ['Error while getting the Prometheus data source!']);\n      return undefined;\n    }\n  }\n\n  public async getPrometheusBuildInfo(): Promise<PrometheusBuildInfo | undefined> {\n    const ds = await this.getRuntimeDatasource();\n    if (!ds) {\n      return;\n    }\n\n    // request is part of the base Prometheus language provider interface so we shouldn't have to worry about versioning here\n    const response = await (ds.languageProvider as PrometheusDatasource['languageProvider']).request(\n      '/api/v1/status/buildinfo'\n    );\n\n    if (!response.application) {\n      response.application = 'Prometheus';\n      response.repository = 'https://github.com/prometheus/prometheus'; // fix typo in response ;)\n    }\n\n    if (response.buildDate) {\n      response.buildDate = response.buildDate.replace(/(\\d{4})(\\d{2})(\\d{2})(.+)/, '$1-$2-$3');\n    }\n\n    return response;\n  }\n}\n\nexport type PrometheusBuildInfo = {\n  application?: string;\n  version: string;\n  buildDate?: string;\n  branch?: string;\n  repository: string;\n  revision: string;\n};\n\ninterface FetchLabelsOptions {\n  ds: PrometheusRuntimeDatasource;\n  timeRange: TimeRange;\n  matcher: string;\n}\n\ninterface FetchLabelValuesOptions {\n  ds: PrometheusRuntimeDatasource;\n  timeRange: TimeRange;\n  labelName: string;\n  matcher?: string;\n}\n\nexport function getMetricDescription(metadata?: PromMetricsMetadataItem) {\n  if (!metadata) {\n    return undefined;\n  }\n\n  const { type, help, unit } = metadata;\n\n  const lines = [\n    help, //\n    type && `**Type:** *${type}*`,\n    unit && `**Unit:** ${unit}`,\n  ];\n\n  return lines.join('\\n\\n');\n}\n\nfunction unwrapQuotes(value: string): string {\n  if (value === '' || !isWrappedInQuotes(value)) {\n    return value;\n  }\n  return value.slice(1, -1);\n}\n\nfunction isWrappedInQuotes(value: string): boolean {\n  const wrappedInQuotes = /^\".*\"$/;\n  return wrappedInQuotes.test(value);\n}\n\nfunction getQueryMetricsMetadata(ds: PrometheusRuntimeDatasource) {\n  if (languageProviderVersionIs['12.1.0-plus'](ds)) {\n    return ds.languageProvider.queryMetricsMetadata;\n  }\n\n  if (languageProviderVersionIs['12.0.0'](ds) || languageProviderVersionIs['11.6.x'](ds)) {\n    return () => Promise.resolve(ds.languageProvider.metricsMetadata);\n  }\n\n  throw new Error('Unsupported language provider version');\n}\n\nfunction getLoadMetricsMetadata(\n  ds: PrometheusRuntimeDatasource,\n  queryMetadata: () => Promise<PromMetricsMetadata | undefined>\n) {\n  if (languageProviderVersionIs['12.1.0-plus'](ds)) {\n    return ds.languageProvider.retrieveMetricsMetadata;\n  }\n\n  if (languageProviderVersionIs['12.0.0'](ds) || languageProviderVersionIs['11.6.x'](ds)) {\n    return () => (ds.languageProvider.loadMetricsMetadata?.() ?? Promise.resolve()).then(() => queryMetadata());\n  }\n\n  throw new Error('Unsupported language provider version');\n}\n","import {\n  type AdHocFiltersVariable,\n  type CustomVariable,\n  type QueryVariable,\n  type SceneVariable,\n} from '@grafana/scenes';\n\ntype MaybeVariable = SceneVariable | null | undefined;\n\nexport function isAdHocFiltersVariable(variable: MaybeVariable): variable is AdHocFiltersVariable {\n  return variable !== null && variable?.state.type === 'adhoc';\n}\n\nexport function isCustomVariable(variable: MaybeVariable): variable is CustomVariable {\n  return variable !== null && variable?.state.type === 'custom';\n}\n\nexport function isQueryVariable(variable: MaybeVariable): variable is QueryVariable {\n  return variable !== null && variable?.state.type === 'query';\n}\n","import {\n  FieldType,\n  LoadingState,\n  type DataQueryResponse,\n  type LegacyMetricFindQueryOptions,\n  type MetricFindValue,\n  type TestDataSourceResponse,\n} from '@grafana/data';\nimport { type PrometheusDatasource } from '@grafana/prometheus';\nimport { RuntimeDataSource, sceneGraph, type SceneObject } from '@grafana/scenes';\n\nimport { MetricDatasourceHelper } from 'AppDataTrail/MetricDatasourceHelper/MetricDatasourceHelper';\nimport { VAR_FILTERS } from 'shared/shared';\nimport { isAdHocFiltersVariable } from 'shared/utils/utils.variables';\n\nimport { displayWarning } from '../helpers/displayStatus';\nimport { localeCompare } from '../helpers/localCompare';\n\n// TODO can we get rid of it and use e.g. undefined or an empty string?\nexport const NULL_GROUP_BY_VALUE = '(none)';\n\nexport class LabelsDataSource extends RuntimeDataSource {\n  static readonly uid = 'grafana-prometheus-labels-datasource';\n\n  constructor() {\n    super(LabelsDataSource.uid, LabelsDataSource.uid);\n  }\n\n  async query(): Promise<DataQueryResponse> {\n    return {\n      state: LoadingState.Done,\n      data: [\n        {\n          name: 'Labels',\n          fields: [\n            {\n              name: null,\n              type: FieldType.other,\n              values: [],\n              config: {},\n            },\n          ],\n          length: 0,\n        },\n      ],\n    };\n  }\n\n  async metricFindQuery(matcher: string, options: LegacyMetricFindQueryOptions): Promise<MetricFindValue[]> {\n    const sceneObject = options.scopedVars?.__sceneObject?.valueOf() as SceneObject;\n\n    const ds = await MetricDatasourceHelper.getPrometheusDataSourceForScene(sceneObject);\n    if (!ds) {\n      return [];\n    }\n\n    const [, labelName] = matcher.match(/valuesOf\\((.+)\\)/) ?? [];\n    if (labelName) {\n      const labelValues = await LabelsDataSource.fetchLabelValues(labelName, sceneObject);\n      return labelValues.map((value) => ({ value, text: value }));\n    }\n\n    let labelOptions: MetricFindValue[] = [];\n\n    try {\n      labelOptions = await this.fetchLabels(ds, sceneObject, matcher);\n    } catch (error) {\n      displayWarning(['Error while fetching labels! Defaulting to an empty array.', (error as Error).toString()]);\n    }\n\n    return [{ value: NULL_GROUP_BY_VALUE, text: '(none)' }, ...labelOptions] as MetricFindValue[];\n  }\n\n  private async fetchLabels(ds: PrometheusDatasource, sceneObject: SceneObject, matcher: string) {\n    // there is probably a more graceful way to implement this, but this is what the DS offers us.\n    // if a DS does not support the labels match API, we need getTagKeys to handle the empty matcher\n    if (!LabelsDataSource.getLabelsMatchAPISupport(ds)) {\n      // the Prometheus series endpoint cannot accept an empty matcher\n      // when there are no filters, we cannot send the matcher passed to this function because Prometheus evaluates it as empty and returns an error\n      const filters = LabelsDataSource.getFiltersFromVariable(sceneObject);\n      const response = await ds.getTagKeys(filters);\n\n      return this.processLabelOptions(\n        response.map(({ text }) => ({\n          value: text,\n          text,\n        }))\n      );\n    }\n\n    const response = await MetricDatasourceHelper.fetchLabels({\n      ds,\n      timeRange: sceneGraph.getTimeRange(sceneObject).state.value,\n      matcher,\n    });\n\n    return this.processLabelOptions(\n      response.map((label) => ({\n        value: label,\n        text: label,\n      }))\n    );\n  }\n\n  private static getLabelsMatchAPISupport(ds: PrometheusDatasource) {\n    try {\n      return ds.hasLabelsMatchAPISupport();\n    } catch (error) {\n      displayWarning([\n        'Error while checking if the current data source supports the labels match API! Defaulting to false.',\n        (error as Error).toString(),\n      ]);\n      return false;\n    }\n  }\n\n  private static getFiltersFromVariable(sceneObject: SceneObject): { filters: any[] } {\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, sceneObject);\n\n    if (isAdHocFiltersVariable(filtersVariable)) {\n      return { filters: filtersVariable.state.filters };\n    }\n\n    return { filters: [] };\n  }\n\n  private processLabelOptions(options: Array<{ value: string; text: string }>): Array<{ value: string; text: string }> {\n    return options.filter(({ value }) => !value.startsWith('__')).sort((a, b) => localeCompare(a.value, b.value));\n  }\n\n  static async fetchLabelValues(labelName: string, sceneObject: SceneObject): Promise<string[]> {\n    const ds = await MetricDatasourceHelper.getPrometheusDataSourceForScene(sceneObject);\n    if (!ds) {\n      return [];\n    }\n\n    try {\n      return await MetricDatasourceHelper.fetchLabelValues({\n        ds,\n        labelName,\n        timeRange: sceneGraph.getTimeRange(sceneObject).state.value,\n      });\n    } catch (error) {\n      displayWarning([\n        `Error while retrieving label \"${labelName}\" values! Defaulting to an empty array.`,\n        (error as Error).toString(),\n      ]);\n      return [];\n    }\n  }\n\n  async testDatasource(): Promise<TestDataSourceResponse> {\n    return {\n      status: 'success',\n      message: 'OK',\n    };\n  }\n}\n","import { css } from '@emotion/css';\nimport { VariableHide, VariableRefresh, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  AdHocFiltersVariable,\n  DataSourceVariable,\n  QueryVariable,\n  sceneGraph,\n  type MultiValueVariable,\n  type SceneComponentProps,\n} from '@grafana/scenes';\nimport { Label, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { VAR_DATASOURCE, VAR_FILTERS, VAR_FILTERS_EXPR } from 'shared/shared';\n\nimport { LabelsDataSource, NULL_GROUP_BY_VALUE } from './LabelsDataSource';\n\nexport const VAR_WINGMAN_GROUP_BY = 'labelsWingman';\n\nexport class LabelsVariable extends QueryVariable {\n  constructor() {\n    super({\n      name: VAR_WINGMAN_GROUP_BY,\n      label: 'Group by label',\n      placeholder: 'Group by label...',\n      datasource: { uid: LabelsDataSource.uid },\n      query: '',\n      includeAll: false,\n      isMulti: false,\n      allowCustomValue: false,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      hide: VariableHide.hideVariable,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  onActivate() {\n    this.subscribeToState((newState, prevState) => {\n      if (newState.query !== prevState.query) {\n        // preserve the value from the URL search param when landing\n        if (prevState.query) {\n          this.setState({ value: NULL_GROUP_BY_VALUE });\n        }\n\n        this.refreshOptions();\n      }\n    });\n\n    this._subs.add(\n      sceneGraph.findByKeyAndType(this, VAR_DATASOURCE, DataSourceVariable).subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          this.setState({ value: NULL_GROUP_BY_VALUE });\n          this.refreshOptions();\n        }\n      })\n    );\n\n    this._subs.add(\n      sceneGraph.findByKeyAndType(this, VAR_FILTERS, AdHocFiltersVariable).subscribeToState((newState, prevState) => {\n        if (newState.filterExpression !== prevState.filterExpression) {\n          this.updateQuery();\n        }\n      })\n    );\n\n    // hack to ensure that labels are loaded when landing: sometimes filters are not interpolated and fetching labels give no results\n    this.updateQuery();\n  }\n\n  private updateQuery() {\n    const filterExpression = sceneGraph.interpolate(this, VAR_FILTERS_EXPR, {});\n    this.setState({ query: `{__name__=~\".+\",${filterExpression}}` });\n  }\n\n  static readonly Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    const styles = useStyles2(getStyles);\n    const { label } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <Label className={styles.label}>{label}</Label>\n        <QueryVariable.Component model={model} />\n      </div>\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    align-items: center;\n    gap: 0;\n\n    [class*='input-wrapper'] {\n      width: 240px;\n    }\n  `,\n  label: css`\n    height: 32px;\n    white-space: nowrap;\n    margin: 0;\n    background-color: ${theme.colors.background.primary};\n    padding: ${theme.spacing(1)};\n    border-radius: ${theme.shape.radius.default};\n    border: 1px solid ${theme.colors.border.weak};\n    border-right: none;\n  `,\n});\n","import {\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  type SceneComponentProps,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React from 'react';\n\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\n\nexport enum LayoutType {\n  GRID = 'grid',\n  ROWS = 'rows',\n  SINGLE = 'single',\n}\n\nexport interface LayoutSwitcherState extends SceneObjectState {\n  urlSearchParamName: string;\n  layout: LayoutType;\n  options: Array<{ label: string; value: LayoutType }>;\n}\n\nexport class LayoutSwitcher extends SceneObjectBase<LayoutSwitcherState> {\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, {\n    keys: [this.state.urlSearchParamName],\n  });\n\n  static readonly DEFAULT_OPTIONS = [\n    { label: 'Grid', value: LayoutType.GRID },\n    { label: 'Rows', value: LayoutType.ROWS },\n  ];\n\n  static readonly DEFAULT_LAYOUT = LayoutType.GRID;\n\n  constructor({\n    urlSearchParamName,\n    options,\n  }: {\n    urlSearchParamName?: LayoutSwitcherState['urlSearchParamName'];\n    options?: LayoutSwitcherState['options'];\n  }) {\n    super({\n      key: 'layout-switcher',\n      urlSearchParamName: urlSearchParamName || 'layout',\n      options: options || LayoutSwitcher.DEFAULT_OPTIONS,\n      layout: LayoutSwitcher.DEFAULT_LAYOUT,\n    });\n  }\n\n  getUrlState() {\n    return {\n      [this.state.urlSearchParamName]: this.state.layout,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<LayoutSwitcherState> = {};\n    const newLayout = values[this.state.urlSearchParamName] as LayoutType;\n\n    if (newLayout !== this.state.layout) {\n      stateUpdate.layout = this.state.options.find((o) => o.value === newLayout)\n        ? newLayout\n        : LayoutSwitcher.DEFAULT_LAYOUT;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  private onChange = (layout: LayoutType) => {\n    reportExploreMetrics('layout_changed', { layout });\n    this.setState({ layout });\n  };\n\n  static readonly Component = ({ model }: SceneComponentProps<LayoutSwitcher>) => {\n    const { options, layout } = model.useState();\n\n    return (\n      <RadioButtonGroup\n        aria-label=\"Layout switcher\"\n        options={options}\n        value={layout}\n        onChange={model.onChange}\n        fullWidth={false}\n      />\n    );\n  };\n}\n","import { CustomVariable, sceneGraph } from '@grafana/scenes';\n\nimport { MetricsVariable, VAR_METRICS_VARIABLE } from './MetricsVariable';\nimport { withLifecycleEvents } from './withLifecycleEvents';\n\nexport const VAR_FILTERED_METRICS_VARIABLE = 'filtered-metrics-wingman';\n\nexport class FilteredMetricsVariable extends CustomVariable {\n  constructor() {\n    super({\n      key: VAR_FILTERED_METRICS_VARIABLE,\n      name: VAR_FILTERED_METRICS_VARIABLE,\n      label: 'Filtered Metrics',\n      loading: false,\n      error: null,\n      options: [],\n      includeAll: true,\n      value: '$__all',\n      skipUrlSync: true,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n\n    // required for filtering and sorting\n    return withLifecycleEvents<FilteredMetricsVariable>(this);\n  }\n\n  private onActivate() {\n    const metricsVariable = sceneGraph.findByKeyAndType(this, VAR_METRICS_VARIABLE, MetricsVariable);\n    const { loading, error, options } = metricsVariable.state;\n\n    this.setState({ loading, error, options });\n\n    this._subs.add(\n      metricsVariable.subscribeToState((newState) => {\n        this.setState({\n          loading: newState.loading,\n          error: newState.error,\n          options: newState.options,\n        });\n      })\n    );\n  }\n}\n","import { SceneObjectBase, type SceneObjectState } from '@grafana/scenes';\n\nexport type CountsData = {\n  current: number;\n  total: number;\n};\n\ninterface CountsProviderState extends SceneObjectState {\n  counts: CountsData;\n}\n\nexport class CountsProvider<T extends CountsProviderState = CountsProviderState> extends SceneObjectBase<T> {\n  constructor(state: Partial<T>) {\n    super({\n      ...state,\n      counts: { current: 0, total: 0 },\n    } as T);\n  }\n\n  public useCounts(): CountsData {\n    return this.useState().counts;\n  }\n}\n","import { sceneGraph, type MultiValueVariable } from '@grafana/scenes';\n\nimport { VAR_FILTERED_METRICS_VARIABLE } from 'MetricsReducer/metrics-variables/FilteredMetricsVariable';\nimport { areArraysEqual } from 'MetricsReducer/metrics-variables/helpers/areArraysEqual';\nimport { VAR_METRICS_VARIABLE } from 'MetricsReducer/metrics-variables/MetricsVariable';\n\nimport { CountsProvider } from './CountsProvider';\n\nexport class MetricVariableCountsProvider extends CountsProvider {\n  constructor() {\n    super({ key: 'MetricVariableCountsProvider' });\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const nonFilteredVariable = sceneGraph.lookupVariable(VAR_METRICS_VARIABLE, this) as MultiValueVariable;\n    const filteredVariable = sceneGraph.lookupVariable(VAR_FILTERED_METRICS_VARIABLE, this) as MultiValueVariable;\n\n    this.setInitCounts(nonFilteredVariable, filteredVariable);\n\n    this._subs.add(\n      nonFilteredVariable.subscribeToState((newState, prevState) => {\n        if (!areArraysEqual(newState.options, prevState.options)) {\n          this.setState({\n            counts: {\n              current: filteredVariable.state.options.length,\n              total: newState.options.length,\n            },\n          });\n        }\n      })\n    );\n\n    this._subs.add(\n      filteredVariable.subscribeToState((newState, prevState) => {\n        if (!newState.loading && !prevState.loading && !areArraysEqual(newState.options, prevState.options)) {\n          this.setState({\n            counts: {\n              current: newState.options.length,\n              total: nonFilteredVariable.state.options.length,\n            },\n          });\n        }\n      })\n    );\n  }\n\n  private setInitCounts(nonFilteredVariable: MultiValueVariable, filteredVariable: MultiValueVariable) {\n    const initCounts = { current: 0, total: 0 };\n\n    // We make sure the count of metrics is not 0 in a scenario where the user goes from the MetricsReducer to the MetricScene and back.\n    // Indeed, sometimes, the variables already have their options and do not load new ones.\n    if (!nonFilteredVariable.state.loading && nonFilteredVariable.state.options.length) {\n      initCounts.total = nonFilteredVariable.state.options.length;\n    }\n\n    if (!filteredVariable.state.loading && filteredVariable.state.options.length) {\n      initCounts.current = filteredVariable.state.options.length;\n    }\n\n    this.setState({ counts: initCounts });\n  }\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\ninterface EventQuickSearchChangedPayload {\n  searchText: string;\n}\n\nexport class EventQuickSearchChanged extends BusEventWithPayload<EventQuickSearchChangedPayload> {\n  public static readonly type = 'quick-search-changed';\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  VariableDependencyConfig,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { IconButton, Input, Tag, Tooltip, useStyles2 } from '@grafana/ui';\nimport { debounce } from 'lodash';\nimport React, { type KeyboardEvent } from 'react';\n\nimport { VAR_DATASOURCE } from 'shared/shared';\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\n\nimport { type CountsProvider } from './CountsProvider/CountsProvider';\nimport { EventQuickSearchChanged } from './EventQuickSearchChanged';\n\ninterface QuickSearchState extends SceneObjectState {\n  urlSearchParamName: string;\n  targetName: string;\n  countsProvider: CountsProvider;\n  displayCounts: boolean;\n  value: string;\n}\n\nexport class QuickSearch extends SceneObjectBase<QuickSearchState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_DATASOURCE],\n    onReferencedVariableValueChanged: () => {\n      this.setState({ value: '' });\n    },\n  });\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, {\n    keys: [this.state.urlSearchParamName],\n  });\n\n  getUrlState() {\n    return { [this.state.urlSearchParamName]: this.state.value };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const newValue = (values[this.state.urlSearchParamName] as string) || '';\n\n    if (newValue !== this.state.value) {\n      this.setState({ value: newValue });\n    }\n  }\n\n  public constructor({\n    urlSearchParamName,\n    targetName,\n    countsProvider,\n    displayCounts,\n  }: {\n    urlSearchParamName: QuickSearchState['urlSearchParamName'];\n    targetName: QuickSearchState['targetName'];\n    countsProvider: QuickSearchState['countsProvider'];\n    displayCounts?: QuickSearchState['displayCounts'];\n  }) {\n    super({\n      key: 'quick-search',\n      urlSearchParamName,\n      targetName,\n      countsProvider,\n      displayCounts: Boolean(displayCounts),\n      value: '',\n    });\n  }\n\n  public toggleCountsDisplay(displayCounts: boolean) {\n    this.setState({ displayCounts });\n  }\n\n  private notifyValueChange = debounce((value: string) => {\n    this.publishEvent(new EventQuickSearchChanged({ searchText: value }), true);\n  }, 250);\n\n  private updateValue(value: string) {\n    const wasEmpty = this.state.value === '';\n    const isNewSearch = wasEmpty && value !== '';\n\n    if (isNewSearch) {\n      reportExploreMetrics('quick_search_used', {});\n    }\n\n    this.setState({ value });\n    this.notifyValueChange(value);\n  }\n\n  private onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    this.updateValue(e.currentTarget.value);\n  };\n\n  private clear = () => {\n    this.updateValue('');\n  };\n\n  private onKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Escape') {\n      e.preventDefault();\n      this.clear();\n    }\n  };\n\n  private useHumanFriendlyCountsMessage() {\n    const { targetName, countsProvider, displayCounts } = this.state;\n    const counts = countsProvider.useCounts();\n\n    if (!displayCounts) {\n      return {\n        tagName: '',\n        tooltipContent: '',\n      };\n    }\n\n    if (counts.current === counts.total) {\n      return {\n        tagName: `${counts.current}`,\n        tooltipContent: counts.current !== 1 ? `${counts.current} ${targetName}s in total` : `1 ${targetName} in total`,\n      };\n    }\n\n    return {\n      tagName: `${counts.current}/${counts.total}`,\n      tooltipContent:\n        counts.current !== 1\n          ? `${counts.current} out of ${counts.total} ${targetName}s in total`\n          : `1 out of ${counts.total} ${targetName}s in total`,\n    };\n  }\n\n  static readonly Component = ({ model }: { model: QuickSearch }) => {\n    const styles = useStyles2(getStyles);\n    const { targetName, value, countsProvider } = model.useState();\n    const { tagName, tooltipContent } = model.useHumanFriendlyCountsMessage();\n\n    return (\n      <Input\n        value={value}\n        onChange={model.onChange}\n        onKeyDown={model.onKeyDown}\n        placeholder={`Quick search ${targetName}s`}\n        prefix={<i className=\"fa fa-search\" />}\n        suffix={\n          <>\n            <countsProvider.Component model={countsProvider} />\n            {tagName && (\n              <Tooltip content={tooltipContent} placement=\"top\">\n                <Tag className={styles.counts} name={tagName} colorIndex={9} />\n              </Tooltip>\n            )}\n            <IconButton\n              name=\"times\"\n              variant=\"secondary\"\n              tooltip=\"Clear search\"\n              onClick={model.clear}\n              disabled={!value}\n            />\n          </>\n        }\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  counts: css`\n    margin-right: ${theme.spacing(1)};\n    border-radius: 11px;\n    padding: 2px ${theme.spacing(1)};\n    color: ${theme.colors.text.primary};\n    background-color: ${theme.colors.background.secondary};\n  `,\n});\n","import { css } from '@emotion/css';\nimport { type SelectableValue } from '@grafana/data';\nimport {\n  EmbeddedScene,\n  SceneFlexItem,\n  SceneFlexLayout,\n  type SceneComponentProps,\n  type SceneObjectState,\n  type SceneReactObject,\n  type SceneVariableSet,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { LayoutSwitcher } from './LayoutSwitcher';\nimport { MetricsSorter } from './MetricsSorter/MetricsSorter';\nimport { type CountsProvider } from './QuickSearch/CountsProvider/CountsProvider';\nimport { MetricVariableCountsProvider } from './QuickSearch/CountsProvider/MetricVariableCountsProvider';\nimport { QuickSearch } from './QuickSearch/QuickSearch';\n\ninterface ListControlsState extends SceneObjectState {\n  $variables?: SceneVariableSet;\n  inputControls?: SceneReactObject;\n  onChange?: (value: SelectableValue<string>) => void; // Keeping for backward compatibility\n}\n\n// @ts-ignore to fix build error. Is there a Scenes friend way of doing this?\nexport class ListControls extends EmbeddedScene {\n  constructor(state: Partial<ListControlsState>) {\n    super({\n      ...state,\n      key: 'list-controls',\n      body: new SceneFlexLayout({\n        direction: 'row',\n        width: '100%',\n        maxHeight: '32px',\n        children: [\n          new SceneFlexItem({\n            body: new QuickSearch({\n              urlSearchParamName: 'search_txt',\n              targetName: 'metric',\n              countsProvider: new MetricVariableCountsProvider() as unknown as CountsProvider,\n            }),\n          }),\n          new SceneFlexItem({\n            width: 'auto',\n            body: new MetricsSorter({}),\n          }),\n          new SceneFlexItem({\n            width: 'auto',\n            body: new LayoutSwitcher({}),\n          }),\n        ],\n      }),\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<ListControls>) => {\n    const styles = useStyles2(getStyles);\n    const { body } = model.useState();\n\n    return (\n      <div className={styles.headerWrapper}>\n        <body.Component model={body} />\n      </div>\n    );\n  };\n}\n\nfunction getStyles() {\n  return {\n    headerWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n      '& > div': {\n        display: 'flex',\n        alignItems: 'center',\n        '& > div': {\n          display: 'flex',\n          alignItems: 'center',\n        },\n      },\n    }),\n  };\n}\n","import { SceneVariableValueChangedEvent, type QueryVariable, type VariableValueOption } from '@grafana/scenes';\nimport { cloneDeep, isEqual } from 'lodash';\n\nimport { type MetricOptions } from './MetricsVariable';\n\nexport type MetricFilters = {\n  categories: string[];\n  prefixes: string[];\n  suffixes: string[];\n  names: string[];\n};\n\nexport class MetricsVariableFilterEngine {\n  private variable: QueryVariable;\n  private initOptions: VariableValueOption[] = [];\n  private filters: MetricFilters = {\n    categories: [],\n    prefixes: [],\n    suffixes: [],\n    names: [],\n  };\n\n  constructor(variable: QueryVariable) {\n    this.variable = variable;\n  }\n\n  public setInitOptions(options: VariableValueOption[]) {\n    this.initOptions = cloneDeep(options);\n  }\n\n  /**\n   * Get a copy of the current filters\n   */\n  public getFilters(): MetricFilters {\n    return this.filters;\n  }\n\n  /**\n   * Compute options based on filters.\n   * @param options The options to filter\n   * @param filters The filters to apply\n   * @returns Filtered options\n   */\n  public static getFilteredOptions(options: VariableValueOption[], filters: MetricFilters): MetricOptions {\n    let filteredOptions = options as MetricOptions;\n\n    if (filters.categories.length > 0) {\n      filteredOptions = MetricsVariableFilterEngine.applyCategoryFilters(filteredOptions, filters.categories);\n    }\n\n    if (filters.prefixes.length > 0) {\n      filteredOptions = MetricsVariableFilterEngine.applyPrefixFilters(filteredOptions, filters.prefixes);\n    }\n\n    if (filters.suffixes.length > 0) {\n      filteredOptions = MetricsVariableFilterEngine.applySuffixFilters(filteredOptions, filters.suffixes);\n    }\n\n    if (filters.names.length > 0) {\n      filteredOptions = MetricsVariableFilterEngine.applyNameFilters(filteredOptions, filters.names);\n    }\n\n    return filteredOptions;\n  }\n\n  public applyFilters(filters: Partial<MetricFilters> = this.filters, settings = { forceUpdate: false, notify: true }) {\n    const updatedFilters: MetricFilters = {\n      ...this.filters,\n      ...filters,\n    };\n\n    if (!settings.forceUpdate && isEqual(this.filters, updatedFilters)) {\n      return;\n    }\n\n    if (\n      !updatedFilters.categories.length &&\n      !updatedFilters.prefixes.length &&\n      !updatedFilters.suffixes.length &&\n      !updatedFilters.names.length\n    ) {\n      this.filters = updatedFilters;\n\n      this.variable.setState({ options: this.initOptions });\n\n      if (settings.notify) {\n        this.notifyUpdate();\n      }\n\n      return;\n    }\n\n    this.filters = updatedFilters;\n\n    const filteredOptions = MetricsVariableFilterEngine.getFilteredOptions(this.initOptions, this.filters);\n\n    this.variable.setState({ options: filteredOptions });\n\n    if (settings.notify) {\n      this.notifyUpdate();\n    }\n  }\n\n  private static applyCategoryFilters(options: MetricOptions, categories: string[]): MetricOptions {\n    let filteredOptions: MetricOptions = [];\n\n    for (const category of categories) {\n      const categoryRegex = MetricsVariableFilterEngine.buildRegex(category, 'i'); // see e.g. computeRulesGroups (could apply to other categories in the future)\n      filteredOptions = filteredOptions.concat(options.filter((option) => categoryRegex.test(option.value)));\n    }\n\n    return filteredOptions;\n  }\n\n  private static applyPrefixFilters(options: MetricOptions, prefixes: string[]): MetricOptions {\n    const pattern = prefixes\n      .map((prefix) => {\n        // Multi-value support (see computeMetricPrefixGroups)\n        if (prefix.includes('|')) {\n          return `${prefix\n            .split('|')\n            .map((p) => `^${p}([^a-z0-9]|$)`)\n            .join('|')}`;\n        }\n\n        return `^${prefix}([^a-z0-9]|$)`;\n      })\n      .join('|');\n\n    const prefixesRegex = MetricsVariableFilterEngine.buildRegex(`(${pattern})`);\n\n    const filteredOptions = options.filter((option) => prefixesRegex.test(option.value as string));\n\n    return filteredOptions;\n  }\n\n  private static applySuffixFilters(options: MetricOptions, suffixes: string[]): MetricOptions {\n    const pattern = suffixes\n      .map((suffix) => {\n        // Multi-value support (see computeMetricSuffixGroups)\n        if (suffix.includes('|')) {\n          return `${suffix\n            .split('|')\n            .map((s) => `(^|[^a-z0-9])${s}$`)\n            .join('|')}`;\n        }\n\n        return `(^|[^a-z0-9])${suffix}$`;\n      })\n      .join('|');\n\n    const suffixesRegex = MetricsVariableFilterEngine.buildRegex(`(${pattern})`);\n\n    const filteredOptions = options.filter((option) => suffixesRegex.test(option.value as string));\n\n    return filteredOptions;\n  }\n\n  private static applyNameFilters(options: MetricOptions, names: string[]): MetricOptions {\n    const [namePatterns] = names;\n\n    const regexes = namePatterns\n      .split(',')\n      .map((p) => p.trim())\n      .filter(Boolean)\n      .map((r) => {\n        try {\n          return new RegExp(r);\n        } catch {\n          return null;\n        }\n      })\n      .filter(Boolean) as RegExp[];\n\n    return options.filter((option) => regexes.some((regex) => regex.test(option.value as string)));\n  }\n\n  private static buildRegex(pattern: string, flags?: string) {\n    try {\n      return new RegExp(pattern, flags);\n    } catch {\n      return new RegExp('.*');\n    }\n  }\n\n  private notifyUpdate() {\n    // hack to force SceneByVariableRepeater to re-render\n    this.variable.publishEvent(new SceneVariableValueChangedEvent(this.variable), true);\n  }\n}\n","import leven from 'leven';\n\nexport function sortRelatedMetrics(metricList: string[], metric: string) {\n  return metricList.sort((aValue, bValue) => {\n    const a = getLevenDistances(aValue, metric);\n    const b = getLevenDistances(bValue, metric);\n\n    return a.halfLeven + a.wholeLeven - (b.halfLeven + b.wholeLeven);\n  });\n}\n\ntype LevenDistances = { halfLeven: number; wholeLeven: number };\ntype TargetToLevenDistances = Map<string, LevenDistances>;\n\nconst metricToTargetLevenDistances = new Map<string, TargetToLevenDistances>();\n\n// Provides the Levenshtein distance between a metric to be sorted\n// and a targetMetric compared to which all other metrics are being sorted\n// There are two distances: once for the first half and once for the whole string.\n// This operation is not expected to be symmetric; order of parameters matters\n// since only `metric` is split.\nfunction getLevenDistances(metric: string, targetMetric: string) {\n  let targetToDistances: TargetToLevenDistances | undefined = metricToTargetLevenDistances.get(metric);\n  if (!targetToDistances) {\n    targetToDistances = new Map<string, LevenDistances>();\n    metricToTargetLevenDistances.set(metric, targetToDistances);\n  }\n\n  let distances: LevenDistances | undefined = targetToDistances.get(targetMetric);\n  if (!distances) {\n    const metricSplit = metric.split('_');\n    const metricHalf = metricSplit.slice(0, metricSplit.length / 2).join('_');\n\n    const halfLeven = leven(metricHalf, targetMetric!) || 0;\n    const wholeLeven = leven(metric, targetMetric!) || 0;\n\n    distances = { halfLeven, wholeLeven };\n    targetToDistances.set(targetMetric, distances);\n  }\n\n  return distances;\n}\n","import { sceneGraph, SceneVariableValueChangedEvent, type QueryVariable } from '@grafana/scenes';\n\nimport { sortRelatedMetrics } from 'MetricScene/RelatedMetrics/sortRelatedMetrics';\nimport {\n  MetricsSorter,\n  sortMetricsByCount,\n  sortMetricsWithRecentFirst,\n  type SortingOption,\n} from 'MetricsReducer/list-controls/MetricsSorter/MetricsSorter';\nimport { type MetricUsageType } from 'MetricsReducer/list-controls/MetricsSorter/MetricUsageFetcher';\nimport { logger } from 'shared/logger/logger';\n\nimport { areArraysEqual } from './helpers/areArraysEqual';\n\nexport class MetricsVariableSortEngine {\n  private variable: QueryVariable;\n  private lastMetrics: string[];\n  private sortBy?: SortingOption | 'related';\n\n  constructor(variable: QueryVariable) {\n    this.variable = variable;\n    this.sortBy = undefined;\n    this.lastMetrics = [];\n  }\n\n  public async sort(sortBy = this.sortBy, options: Record<string, any> = {}) {\n    const metrics = this.variable.state.options.map((option) => option.value as string);\n\n    if (sortBy === this.sortBy && areArraysEqual(metrics, this.lastMetrics)) {\n      return;\n    }\n\n    let sortedMetrics: string[];\n\n    switch (sortBy) {\n      case 'dashboard-usage':\n      case 'alerting-usage':\n        sortedMetrics = await this.sortByUsage(metrics, sortBy);\n        break;\n\n      case 'related':\n        sortedMetrics = sortRelatedMetrics(metrics, options.metric);\n        break;\n\n      default:\n        sortedMetrics = sortMetricsWithRecentFirst(metrics);\n        break;\n    }\n\n    this.sortBy = sortBy;\n    this.lastMetrics = sortedMetrics;\n\n    this.variable.setState({\n      options: sortedMetrics.map((metricName) => ({\n        label: metricName,\n        value: metricName,\n      })),\n    });\n\n    this.notifyUpdate();\n  }\n\n  private async sortByUsage(metrics: string[], usageType: MetricUsageType) {\n    try {\n      const metricsSorter = sceneGraph.findByKeyAndType(this.variable, 'metrics-sorter', MetricsSorter);\n      if (!metricsSorter) {\n        logger.warn('Metrics sorter not found. Returning unsorted metrics.', { usageType });\n        return metrics;\n      }\n      const usageMetrics = await metricsSorter.getUsageMetrics(usageType);\n      return sortMetricsByCount(metrics, usageMetrics);\n    } catch (err) {\n      const error = typeof err === 'string' ? new Error(err) : (err as Error);\n      logger.error(error, {\n        usageType,\n      });\n      return metrics;\n    }\n  }\n\n  private notifyUpdate() {\n    // hack to force SceneByVariableRepeater to re-render\n    this.variable.publishEvent(new SceneVariableValueChangedEvent(this.variable), true);\n  }\n}\n","import {\n  MultiValueVariable,\n  sceneGraph,\n  SceneObjectBase,\n  VariableDependencyConfig,\n  type SceneComponentProps,\n  type SceneLayout,\n  type SceneObject,\n  type SceneObjectState,\n  type VariableValueOption,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { logger } from 'shared/logger/logger';\n\n/**\n * This component has been borrowd from Scenes v5,41,1, which is the version Metrics Drilldown currently use.\n *\n * The main purpose of this new component is to create a Scene object that has the capabilities of the original SceneByVariableRepeater and\n * that also to provide:\n *\n *   1. lazy loading/pagination\n *   2. configurable loading/error/empty states\n *   4. minor details (like calling getLayoutChild() and passing an index for multi coloring timeseries)\n *\n *\n */\ninterface SceneByVariableRepeaterState extends SceneObjectState {\n  variableName: string;\n  body: SceneLayout;\n  getLayoutChild(option: VariableValueOption, index: number, options: VariableValueOption[]): SceneObject | null;\n  getLayoutLoading?: () => SceneObject;\n  getLayoutError?: (error: Error) => SceneObject;\n  getLayoutEmpty?: () => SceneObject;\n  currentBatchSize: number;\n  initialPageSize: number;\n  pageSizeIncrement: number;\n  loadingLayout?: SceneObject;\n  errorLayout?: SceneObject;\n  emptyLayout?: SceneObject;\n}\n\nconst DEFAULT_INITIAL_PAGE_SIZE = 6;\nconst DEFAULT_PAGE_SIZE_INCREMENT = 9;\n\nexport class SceneByVariableRepeater extends SceneObjectBase<SceneByVariableRepeaterState> {\n  protected _variableDependency: VariableDependencyConfig<SceneByVariableRepeaterState> = new VariableDependencyConfig(\n    this,\n    {\n      variableNames: [this.state.variableName],\n      onVariableUpdateCompleted: () => this.performRepeat(),\n    }\n  );\n\n  public constructor({\n    variableName,\n    body,\n    getLayoutChild,\n    getLayoutLoading,\n    getLayoutError,\n    getLayoutEmpty,\n    initialPageSize,\n    pageSizeIncrement,\n  }: {\n    variableName: SceneByVariableRepeaterState['variableName'];\n    body: SceneByVariableRepeaterState['body'];\n    getLayoutChild: SceneByVariableRepeaterState['getLayoutChild'];\n    getLayoutLoading?: SceneByVariableRepeaterState['getLayoutLoading'];\n    getLayoutError?: SceneByVariableRepeaterState['getLayoutError'];\n    getLayoutEmpty?: SceneByVariableRepeaterState['getLayoutEmpty'];\n    initialPageSize?: SceneByVariableRepeaterState['initialPageSize'];\n    pageSizeIncrement?: SceneByVariableRepeaterState['pageSizeIncrement'];\n  }) {\n    super({\n      variableName,\n      body,\n      getLayoutChild,\n      getLayoutLoading,\n      getLayoutError,\n      getLayoutEmpty,\n      currentBatchSize: 0,\n      initialPageSize: initialPageSize || DEFAULT_INITIAL_PAGE_SIZE,\n      pageSizeIncrement: pageSizeIncrement || DEFAULT_PAGE_SIZE_INCREMENT,\n      loadingLayout: undefined,\n      errorLayout: undefined,\n      emptyLayout: undefined,\n    });\n\n    this.addActivationHandler(() => this.performRepeat());\n  }\n\n  private performRepeat() {\n    if (this._variableDependency.hasDependencyInLoadingState()) {\n      this.setState({\n        loadingLayout: this.state.getLayoutLoading?.(),\n        errorLayout: undefined,\n        emptyLayout: undefined,\n        currentBatchSize: 0,\n      });\n      return;\n    }\n\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this);\n    if (!(variable instanceof MultiValueVariable)) {\n      const error = new Error('SceneByVariableRepeater: variable is not a MultiValueVariable!');\n      logger.error(error);\n      return;\n    }\n\n    if (variable.state.error) {\n      this.setState({\n        errorLayout: this.state.getLayoutError?.(variable.state.error),\n        loadingLayout: undefined,\n        emptyLayout: undefined,\n        currentBatchSize: 0,\n      });\n      return;\n    }\n\n    const values = getMultiVariableValues(variable);\n\n    if (!values.length) {\n      this.setState({\n        emptyLayout: this.state.getLayoutEmpty?.(),\n        errorLayout: undefined,\n        loadingLayout: undefined,\n        currentBatchSize: 0,\n      });\n      return;\n    }\n\n    this.setState({\n      loadingLayout: undefined,\n      errorLayout: undefined,\n      emptyLayout: undefined,\n      currentBatchSize: this.state.initialPageSize,\n    });\n\n    const newChildren: SceneObject[] = values\n      .slice(0, this.state.initialPageSize)\n      .map((option, index) => this.state.getLayoutChild(option, index, values))\n      .filter(Boolean) as SceneObject[];\n\n    this.state.body.setState({\n      children: newChildren,\n    });\n  }\n\n  public increaseBatchSize() {\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this) as MultiValueVariable;\n    const values = getMultiVariableValues(variable);\n\n    const newBatchSize = this.state.currentBatchSize + this.state.pageSizeIncrement;\n\n    const newChildren: SceneObject[] = values\n      .slice(this.state.currentBatchSize, newBatchSize)\n      .map((option, index) => this.state.getLayoutChild(option, this.state.currentBatchSize + index, values))\n      .filter(Boolean) as SceneObject[];\n\n    this.state.body.setState({\n      children: [...this.state.body.state.children, ...newChildren],\n    });\n\n    this.setState({\n      currentBatchSize: newBatchSize,\n    });\n  }\n\n  public useSizes() {\n    const { currentBatchSize, pageSizeIncrement } = this.useState();\n    const variable = sceneGraph.lookupVariable(this.state.variableName, this);\n    const total = (variable as MultiValueVariable).state.options.length;\n    const remaining = total - currentBatchSize;\n    const increment = remaining < pageSizeIncrement ? remaining : pageSizeIncrement;\n    return {\n      increment,\n      current: currentBatchSize,\n      total,\n    };\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<SceneByVariableRepeater>) => {\n    const { body, loadingLayout, errorLayout, emptyLayout } = model.useState();\n\n    if (loadingLayout) {\n      return <loadingLayout.Component model={loadingLayout} />;\n    }\n\n    if (errorLayout) {\n      return <errorLayout.Component model={errorLayout} />;\n    }\n\n    if (emptyLayout) {\n      return <emptyLayout.Component model={emptyLayout} />;\n    }\n\n    return <body.Component model={body} />;\n  };\n}\n\nexport function getMultiVariableValues(variable: MultiValueVariable): VariableValueOption[] {\n  const { value, text, options } = variable.state;\n\n  if (variable.hasAllValue()) {\n    return options;\n  }\n\n  if (Array.isArray(value) && Array.isArray(text)) {\n    return value.map((v, i) => ({ value: v, label: text[i] as string }));\n  }\n\n  return [{ value: value as string, label: text as string }];\n}\n","import { Button } from '@grafana/ui';\nimport React, { type MouseEventHandler } from 'react';\n\ntype ShowMoreButtonProps = {\n  label: string;\n  batchSizes: {\n    increment: number;\n    current: number;\n    total: number;\n  };\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  tooltip?: string;\n};\n\nexport function ShowMoreButton({ label, batchSizes, onClick, tooltip }: Readonly<ShowMoreButtonProps>) {\n  return (\n    <Button variant=\"secondary\" fill=\"outline\" onClick={onClick} tooltip={tooltip} tooltipPlacement=\"top\">\n      Show {batchSizes.increment} more {batchSizes.increment === 1 ? label : `${label}s`} ({batchSizes.current}/\n      {batchSizes.total})\n    </Button>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { type GrafanaTheme2, type IconName } from '@grafana/data';\nimport { Button, Dropdown, Icon, Menu, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { type MetricUsageType } from 'MetricsReducer/list-controls/MetricsSorter/MetricUsageFetcher';\n\nimport { type WithUsageDataPreviewPanelState } from './WithUsageDataPreviewPanel';\n\ninterface UsageSectionProps {\n  usageType: MetricUsageType;\n  usageCount: number;\n  singularUsageType: string;\n  pluralUsageType: string;\n  icon: IconName;\n  dashboardItems: WithUsageDataPreviewPanelState['dashboardItems'];\n}\n\nexport function UsageData({\n  usageType,\n  usageCount,\n  singularUsageType,\n  pluralUsageType,\n  icon,\n  dashboardItems,\n}: Readonly<UsageSectionProps>) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.usageContainer} data-testid=\"usage-data-panel\">\n      {usageType === 'dashboard-usage' ? (\n        <>\n          <Dropdown\n            placement=\"right-start\"\n            overlay={\n              <Menu style={{ maxWidth: '240px', maxHeight: '245px', overflowY: 'auto' }}>\n                {dashboardItems.map((item) => (\n                  <Menu.Item\n                    key={item.id}\n                    label=\"\"\n                    url={item.url}\n                    target=\"_blank\"\n                    className={styles.menuItem}\n                    component={() => (\n                      <Tooltip\n                        content={`Used ${item.count} ${item.count === 1 ? 'time' : 'times'} in ${item.label}`}\n                        placement=\"right\"\n                      >\n                        <div className={styles.menuItemContent}>\n                          <Icon name=\"external-link-alt\" /> {item.label} ({item.count})\n                        </div>\n                      </Tooltip>\n                    )}\n                  />\n                ))}\n              </Menu>\n            }\n          >\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              tooltip={`Metric used ${usageCount} ${\n                usageCount === 1 ? 'time' : 'times'\n              } in dashboard queries. Click to view the dashboards.`}\n              className={cx(styles.usageItem, styles.clickableUsageItem)}\n            >\n              <span data-testid={usageType}>\n                <Icon name={icon} style={{ marginRight: '4px' }} /> {usageCount}\n              </span>\n            </Button>\n          </Dropdown>\n        </>\n      ) : (\n        <Tooltip\n          content={`Metric is used in ${usageCount} ${usageCount === 1 ? singularUsageType : pluralUsageType}`}\n          placement=\"top\"\n        >\n          <span className={styles.usageItem} data-testid={usageType}>\n            <Icon name={icon} /> {usageCount}\n          </span>\n        </Tooltip>\n      )}\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    usageContainer: css({\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      gap: '17px',\n      padding: '8px 12px',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderTopWidth: 0,\n      backgroundColor: theme.colors.background.primary,\n      alignItems: 'center',\n    }),\n    usageItem: css({\n      display: 'flex',\n      alignItems: 'center',\n      gap: '4px',\n      color: theme.colors.text.secondary,\n      opacity: '65%',\n    }),\n    clickableUsageItem: css({\n      backgroundColor: 'transparent',\n      border: 'none',\n    }),\n    menuItem: css({\n      color: theme.colors.text.primary,\n      textDecoration: 'none',\n      '&:hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n    menuItemContent: css({\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n}\n","import {\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { type IconName } from '@grafana/ui';\nimport React from 'react';\n\nimport {\n  MetricsSorter,\n  VAR_WINGMAN_SORT_BY,\n  type SortingOption,\n} from 'MetricsReducer/list-controls/MetricsSorter/MetricsSorter';\nimport { VAR_FILTERED_METRICS_VARIABLE } from 'MetricsReducer/metrics-variables/FilteredMetricsVariable';\nimport { MetricsReducer } from 'MetricsReducer/MetricsReducer';\nimport { type GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { logger } from 'shared/logger/logger';\nimport { isCustomVariable } from 'shared/utils/utils.variables';\n\nimport { UsageData } from './UsageData';\n\nexport const VIZ_PANEL_HEIGHT = '220px';\nexport const VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW = '260px';\n\ntype SortBy = Exclude<SortingOption, 'related'>;\n\nexport type WithUsageDataPreviewPanelState = SceneObjectState & {\n  vizPanelInGridItem: GmdVizPanel;\n  metric: string;\n  sortBy: SortBy;\n  usageCount: number;\n  singularUsageType: string;\n  pluralUsageType: string;\n  icon: IconName;\n  dashboardItems: Array<{ id: string; label: string; count: number; url: string }>;\n};\n\nexport class WithUsageDataPreviewPanel extends SceneObjectBase<WithUsageDataPreviewPanelState> {\n  constructor(state: Pick<WithUsageDataPreviewPanelState, 'vizPanelInGridItem' | 'metric'>) {\n    super({\n      ...state,\n      sortBy: 'default',\n      usageCount: 0,\n      singularUsageType: '',\n      pluralUsageType: '',\n      icon: '' as IconName,\n      dashboardItems: [],\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    let metricsReducer;\n\n    try {\n      metricsReducer = sceneGraph.getAncestor(this, MetricsReducer);\n    } catch {\n      return;\n    }\n\n    const filteredMetricsEngine = metricsReducer.state.enginesMap.get(VAR_FILTERED_METRICS_VARIABLE);\n    if (!filteredMetricsEngine) {\n      return;\n    }\n\n    const metricsSorter = sceneGraph.findByKeyAndType(this, 'metrics-sorter', MetricsSorter);\n    const sortByVar = sceneGraph.getVariables(metricsSorter).getByName(VAR_WINGMAN_SORT_BY);\n\n    if (isCustomVariable(sortByVar)) {\n      this.updateSortBy(metricsSorter, sortByVar.getValue() as SortBy);\n\n      this._subs.add(\n        sortByVar.subscribeToState(({ value }) => {\n          this.updateSortBy(metricsSorter, value as SortBy);\n        })\n      );\n    }\n  }\n\n  private async updateSortBy(metricsSorter: MetricsSorter, sortBy: SortBy) {\n    this.setState({ sortBy });\n    this.updateLayout(sortBy);\n\n    if (sortBy === 'default') {\n      return;\n    }\n\n    const usage = await metricsSorter.getUsageDetailsForMetric(this.state.metric, sortBy);\n\n    switch (sortBy) {\n      case 'dashboard-usage':\n        // FIXME: we do this only to satisfy TS Lord\n        if (usage.usageType !== 'dashboard-usage') {\n          return;\n        }\n\n        const { dashboards } = usage;\n\n        this.setState({\n          usageCount: usage.count,\n          singularUsageType: 'dashboard panel query',\n          pluralUsageType: 'dashboard panel queries',\n          icon: 'apps',\n          dashboardItems: Object.entries(dashboards)\n            .map(([label, dashboardInfo]) => ({\n              id: dashboardInfo.uid,\n              label,\n              count: dashboardInfo.count,\n              url: dashboardInfo.url,\n            }))\n            .sort((a, b) => b.count - a.count),\n        });\n        break;\n\n      case 'alerting-usage':\n        this.setState({\n          usageCount: usage.count,\n          singularUsageType: 'alert rule',\n          pluralUsageType: 'alert rules',\n          icon: 'bell',\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  private updateLayout(sortBy: WithUsageDataPreviewPanelState['sortBy']) {\n    const gridLayout = sceneGraph.getAncestor(this, SceneCSSGridLayout);\n    const currentGridLayoutHeight = gridLayout?.state.autoRows;\n\n    const expectedPanelHeight = sortBy === 'default' ? VIZ_PANEL_HEIGHT : VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW;\n\n    if (currentGridLayoutHeight !== expectedPanelHeight) {\n      gridLayout.setState({ autoRows: expectedPanelHeight });\n    }\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<WithUsageDataPreviewPanel>) => {\n    const { vizPanelInGridItem, sortBy, usageCount, singularUsageType, pluralUsageType, icon, dashboardItems } =\n      model.useState();\n\n    if (!vizPanelInGridItem) {\n      logger.log('no viz panel');\n      return;\n    }\n\n    return (\n      <div data-testid=\"with-usage-data-preview-panel\">\n        <vizPanelInGridItem.Component model={vizPanelInGridItem} />\n        {sortBy !== 'default' && (\n          <UsageData\n            usageType={sortBy}\n            usageCount={usageCount}\n            singularUsageType={singularUsageType}\n            pluralUsageType={pluralUsageType}\n            icon={icon}\n            dashboardItems={dashboardItems}\n          />\n        )}\n      </div>\n    );\n  };\n}\n","import React from 'react';\n\nexport function GroupsIcon() {\n  return (\n    <svg stroke=\"currentColor\" width=\"17\" height=\"16\" viewBox=\"0 0 17 16\" fill=\"none\">\n      <circle cx=\"8.92688\" cy=\"3.63132\" r=\"2.375\" strokeWidth=\"1.5\" />\n      <path d=\"M13.6469 4.37965C14.6813 4.76699 15.3235 7.03139 14.9362 8.06582\" strokeWidth=\"1.5\" />\n      <path d=\"M4.35309 4.37965C3.31866 4.76699 2.67651 7.03139 3.06384 8.06582\" strokeWidth=\"1.5\" />\n      <path d=\"M10.3408 14.2531C9.75237 14.8415 8.11813 14.7799 7.50903 14.1708\" strokeWidth=\"1.5\" />\n      <circle cx=\"4.00195\" cy=\"12.251\" r=\"2.375\" strokeWidth=\"1.5\" />\n      <circle cx=\"13.8478\" cy=\"12.251\" r=\"2.375\" strokeWidth=\"1.5\" />\n    </svg>\n  );\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\ninterface EventConfigurePanelPayload {\n  metric: string;\n}\n\nexport class EventConfigurePanel extends BusEventWithPayload<EventConfigurePanelPayload> {\n  public static readonly type = 'configure-panel';\n}\n","import { css, cx } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { PREF_KEYS } from 'shared/user-preferences/pref-keys';\nimport { userStorage } from 'shared/user-preferences/userStorage';\n\nimport { EventConfigurePanel } from './EventConfigurePanel';\n\ninterface ConfigurePanelActionState extends SceneObjectState {\n  metric: string;\n  disabled: boolean;\n  isAlreadyConfigured: boolean;\n}\n\nexport class ConfigurePanelAction extends SceneObjectBase<ConfigurePanelActionState> {\n  constructor({\n    metric,\n    disabled,\n  }: {\n    metric: ConfigurePanelActionState['metric'];\n    disabled?: ConfigurePanelActionState['disabled'];\n  }) {\n    const userPrefs = userStorage.getItem(PREF_KEYS.METRIC_PREFS) || {};\n\n    super({\n      metric,\n      disabled: disabled !== undefined ? disabled : false,\n      isAlreadyConfigured: Boolean(userPrefs[metric]?.config),\n    });\n  }\n\n  public onClick = () => {\n    this.publishEvent(new EventConfigurePanel({ metric: this.state.metric }), true);\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<ConfigurePanelAction>) => {\n    const styles = useStyles2(getStyles);\n    const { isAlreadyConfigured, disabled } = model.useState();\n\n    const label = isAlreadyConfigured ? 'Reconfigure Prometheus function' : 'Configure Prometheus function';\n\n    return (\n      <Button\n        className={cx(styles.selectButton, isAlreadyConfigured && styles.active)}\n        aria-label={label}\n        variant=\"secondary\"\n        size=\"sm\"\n        fill=\"text\"\n        onClick={model.onClick}\n        icon=\"cog\"\n        tooltip={label}\n        tooltipPlacement=\"top\"\n        disabled={disabled}\n        data-testid=\"configure-panel\"\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  selectButton: css`\n    margin: 0;\n    padding: 0;\n    margin-left: ${theme.spacing(1)};\n  `,\n  active: css`\n    color: ${theme.colors.text.maxContrast};\n  `,\n});\n","import { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\nimport React from 'react';\n\nimport { MetricSelectedEvent } from 'shared/shared';\n\ninterface SelectActionState extends SceneObjectState {\n  metric: string;\n  variant: 'primary' | 'secondary';\n  fill: 'solid' | 'outline' | 'text';\n}\n\nexport class SelectAction extends SceneObjectBase<SelectActionState> {\n  constructor({\n    metric,\n    variant,\n    fill,\n  }: {\n    metric: SelectActionState['metric'];\n    variant?: SelectActionState['variant'];\n    fill?: SelectActionState['fill'];\n  }) {\n    super({\n      key: `select-action-${metric}`,\n      metric,\n      variant: variant || 'primary',\n      fill: fill || 'outline',\n    });\n  }\n\n  public onClick = () => {\n    this.publishEvent(new MetricSelectedEvent({ metric: this.state.metric }), true);\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<SelectAction>) => {\n    const { variant, fill } = model.useState();\n\n    return (\n      <Button\n        variant={variant}\n        fill={fill}\n        size=\"sm\"\n        onClick={model.onClick}\n        data-testid={`select-action-${model.state.metric}`}\n      >\n        Select\n      </Button>\n    );\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { type PanelType } from '../types/available-panel-types';\n\ninterface EventPanelTypeChangedPayload {\n  panelType: PanelType;\n}\n\nexport class EventPanelTypeChanged extends BusEventWithPayload<EventPanelTypeChangedPayload> {\n  public static readonly type = 'panel-type-changed';\n}\n","import { type PanelOptions, type QueryOptions } from 'shared/GmdVizPanel/GmdVizPanel';\n\nexport const CONFIG_PRESETS = {\n  TIMESERIES_AVG: 'timeseries-avg',\n  TIMESERIES_SUM: 'timeseries-sum',\n  TIMESERIES_STDDEV: 'timeseries-stddev',\n  TIMESERIES_PERCENTILES: 'timeseries-percentiles',\n  TIMESERIES_MIN_MAX: 'timeseries-minmax',\n  TIMESERIES_AGE_TIME_MINUS_AVG: 'timeseries-age-time-minus-avg',\n  TIMESERIES_AGE_TIME_MINUS_MIN_MAX: 'timeseries-age-time-minus-min-max',\n  HISTOGRAM_HEATMAP: 'histogram-heatmap',\n  HISTOGRAM_PERCENTILES: 'histogram-percentiles',\n  STATUS_UPDOWN_HISTORY: 'status-updown-history',\n  STATUS_UPDOWN_STAT: 'status-updown-stat',\n} as const;\n\nexport type ConfigPresetId = (typeof CONFIG_PRESETS)[keyof typeof CONFIG_PRESETS];\n\nexport type PanelConfigPreset = {\n  id: ConfigPresetId;\n  name?: string;\n  panelOptions: PanelOptions;\n  queryOptions: QueryOptions;\n};\n","import { promql } from 'tsqtsq';\n\nconst PROMETHEUS_FUNCTIONS = [\n  // timeseries (rate and non-rate)\n  'avg',\n  'sum',\n  'stddev',\n  'quantile',\n  'min',\n  'max',\n  // histograms\n  'histogram_quantile',\n  // age\n  'time-avg(metric)',\n  'time-min(metric)',\n  'time-max(metric)',\n] as const;\n\nexport type PrometheusFunction = (typeof PROMETHEUS_FUNCTIONS)[number];\n\ntype MapEntry = {\n  name: PrometheusFunction;\n  fn: (args: any) => string;\n};\n\nexport const PROMQL_FUNCTIONS = new Map<PrometheusFunction, MapEntry>([\n  // methods exposed in the promql API\n  ...['avg', 'sum', 'stddev', 'quantile', 'min', 'max'].map(\n    (name) =>\n      [\n        name,\n        {\n          name,\n          fn: (args: any) => (promql as any)[name](args),\n        },\n      ] as [PrometheusFunction, MapEntry]\n  ),\n  // custom functions that we define ourselves\n  [\n    'histogram_quantile',\n    {\n      name: 'histogram_quantile',\n      // histogram_quantile is not available in the tsqtsq library\n      fn: ({ expr, parameter }: { expr: string; parameter: number }) => `histogram_quantile(${parameter},${expr})`,\n    },\n  ],\n  [\n    'time-avg(metric)',\n    {\n      name: 'time-avg(metric)',\n      fn: ({ expr }: { expr: string }) => `time()-avg(${expr})`,\n    },\n  ],\n  [\n    'time-min(metric)',\n    {\n      name: 'time-min(metric)',\n      fn: ({ expr }: { expr: string }) => `time()-min(${expr})`,\n    },\n  ],\n  [\n    'time-max(metric)',\n    {\n      name: 'time-max(metric)',\n      fn: ({ expr }: { expr: string }) => `time()-max(${expr})`,\n    },\n  ],\n]);\n","import { displayWarning } from 'MetricsReducer/helpers/displayStatus';\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\nimport { PREF_KEYS } from 'shared/user-preferences/pref-keys';\nimport { userStorage } from 'shared/user-preferences/userStorage';\n\nimport { CONFIG_PRESETS, type PanelConfigPreset } from './presets/types';\nimport { PROMQL_FUNCTIONS } from './promql-functions';\nimport { AVAILABLE_PANEL_TYPES } from '../types/available-panel-types';\n\nconst availableConfigPresetIds = new Set<string>(Object.values(CONFIG_PRESETS));\nconst availablePanelTypes = new Set<string>(AVAILABLE_PANEL_TYPES);\n\nexport function getPreferredConfigForMetric(metric: string): PanelConfigPreset | undefined {\n  const userPrefs = userStorage.getItem(PREF_KEYS.METRIC_PREFS) || {};\n  const metricConfig = userPrefs[metric]?.config;\n\n  if (!metricConfig) {\n    return undefined;\n  }\n\n  if (!isValid(metricConfig)) {\n    reportExploreMetrics('invalid_metric_config', { metricConfig });\n\n    delete userPrefs[metric]?.config;\n    userStorage.setItem(PREF_KEYS.METRIC_PREFS, userPrefs);\n\n    displayWarning([\n      `Invalid configuration found for metric ${metric}!`,\n      'The configuration has been deleted and will not be applied.',\n    ]);\n\n    return undefined;\n  }\n\n  return metricConfig;\n}\n\n/* eslint-disable sonarjs/prefer-single-boolean-return */\nexport function isValid(metricConfig: PanelConfigPreset): boolean {\n  if (!['id', 'panelOptions', 'queryOptions'].every((key) => key in metricConfig)) {\n    return false;\n  }\n\n  if (typeof metricConfig.id !== 'string' || !availableConfigPresetIds.has(metricConfig.id)) {\n    return false;\n  }\n\n  if (typeof metricConfig.panelOptions.type !== 'string' || !availablePanelTypes.has(metricConfig.panelOptions.type)) {\n    return false;\n  }\n\n  if (!Array.isArray(metricConfig.queryOptions.queries)) {\n    return false;\n  }\n\n  if (\n    !metricConfig.queryOptions.queries.every((q) => {\n      if (!PROMQL_FUNCTIONS.has(q.fn)) {\n        return false;\n      }\n\n      if (!['quantile', 'histogram_quantile'].includes(q.fn)) {\n        return true;\n      }\n\n      if (!Array.isArray(q.params?.percentiles) || !q.params.percentiles.length) {\n        return false;\n      }\n\n      return q.params.percentiles.every((p) => p >= 1 && p <= 99);\n    })\n  ) {\n    return false;\n  }\n\n  return true;\n}\n","export const AVAILABLE_PANEL_TYPES = [\n  'heatmap',\n  'percentiles',\n  'stat',\n  'statushistory',\n  'timeseries',\n  // TODO for info metrics, see https://github.com/grafana/metrics-drilldown/issues/450\n  // 'table',\n] as const;\n\nexport type PanelType = (typeof AVAILABLE_PANEL_TYPES)[number];\n","// height in pixels\nexport enum PANEL_HEIGHT {\n  S = 160,\n  M = 220,\n  L = 260,\n  XL = 280,\n}\n","// the resolution determines the maxDataPoints of the query runner (e.g. see src/GmdVizPanel/statushistory/getStatushistoryQueryRunnerParams.ts)\nexport enum QUERY_RESOLUTION {\n  HIGH = 'HIGH',\n  MEDIUM = 'MEDIUM',\n}\n","const STATUS_UPDOWN_METRIC_REGEX = /_up$/;\n\nexport const isStatusUpDownMetric = (metric: string) => metric === 'up' || STATUS_UPDOWN_METRIC_REGEX.test(metric);\n","import { type DataTrail } from 'AppDataTrail/DataTrail';\n\nimport { getMetricType } from './getMetricType';\nimport { isStatusUpDownMetric } from './isStatusUpDownMetric';\nimport { type HistogramType } from '../GmdVizPanel';\nimport { type PanelType } from '../types/available-panel-types';\n\n/**\n * These are functions that receive a metric name to determine in which panel type they should be displayed.\n * Note that they don't consider user preferences stored in user storage.\n */\nexport async function getPanelTypeForMetric(metric: string, dataTrail: DataTrail): Promise<PanelType> {\n  const metricType = await getMetricType(metric, dataTrail);\n\n  switch (metricType) {\n    case 'classic-histogram':\n    case 'native-histogram':\n      return 'heatmap';\n\n    case 'status-updown':\n      return 'statushistory';\n\n    case 'counter':\n    case 'age':\n    default:\n      return 'timeseries';\n  }\n}\n\n/**\n * A sync version to use when we already know the histogram type and performance is important\n */\nexport function getPanelTypeForMetricSync(metric: string, histogramType: HistogramType): PanelType {\n  if (histogramType === 'classic' || histogramType === 'native') {\n    return 'heatmap';\n  }\n\n  return isStatusUpDownMetric(metric) ? 'statushistory' : 'timeseries';\n}\n","import { isValidLegacyName, utf8Support } from '@grafana/prometheus';\nimport { Expression, MatchingOperator, promql } from 'tsqtsq';\n\nimport { VAR_FILTERS } from 'shared/shared';\n\nexport type LabelMatcher = {\n  key: string;\n  operator: string;\n  value: string;\n};\n\nfunction expressionToString(expression: Expression) {\n  // see hacks in buildQueryExpression() below\n  return expression.toString().replaceAll('=\"__REMOVE__\"', '');\n}\n\ntype Options = {\n  metric: string;\n  labelMatchers?: LabelMatcher[];\n  addIgnoreUsageFilter?: boolean;\n  addExtremeValuesFiltering?: boolean;\n};\n\nexport function buildQueryExpression(options: Options): string {\n  const { metric, labelMatchers = [], addIgnoreUsageFilter = true, addExtremeValuesFiltering = false } = options;\n\n  const defaultSelectors = labelMatchers.map((m) => ({\n    label: utf8Support(m.key),\n    operator: m.operator as MatchingOperator,\n    value: m.value,\n  }));\n\n  if (addIgnoreUsageFilter) {\n    defaultSelectors.push({ label: '__ignore_usage__', operator: MatchingOperator.equal, value: '' });\n  }\n\n  const isUtf8Metric = !isValidLegacyName(metric);\n  if (isUtf8Metric) {\n    // hack to have the UTF-8 metric name in braces alongside labels\n    // but without extra quotes associated with an empty label value\n    defaultSelectors.push({ label: utf8Support(metric), operator: MatchingOperator.equal, value: '__REMOVE__' });\n  }\n\n  // hack for Scenes to interpolate the VAR_FILTERS variable\n  // added last so that, if filters are empty, the query is still valid\n  // and we're using :raw for variables containing special characters (like equal signs etc.)\n  defaultSelectors.push({ label: `\\${${VAR_FILTERS}:raw}`, operator: MatchingOperator.equal, value: '__REMOVE__' });\n\n  const expression = new Expression({\n    metric,\n    values: {},\n    defaultOperator: MatchingOperator.equal,\n    defaultSelectors,\n  });\n\n  const expressionString = expressionToString(expression);\n\n  if (addExtremeValuesFiltering) {\n    return promql.and({\n      left: expressionString,\n      right: `${expressionString} > -Inf`,\n    });\n  }\n\n  return expressionString;\n}\n","export const DEFAULT_UNIT = 'none';\nexport const DEFAULT_RATE_UNIT = 'cps'; // Count per second\n\n// Unit constants\nexport const UNIT_BYTES = 'bytes';\nexport const UNIT_SECONDS = 'seconds';\nconst UNIT_PERCENT = 'percent';\nconst UNIT_COUNT = 'count';\n\n// Rate unit constants\nexport const RATE_BYTES_PER_SECOND = 'Bps';\n\nconst UNIT_MAP: Record<string, string> = {\n  [UNIT_BYTES]: UNIT_BYTES,\n  [UNIT_SECONDS]: 's',\n  [UNIT_PERCENT]: UNIT_PERCENT,\n  [UNIT_COUNT]: DEFAULT_UNIT,\n};\n\nconst UNIT_LIST = Object.keys(UNIT_MAP); // used to check if a metric name contains any of the supported units\n\nconst RATE_UNIT_MAP: Record<string, string> = {\n  [UNIT_BYTES]: RATE_BYTES_PER_SECOND,\n  // seconds per second is unitless\n  [UNIT_SECONDS]: DEFAULT_UNIT,\n  [UNIT_COUNT]: DEFAULT_RATE_UNIT,\n  [UNIT_PERCENT]: UNIT_PERCENT,\n};\n\n// Get unit from metric name (e.g. \"go_gc_duration_seconds\" -> \"seconds\")\nexport function getUnitFromMetric(metric: string) {\n  // Get last two parts of the metric name and check if they are valid units\n  const metricParts = metric.toLowerCase().split('_').slice(-2);\n  for (let i = metricParts.length - 1; i >= Math.max(0, metricParts.length - 2); i--) {\n    const part = metricParts[i];\n    if (UNIT_LIST.includes(part)) {\n      return part;\n    }\n  }\n\n  return null;\n}\n\n// Get Grafana unit for a panel (e.g. \"go_gc_duration_seconds\" -> \"s\")\nexport function getUnit(metricName: string) {\n  const metricPart = getUnitFromMetric(metricName);\n  return (metricPart && UNIT_MAP[metricPart.toLowerCase()]) || DEFAULT_UNIT;\n}\n\nexport function getPerSecondRateUnit(metricName: string) {\n  const metricPart = getUnitFromMetric(metricName);\n  return (metricPart && RATE_UNIT_MAP[metricPart]) || DEFAULT_RATE_UNIT;\n}\n","import { PanelBuilders, SceneQueryRunner, type VizPanel } from '@grafana/scenes';\nimport {\n  HeatmapColorMode,\n  type HeatmapLegend,\n} from '@grafana/schema/dist/esm/raw/composable/heatmap/panelcfg/x/HeatmapPanelCfg_types.gen';\n\nimport { type HistogramType, type PanelConfig, type QueryConfig } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { trailDS } from 'shared/shared';\n\nimport { getHeatmapQueryRunnerParams } from './getHeatmapQueryRunnerParams';\nimport { getUnit } from '../../units/getUnit';\n\ntype HeatmapPanelOptions = {\n  metric: string;\n  histogramType: HistogramType;\n  panelConfig: PanelConfig;\n  queryConfig: QueryConfig;\n};\n\nexport function buildHeatmapPanel(options: HeatmapPanelOptions): VizPanel {\n  const { metric, histogramType, panelConfig, queryConfig } = options;\n  const queryParams = getHeatmapQueryRunnerParams({\n    metric,\n    isNativeHistogram: histogramType === 'native',\n    queryConfig,\n  });\n  const unit = getUnit(metric);\n\n  const queryRunner =\n    queryConfig.data ||\n    new SceneQueryRunner({\n      datasource: trailDS,\n      maxDataPoints: queryParams.maxDataPoints,\n      queries: queryParams.queries,\n    });\n\n  return PanelBuilders.heatmap()\n    .setTitle(panelConfig.title)\n    .setDescription(panelConfig.description)\n    .setHeaderActions(panelConfig.headerActions({ metric, panelConfig }))\n    .setMenu(panelConfig.menu?.({ metric, panelConfig }))\n    .setShowMenuAlways(Boolean(panelConfig.menu))\n    .setData(queryRunner)\n    .setUnit(unit)\n    .setOption('calculate', false)\n    .setOption('color', {\n      mode: HeatmapColorMode.Scheme,\n      exponent: 0.5,\n      scheme: 'Spectral',\n      steps: 32,\n      reverse: false,\n    })\n    .setOption('legend', panelConfig.legend as HeatmapLegend)\n    .build();\n}\n","import { type SceneDataQuery } from '@grafana/scenes';\nimport { promql } from 'tsqtsq';\n\nimport { buildQueryExpression } from 'shared/GmdVizPanel/buildQueryExpression';\nimport { QUERY_RESOLUTION } from 'shared/GmdVizPanel/config/query-resolutions';\nimport { type QueryConfig } from 'shared/GmdVizPanel/GmdVizPanel';\n\ntype HeatmapQueryRunnerParams = {\n  maxDataPoints: number;\n  queries: SceneDataQuery[];\n};\n\ntype Options = {\n  metric: string;\n  isNativeHistogram: boolean;\n  queryConfig: QueryConfig;\n};\n\nexport function getHeatmapQueryRunnerParams(options: Options): HeatmapQueryRunnerParams {\n  const { metric, isNativeHistogram, queryConfig } = options;\n  const expression = buildQueryExpression({\n    metric,\n    labelMatchers: queryConfig.labelMatchers,\n    addIgnoreUsageFilter: queryConfig.addIgnoreUsageFilter,\n    addExtremeValuesFiltering: queryConfig.addExtremeValuesFiltering,\n  });\n\n  const query = isNativeHistogram\n    ? promql.sum({ expr: promql.rate({ expr: expression }) })\n    : promql.sum({ expr: promql.rate({ expr: expression }), by: ['le'] });\n\n  return {\n    maxDataPoints: queryConfig.resolution === QUERY_RESOLUTION.HIGH ? 500 : 250,\n    queries: [\n      {\n        refId: `${metric}-heatmap`,\n        expr: query,\n        format: 'heatmap',\n        fromExploreMetrics: true,\n      },\n    ],\n  };\n}\n","const COUNTER_METRIC_REGEX = /_(count|total|sum)$/;\n\nexport const isCounterMetric = (metric: string) => COUNTER_METRIC_REGEX.test(metric);\n","import { type SceneDataQuery } from '@grafana/scenes';\nimport { promql } from 'tsqtsq';\n\nimport { buildQueryExpression } from 'shared/GmdVizPanel/buildQueryExpression';\nimport { PROMQL_FUNCTIONS } from 'shared/GmdVizPanel/config/promql-functions';\nimport { QUERY_RESOLUTION } from 'shared/GmdVizPanel/config/query-resolutions';\nimport { type HistogramType, type QueryConfig, type QueryDefs } from 'shared/GmdVizPanel/GmdVizPanel';\n\nimport { isCounterMetric as isCounterMetricFn } from '../..//matchers/isCounterMetric';\n\ntype PercentilesQueryRunnerParams = {\n  isRateQuery: boolean;\n  maxDataPoints: number;\n  queries: SceneDataQuery[];\n};\n\ntype Options = {\n  metric: string;\n  histogramType: HistogramType;\n  queryConfig: QueryConfig;\n};\n\nconst DEFAULT_PERCENTILES = [99, 90, 50] as const;\n\nexport function getPercentilesQueryRunnerParams(options: Options): PercentilesQueryRunnerParams {\n  const { metric, histogramType, queryConfig } = options;\n  const isCounterMetric = isCounterMetricFn(metric);\n  const expression = buildQueryExpression({\n    metric,\n    labelMatchers: queryConfig.labelMatchers,\n    addIgnoreUsageFilter: queryConfig.addIgnoreUsageFilter,\n    addExtremeValuesFiltering: queryConfig.addExtremeValuesFiltering,\n  });\n\n  const queries =\n    histogramType === 'none'\n      ? buildNonHistogramQueries({\n          metric,\n          queryConfig,\n          isRateQuery: isCounterMetric,\n          expr: expression,\n        })\n      : buildHistogramQueries({\n          metric,\n          isNativeHistogram: histogramType === 'native',\n          queryConfig,\n          expr: expression,\n        });\n\n  return {\n    isRateQuery: histogramType !== 'none' ? true : isCounterMetric,\n    maxDataPoints: queryConfig.resolution === QUERY_RESOLUTION.HIGH ? 500 : 250,\n    queries,\n  };\n}\n\nfunction buildHistogramQueries({\n  metric,\n  isNativeHistogram,\n  queryConfig,\n  expr,\n}: {\n  metric: string;\n  isNativeHistogram: boolean;\n  queryConfig: QueryConfig;\n  expr: string;\n}): SceneDataQuery[] {\n  const queryDefs: QueryDefs = queryConfig.queries?.length\n    ? queryConfig.queries\n    : [{ fn: 'histogram_quantile', params: { percentiles: DEFAULT_PERCENTILES } }];\n\n  const queries: SceneDataQuery[] = [];\n\n  const newExpr = isNativeHistogram\n    ? promql.sum({ expr: promql.rate({ expr }) })\n    : promql.sum({ expr: promql.rate({ expr }), by: ['le'] });\n\n  for (const { fn, params } of queryDefs) {\n    const entry = PROMQL_FUNCTIONS.get(fn)!;\n    const fnName = entry.name;\n    const percentiles = params?.percentiles || DEFAULT_PERCENTILES;\n\n    for (const percentile of percentiles) {\n      const parameter = percentile / 100;\n      const query = entry.fn({ expr: newExpr, parameter });\n\n      queries.push({\n        refId: `${metric}-p${percentile}-${fnName}`,\n        expr: query,\n        legendFormat: `${percentile}th Percentile`,\n        fromExploreMetrics: true,\n      });\n    }\n  }\n\n  return queries;\n}\n\nfunction buildNonHistogramQueries({\n  metric,\n  queryConfig,\n  isRateQuery,\n  expr,\n}: {\n  metric: string;\n  queryConfig: QueryConfig;\n  isRateQuery: boolean;\n  expr: string;\n}): SceneDataQuery[] {\n  const queryDefs: QueryDefs = queryConfig.queries?.length\n    ? queryConfig.queries\n    : [{ fn: 'quantile', params: { percentiles: [99, 90, 50] } }];\n\n  const queries: SceneDataQuery[] = [];\n  const newExpr = isRateQuery ? promql.rate({ expr }) : expr;\n\n  for (const { fn, params } of queryDefs) {\n    const entry = PROMQL_FUNCTIONS.get(fn)!;\n    const fnName = isRateQuery ? `${entry.name}(rate)` : entry.name;\n\n    for (const percentile of params!.percentiles) {\n      const parameter = percentile / 100;\n      const query = entry.fn({ expr: newExpr, parameter });\n\n      queries.push({\n        refId: `${metric}-p${percentile}-${fnName}`,\n        expr: query,\n        legendFormat: `${percentile}th Percentile`,\n        fromExploreMetrics: true,\n      });\n    }\n  }\n\n  return queries;\n}\n","import { PanelBuilders, SceneQueryRunner } from '@grafana/scenes';\nimport { SortOrder, TooltipDisplayMode, type LegendPlacement } from '@grafana/schema';\n\nimport { type HistogramType, type PanelConfig, type QueryConfig } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { getPerSecondRateUnit, getUnit } from 'shared/GmdVizPanel/units/getUnit';\nimport { trailDS } from 'shared/shared';\nimport { getColorByIndex } from 'shared/utils/utils';\n\nimport { getPercentilesQueryRunnerParams } from './getPercentilesQueryRunnerParams';\n\ntype PercentilesPanelOptions = {\n  metric: string;\n  histogramType: HistogramType;\n  panelConfig: PanelConfig;\n  queryConfig: QueryConfig;\n};\n\nexport function buildPercentilesPanel(options: PercentilesPanelOptions) {\n  const { metric, histogramType, panelConfig, queryConfig } = options;\n  const queryParams = getPercentilesQueryRunnerParams({ metric, histogramType, queryConfig });\n  const unit = queryParams.isRateQuery ? getPerSecondRateUnit(metric) : getUnit(metric);\n\n  const $data =\n    queryConfig.data ||\n    new SceneQueryRunner({\n      datasource: trailDS,\n      maxDataPoints: queryParams.maxDataPoints,\n      queries: queryParams.queries,\n    });\n\n  const startColorIndex = panelConfig.fixedColorIndex || 0;\n\n  return PanelBuilders.timeseries()\n    .setTitle(panelConfig.title)\n    .setDescription(panelConfig.description)\n    .setHeaderActions(panelConfig.headerActions({ metric, panelConfig }))\n    .setMenu(panelConfig.menu?.({ metric, panelConfig }))\n    .setShowMenuAlways(Boolean(panelConfig.menu))\n    .setData($data)\n    .setUnit(unit)\n    .setOption('legend', panelConfig.legend || { showLegend: true, placement: 'bottom' as LegendPlacement })\n    .setOption('tooltip', { mode: TooltipDisplayMode.Multi, sort: SortOrder.Descending })\n    .setCustomFieldConfig('fillOpacity', 9)\n    .setOverrides((b) => {\n      queryParams.queries.forEach((query, i) => {\n        b.matchFieldsByQuery(query.refId).overrideColor({\n          mode: 'fixed',\n          fixedColor: getColorByIndex(startColorIndex + i),\n        });\n      });\n    })\n    .setBehaviors(panelConfig.behaviors || [])\n    .build();\n}\n","import { type SceneDataQuery } from '@grafana/scenes';\nimport { promql } from 'tsqtsq';\n\nimport { buildQueryExpression } from 'shared/GmdVizPanel/buildQueryExpression';\nimport { PROMQL_FUNCTIONS } from 'shared/GmdVizPanel/config/promql-functions';\nimport { QUERY_RESOLUTION } from 'shared/GmdVizPanel/config/query-resolutions';\nimport { type QueryConfig, type QueryDefs } from 'shared/GmdVizPanel/GmdVizPanel';\n\nimport { isCounterMetric } from '../../matchers/isCounterMetric';\n\ntype StatQueryRunnerParams = {\n  isRateQuery: boolean;\n  maxDataPoints: number;\n  queries: SceneDataQuery[];\n};\n\ntype Options = {\n  metric: string;\n  queryConfig: QueryConfig;\n};\n\nexport function getStatQueryRunnerParams(options: Options): StatQueryRunnerParams {\n  const { metric, queryConfig } = options;\n  const isRateQuery = isCounterMetric(metric);\n  const expression = buildQueryExpression({\n    metric,\n    labelMatchers: queryConfig.labelMatchers,\n    addIgnoreUsageFilter: queryConfig.addIgnoreUsageFilter,\n    addExtremeValuesFiltering: queryConfig.addExtremeValuesFiltering,\n  });\n\n  const expr = isRateQuery ? promql.rate({ expr: expression, interval: '$__rate_interval' }) : expression;\n\n  return {\n    isRateQuery,\n    maxDataPoints: queryConfig.resolution === QUERY_RESOLUTION.HIGH ? 500 : 250,\n    queries: buildQueriesWithPresetFunctions({ metric, queryConfig, isRateQuery, expr }),\n  };\n}\n\n// here we support preset functions\nfunction buildQueriesWithPresetFunctions({\n  metric,\n  queryConfig,\n  isRateQuery,\n  expr,\n}: {\n  metric: string;\n  queryConfig: QueryConfig;\n  isRateQuery: boolean;\n  expr: string;\n}): SceneDataQuery[] {\n  const defaultPromqlFn = isRateQuery ? 'sum' : 'avg';\n  const queryDefs: QueryDefs = queryConfig.queries?.length ? queryConfig.queries : [{ fn: defaultPromqlFn }];\n  const queries: SceneDataQuery[] = [];\n\n  for (const { fn } of queryDefs) {\n    const entry = PROMQL_FUNCTIONS.get(fn)!;\n    const query = entry.fn({ expr });\n    const fnName = isRateQuery ? `${entry.name}(rate)` : entry.name;\n\n    queries.push({\n      refId: `${metric}-${fnName}`,\n      expr: query,\n      legendFormat: fnName,\n      fromExploreMetrics: true,\n    });\n  }\n\n  return queries;\n}\n","import { type ValueMapping } from '@grafana/data';\nimport { MappingType } from '@grafana/schema';\n\nexport const UP_DOWN_VALUE_MAPPINGS: ValueMapping[] = [\n  {\n    type: MappingType.ValueToText,\n    options: {\n      '0': {\n        color: 'red',\n        text: 'down',\n      },\n      '1': {\n        color: 'green',\n        text: 'up',\n      },\n    },\n  },\n] as const;\n","import { PanelBuilders, SceneQueryRunner, type VizPanel } from '@grafana/scenes';\n\nimport { type PanelConfig, type QueryConfig } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { trailDS } from 'shared/shared';\nimport { getColorByIndex } from 'shared/utils/utils';\n\nimport { getStatQueryRunnerParams } from './getStatQueryRunnerParams';\nimport { UP_DOWN_VALUE_MAPPINGS } from '../statushistory/value-mappings';\n\ntype StatushistoryPanelOptions = {\n  metric: string;\n  panelConfig: PanelConfig;\n  queryConfig: QueryConfig;\n};\n\nexport function buildStatPanel(options: StatushistoryPanelOptions): VizPanel {\n  const { metric, panelConfig, queryConfig } = options;\n  const queryParams = getStatQueryRunnerParams({ metric, queryConfig });\n  const unit = 'none';\n\n  const queryRunner =\n    queryConfig.data ||\n    new SceneQueryRunner({\n      datasource: trailDS,\n      maxDataPoints: queryParams.maxDataPoints,\n      queries: queryParams.queries,\n    });\n\n  return PanelBuilders.stat()\n    .setTitle(panelConfig.title)\n    .setDescription(panelConfig.description)\n    .setHeaderActions(panelConfig.headerActions({ metric, panelConfig }))\n    .setMenu(panelConfig.menu?.({ metric, panelConfig }))\n    .setShowMenuAlways(Boolean(panelConfig.menu))\n    .setData(queryRunner)\n    .setUnit(unit)\n    .setColor({ mode: 'fixed', fixedColor: getColorByIndex(panelConfig.fixedColorIndex || 0) })\n    .setMappings(UP_DOWN_VALUE_MAPPINGS) // current support is only for up/down values\n    .build();\n}\n","import { PanelBuilders, SceneQueryRunner, type VizPanel } from '@grafana/scenes';\nimport { VisibilityMode, type LegendPlacement } from '@grafana/schema';\n\nimport { type PanelConfig, type QueryConfig } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { trailDS } from 'shared/shared';\n\nimport { getStatushistoryQueryRunnerParams } from './getStatushistoryQueryRunnerParams';\nimport { UP_DOWN_VALUE_MAPPINGS } from './value-mappings';\n\ntype StatushistoryPanelOptions = {\n  metric: string;\n  panelConfig: PanelConfig;\n  queryConfig: QueryConfig;\n};\n\nexport function buildStatushistoryPanel(options: StatushistoryPanelOptions): VizPanel {\n  const { metric, panelConfig, queryConfig } = options;\n  const queryParams = getStatushistoryQueryRunnerParams({ metric, queryConfig });\n  const unit = 'none';\n\n  const queryRunner =\n    queryConfig.data ||\n    new SceneQueryRunner({\n      datasource: trailDS,\n      maxDataPoints: queryParams.maxDataPoints,\n      queries: queryParams.queries,\n    });\n\n  return (\n    PanelBuilders.statushistory()\n      .setTitle(panelConfig.title)\n      .setDescription(panelConfig.description)\n      .setHeaderActions(panelConfig.headerActions({ metric, panelConfig }))\n      .setMenu(panelConfig.menu?.({ metric, panelConfig }))\n      .setShowMenuAlways(Boolean(panelConfig.menu))\n      .setData(queryRunner)\n      .setUnit(unit)\n      // Use value mappings for both color and text display\n      .setColor({ mode: 'palette-classic' })\n      .setOption('showValue', VisibilityMode.Never)\n      .setOption('legend', panelConfig.legend || { showLegend: true, placement: 'bottom' as LegendPlacement })\n      .setOption('perPage', 0) // hide pagination at the bottom of the panel\n      .setMappings(UP_DOWN_VALUE_MAPPINGS) // current support is only for up/down values\n      .build()\n  );\n}\n","import { type SceneDataQuery } from '@grafana/scenes';\nimport { promql } from 'tsqtsq';\n\nimport { buildQueryExpression } from 'shared/GmdVizPanel/buildQueryExpression';\nimport { QUERY_RESOLUTION } from 'shared/GmdVizPanel/config/query-resolutions';\nimport { type QueryConfig } from 'shared/GmdVizPanel/GmdVizPanel';\n\ntype StatushistoryQueryRunnerParams = {\n  maxDataPoints: number;\n  queries: SceneDataQuery[];\n};\n\ntype Options = {\n  metric: string;\n  queryConfig: QueryConfig;\n};\n\nexport function getStatushistoryQueryRunnerParams(options: Options): StatushistoryQueryRunnerParams {\n  const { metric, queryConfig } = options;\n  const expression = buildQueryExpression({\n    metric,\n    labelMatchers: queryConfig.labelMatchers,\n    addIgnoreUsageFilter: queryConfig.addIgnoreUsageFilter,\n    addExtremeValuesFiltering: queryConfig.addExtremeValuesFiltering,\n  });\n\n  const query = promql.min({ expr: expression });\n\n  return {\n    maxDataPoints: queryConfig.resolution === QUERY_RESOLUTION.HIGH ? 200 : 100,\n    queries: [\n      {\n        refId: `${metric}-status`,\n        expr: query,\n        legendFormat: 'status',\n        fromExploreMetrics: true,\n      },\n    ],\n  };\n}\n","import { type SceneDataQuery } from '@grafana/scenes';\nimport { promql } from 'tsqtsq';\n\nimport { buildQueryExpression } from 'shared/GmdVizPanel/buildQueryExpression';\nimport { PROMQL_FUNCTIONS } from 'shared/GmdVizPanel/config/promql-functions';\nimport { QUERY_RESOLUTION } from 'shared/GmdVizPanel/config/query-resolutions';\nimport { type QueryConfig, type QueryDefs } from 'shared/GmdVizPanel/GmdVizPanel';\n\nimport { isCounterMetric } from '../../matchers/isCounterMetric';\n\ntype TimeseriesQueryRunnerParams = {\n  isRateQuery: boolean;\n  maxDataPoints: number;\n  queries: SceneDataQuery[];\n};\n\ntype Options = {\n  metric: string;\n  queryConfig: QueryConfig;\n};\n\nexport function getTimeseriesQueryRunnerParams(options: Options): TimeseriesQueryRunnerParams {\n  const { metric, queryConfig } = options;\n  const isRateQuery = isCounterMetric(metric);\n  const expression = buildQueryExpression({\n    metric,\n    labelMatchers: queryConfig.labelMatchers,\n    addIgnoreUsageFilter: queryConfig.addIgnoreUsageFilter,\n    addExtremeValuesFiltering: queryConfig.addExtremeValuesFiltering,\n  });\n\n  const expr = isRateQuery ? promql.rate({ expr: expression, interval: '$__rate_interval' }) : expression;\n\n  return {\n    isRateQuery,\n    maxDataPoints: queryConfig.resolution === QUERY_RESOLUTION.HIGH ? 500 : 250,\n    queries: queryConfig.groupBy\n      ? buildGroupByQueries({ metric, queryConfig, isRateQuery, expr })\n      : buildQueriesWithPresetFunctions({ metric, queryConfig, isRateQuery, expr }),\n  };\n}\n\n// if grouped by, we don't provide support for preset functions\nfunction buildGroupByQueries({\n  metric,\n  queryConfig,\n  isRateQuery,\n  expr,\n}: {\n  metric: string;\n  queryConfig: QueryConfig;\n  isRateQuery: boolean;\n  expr: string;\n}): SceneDataQuery[] {\n  return [\n    {\n      refId: `${metric}-by-${queryConfig.groupBy}`,\n      expr: isRateQuery\n        ? promql.sum({ expr, by: [queryConfig.groupBy!] })\n        : promql.avg({ expr, by: [queryConfig.groupBy!] }),\n      legendFormat: `{{${queryConfig.groupBy}}}`,\n      fromExploreMetrics: true,\n    },\n  ];\n}\n\n// here we support preset functions\nfunction buildQueriesWithPresetFunctions({\n  metric,\n  queryConfig,\n  isRateQuery,\n  expr,\n}: {\n  metric: string;\n  queryConfig: QueryConfig;\n  isRateQuery: boolean;\n  expr: string;\n}): SceneDataQuery[] {\n  const defaultPromqlFn = isRateQuery ? 'sum' : 'avg';\n  const queryDefs: QueryDefs = queryConfig.queries?.length ? queryConfig.queries : [{ fn: defaultPromqlFn }];\n  const queries: SceneDataQuery[] = [];\n\n  for (const { fn } of queryDefs) {\n    const entry = PROMQL_FUNCTIONS.get(fn)!;\n    const query = entry.fn({ expr });\n    const fnName = isRateQuery ? `${entry.name}(rate)` : entry.name;\n\n    queries.push({\n      refId: `${metric}-${fnName}`,\n      expr: query,\n      legendFormat: fnName,\n      fromExploreMetrics: true,\n    });\n  }\n\n  return queries;\n}\n","import { type DataFrame, type Field } from '@grafana/data';\n\ninterface FieldWithEntitiesNaN extends Field<any> {\n  entities: {\n    NaN: number[];\n  };\n}\n\n/**\n * Checks if all data in the series contains only NaN values,\n * short-circuiting if any frame contains non-NaN values.\n */\nexport function isAllDataNaN(series: DataFrame[]): boolean {\n  return series.every(isDataFrameAllNaN);\n}\n\n/**\n * Checks if all the values in the DataFrame are NaN\n */\nfunction isDataFrameAllNaN(frame: DataFrame): boolean {\n  const valuesField = frame.fields.find((field) => field.name === 'Value');\n\n  if (!valuesField || !isFieldWithEntitiesNaN(valuesField)) {\n    return false;\n  }\n\n  return valuesField.entities.NaN.length === frame.length;\n}\n\nfunction isFieldWithEntitiesNaN(field: Field): field is FieldWithEntitiesNaN {\n  return 'entities' in field && Array.isArray((field as FieldWithEntitiesNaN).entities?.NaN);\n}\n","import { css } from '@emotion/css';\nimport { LoadingState, type GrafanaTheme2 } from '@grafana/data';\nimport { sceneGraph, SceneQueryRunner, type CancelActivationHandler, type VizPanel } from '@grafana/scenes';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { isCounterMetric } from 'shared/GmdVizPanel/matchers/isCounterMetric';\nimport { getTimeseriesQueryRunnerParams } from 'shared/GmdVizPanel/types/timeseries/getTimeseriesQueryRunnerParams';\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\n\nimport { isAllDataNaN } from './isAllDataNaN';\n\n/**\n * A stateless function that detects when all data in a query result is NaN\n * and attempts to re-run the query with extreme value filtering.\n *\n * This addresses the issue where Prometheus metrics with extremely small values\n * (e.g., 9e-129) cause arithmetic operations during averaging to underflow\n * or become undefined, resulting in NaN for queries like `avg(some_metric_with_extreme_values)`.\n *\n * @remarks\n * Implementing this as a behavior allows us to apply the extreme values filtering\n * to only the queries that are affected by the extreme values, rather than all queries in the scene.\n * That way, we can keep queries simpler by default, and only apply the extreme values filtering\n * when it's necessary.\n */\nexport function extremeValueFilterBehavior(panel: VizPanel): CancelActivationHandler | void {\n  // works only for timeseries panels...\n  if (panel.state.pluginId !== 'timeseries') {\n    return;\n  }\n\n  // ...with a query runner attached...\n  const [queryRunner] = sceneGraph.findDescendents(panel, SceneQueryRunner);\n  if (!queryRunner) {\n    return;\n  }\n\n  // ...that has some queries...\n  const { queries } = queryRunner.state;\n  if (!queries?.length) {\n    return;\n  }\n\n  const { metric, queryConfig } = sceneGraph.getAncestor(panel, GmdVizPanel).state;\n\n  // ... and only for non-counter metrics, because counter metrics translate to rate queries (see getTimeseriesQueryRunnerParams.ts)\n  // and this the behavior does not support it\n  if (isCounterMetric(metric)) {\n    return;\n  }\n\n  // When the query runner's state changes, check if the data is all NaN.\n  // If it is, remove the extreme values from the query.\n  const queryRunnerSub = queryRunner.subscribeToState((newState, prevState) => {\n    // wait to receive series\n    if (\n      newState.data?.state !== LoadingState.Done ||\n      !newState.data.series?.length ||\n      newState.data.series === prevState.data?.series\n    ) {\n      return;\n    }\n\n    // discard the behaviour if non-timeseries data is received\n    const dataFrameType = newState.data.series[0].meta?.type;\n    if (dataFrameType && !dataFrameType.startsWith('timeseries')) {\n      return;\n    }\n\n    // act only if all data is NaN\n    if (!isAllDataNaN(newState.data.series)) {\n      return;\n    }\n\n    // rebuild query with extreme values filtering\n    const queryParams = getTimeseriesQueryRunnerParams({\n      metric,\n      queryConfig: { ...queryConfig, addExtremeValuesFiltering: true },\n    });\n\n    // update and run the new queries\n    queryRunner.setState({ queries: queryParams.queries });\n    queryRunner.runQueries();\n\n    panel.setState({\n      titleItems: (\n        <VizPanelExtremeValuesMessage\n          level=\"info\"\n          message=\"Panel data was re-fetched with a more complex query to handle extremely small values in the series\"\n        />\n      ),\n    });\n\n    reportExploreMetrics('extreme_value_filter_behavior_triggered', {\n      expression: sceneGraph.interpolate(queryRunner, queryRunner.state.queries[0].expr),\n    });\n  });\n\n  return () => {\n    queryRunnerSub.unsubscribe();\n  };\n}\n\ninterface VizPanelExtremeValuesMessageProps {\n  message: string;\n  level: 'warning' | 'info';\n}\n\nfunction VizPanelExtremeValuesMessage({ message, level }: Readonly<VizPanelExtremeValuesMessageProps>) {\n  const styles = useStyles2(getStyles, level);\n\n  return (\n    <div className={styles.extremeValuedisclaimer}>\n      <Tooltip content={message}>\n        <span className={styles.warningMessage}>\n          <Icon name={level === 'warning' ? 'exclamation-triangle' : 'info-circle'} aria-hidden=\"true\" />\n        </span>\n      </Tooltip>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, level: 'warning' | 'info') => ({\n  extremeValuedisclaimer: css({\n    label: 'extreme-value-disclaimer',\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(1),\n  }),\n  warningMessage: css({\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(0.5),\n    color: level === 'warning' ? theme.colors.warning.main : theme.colors.info.main,\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { type DataFrame } from '@grafana/data';\nimport { map, type Observable } from 'rxjs';\n\nexport const addRefId = () => (source: Observable<DataFrame[]>) =>\n  source.pipe(\n    map((data: DataFrame[]) =>\n      data?.map((d, i) => {\n        d.refId = `${d.refId}-${i}`;\n        return d;\n      })\n    )\n  );\n","import { type DataFrame } from '@grafana/data';\nimport { map, type Observable } from 'rxjs';\n\nexport const addUnspecifiedLabel = (label: string) => () => (source: Observable<DataFrame[]>) =>\n  source.pipe(\n    map((data: DataFrame[]) => {\n      // eslint-disable-next-line sonarjs/no-nested-functions\n      return data?.map((d) => {\n        if (!d?.fields[1]) {\n          return d;\n        }\n\n        if (!d.fields[1].labels?.[label]) {\n          d.fields[1].labels = { ...d.fields[1].labels, [label]: `<unspecified ${label}>` };\n        }\n\n        return d;\n      });\n    })\n  );\n","import { type DataFrame } from '@grafana/data';\nimport { map, type Observable } from 'rxjs';\n\nconst SERIES_COUNT_STATS_NAME = 'seriesCount';\n\nexport const sliceSeries = (start: number, end: number) => () => (source: Observable<DataFrame[]>) =>\n  source.pipe(\n    map((data: DataFrame[]) =>\n      // eslint-disable-next-line sonarjs/no-nested-functions\n      data?.slice(start, end).map((d) => {\n        d.meta = { ...d.meta };\n        d.meta.stats ||= [];\n        d.meta.stats.unshift({ displayName: SERIES_COUNT_STATS_NAME, value: data.length });\n        return d;\n      })\n    )\n  );\n","import { PanelBuilders, SceneDataTransformer, SceneQueryRunner, type VizPanel } from '@grafana/scenes';\nimport { SortOrder, TooltipDisplayMode, type LegendPlacement } from '@grafana/schema';\n\nimport { extremeValueFilterBehavior } from 'shared/GmdVizPanel/behaviors/extremeValueFilterBehavior/extremeValueFilterBehavior';\nimport { type PanelConfig, type QueryConfig } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { trailDS } from 'shared/shared';\nimport { getColorByIndex } from 'shared/utils/utils';\n\nimport { getTimeseriesQueryRunnerParams } from './getTimeseriesQueryRunnerParams';\nimport { addRefId } from './transformations/addRefId';\nimport { addUnspecifiedLabel } from './transformations/addUnspecifiedLabel';\nimport { sliceSeries } from './transformations/sliceSeries';\nimport { getPerSecondRateUnit, getUnit } from '../../units/getUnit';\n\ntype TimeseriesPanelOptions = {\n  metric: string;\n  panelConfig: PanelConfig;\n  queryConfig: QueryConfig;\n};\n\nexport function buildTimeseriesPanel(options: TimeseriesPanelOptions): VizPanel {\n  if (options.queryConfig.groupBy) {\n    return buildGroupByPanel(options as Required<TimeseriesPanelOptions>);\n  }\n\n  const { metric, panelConfig, queryConfig } = options;\n  const queryParams = getTimeseriesQueryRunnerParams({ metric, queryConfig });\n  const unit = queryParams.isRateQuery ? getPerSecondRateUnit(metric) : getUnit(metric);\n\n  const $data =\n    queryConfig.data ||\n    new SceneQueryRunner({\n      datasource: trailDS,\n      maxDataPoints: queryParams.maxDataPoints,\n      queries: queryParams.queries,\n    });\n\n  const vizPanelBuilder = PanelBuilders.timeseries()\n    .setTitle(panelConfig.title)\n    .setDescription(panelConfig.description)\n    .setHeaderActions(panelConfig.headerActions({ metric, panelConfig }))\n    .setMenu(panelConfig.menu?.({ metric, panelConfig }))\n    .setShowMenuAlways(Boolean(panelConfig.menu))\n    .setData($data)\n    .setUnit(unit)\n    .setOption('legend', panelConfig.legend || { showLegend: true, placement: 'bottom' as LegendPlacement })\n    .setCustomFieldConfig('fillOpacity', 9)\n    .setBehaviors([extremeValueFilterBehavior, ...(panelConfig.behaviors || [])]);\n\n  if (queryParams.queries.length > 1) {\n    const startColorIndex = panelConfig.fixedColorIndex || 0;\n\n    vizPanelBuilder.setOverrides((b) => {\n      queryParams.queries.forEach((query, i) => {\n        b.matchFieldsByQuery(query.refId).overrideColor({\n          mode: 'fixed',\n          fixedColor: getColorByIndex(startColorIndex + i),\n        });\n      });\n    });\n  } else {\n    vizPanelBuilder.setColor(\n      panelConfig.fixedColorIndex\n        ? { mode: 'fixed', fixedColor: getColorByIndex(panelConfig.fixedColorIndex) }\n        : undefined\n    );\n  }\n\n  return vizPanelBuilder.build();\n}\n\nexport const MAX_SERIES_TO_RENDER_WHEN_GROUPED_BY = 20;\n\nfunction buildGroupByPanel(options: Required<TimeseriesPanelOptions>): VizPanel {\n  const { metric, panelConfig, queryConfig } = options;\n  const queryParams = getTimeseriesQueryRunnerParams({ metric, queryConfig });\n  const unit = queryParams.isRateQuery ? getPerSecondRateUnit(metric) : getUnit(metric);\n\n  const $data = new SceneDataTransformer({\n    $data: new SceneQueryRunner({\n      datasource: trailDS,\n      maxDataPoints: queryParams.maxDataPoints,\n      queries: queryParams.queries,\n    }),\n    transformations: [\n      sliceSeries(0, MAX_SERIES_TO_RENDER_WHEN_GROUPED_BY),\n      addUnspecifiedLabel(queryConfig.groupBy!),\n      addRefId, // for overriding colors below\n    ],\n  });\n\n  const { refId } = queryParams.queries[0];\n  const startColorIndex = panelConfig.fixedColorIndex || 0;\n\n  const vizPanel = PanelBuilders.timeseries()\n    .setTitle(panelConfig.title)\n    .setDescription(panelConfig.description)\n    .setHeaderActions(panelConfig.headerActions({ metric, panelConfig }))\n    .setMenu(panelConfig.menu?.({ metric, panelConfig }))\n    .setShowMenuAlways(Boolean(panelConfig.menu))\n    .setData($data)\n    .setUnit(unit)\n    .setOption('legend', panelConfig.legend || { showLegend: true, placement: 'right' as LegendPlacement })\n    .setOption('tooltip', { mode: TooltipDisplayMode.Multi, sort: SortOrder.Descending })\n    .setOverrides((b) => {\n      for (let i = 0; i < MAX_SERIES_TO_RENDER_WHEN_GROUPED_BY; i++) {\n        b.matchFieldsByQuery(`${refId}-${i}`).overrideColor({\n          mode: 'fixed',\n          fixedColor: getColorByIndex(startColorIndex + i),\n        });\n      }\n    })\n    .setBehaviors(panelConfig.behaviors)\n    .build();\n\n  return vizPanel;\n}\n","import { css } from '@emotion/css';\nimport { DataFrameType, LoadingState, type GrafanaTheme2, type ValueMapping } from '@grafana/data';\nimport {\n  SceneObjectBase,\n  type SceneComponentProps,\n  type SceneDataProvider,\n  type SceneObjectState,\n  type VizPanel,\n  type VizPanelState,\n} from '@grafana/scenes';\nimport { useStyles2, type VizLegendOptions } from '@grafana/ui';\nimport { isEqual } from 'lodash';\nimport React from 'react';\n\nimport { getTrailFor } from 'shared/utils/utils';\n\nimport { type LabelMatcher } from './buildQueryExpression';\nimport { EventPanelTypeChanged } from './components/EventPanelTypeChanged';\nimport { SelectAction } from './components/SelectAction';\nimport { getPreferredConfigForMetric } from './config/getPreferredConfigForMetric';\nimport { PANEL_HEIGHT } from './config/panel-heights';\nimport { type PrometheusFunction } from './config/promql-functions';\nimport { QUERY_RESOLUTION } from './config/query-resolutions';\nimport { getPanelTypeForMetricSync } from './matchers/getPanelTypeForMetric';\nimport { isClassicHistogramMetric } from './matchers/isClassicHistogramMetric';\nimport { type PanelType } from './types/available-panel-types';\nimport { buildHeatmapPanel } from './types/heatmap/buildHeatmapPanel';\nimport { buildPercentilesPanel } from './types/percentiles/buildPercentilesPanel';\nimport { buildStatPanel } from './types/stat/buildStatPanel';\nimport { buildStatushistoryPanel } from './types/statushistory/buildStatushistoryPanel';\nimport { buildTimeseriesPanel } from './types/timeseries/buildTimeseriesPanel';\n\n/* Panel config */\n\ntype HeaderActionAndMenuArgs = { metric: string; panelConfig: PanelConfig };\n\nexport type PanelConfig = {\n  type: PanelType;\n  title: string;\n  height: PANEL_HEIGHT;\n  headerActions: (headerActionsArgs: HeaderActionAndMenuArgs) => VizPanelState['headerActions'];\n  fixedColorIndex?: number;\n  description?: string;\n  menu?: (menuArgs: HeaderActionAndMenuArgs) => VizPanelState['menu'];\n  legend?: Partial<VizLegendOptions>;\n  mappings?: ValueMapping[];\n  behaviors?: VizPanelState['$behaviors'];\n};\n\nexport type PanelOptions = {\n  type?: PanelConfig['type'];\n  height?: PanelConfig['height'];\n  fixedColorIndex?: PanelConfig['fixedColorIndex'];\n  title?: PanelConfig['title'];\n  description?: PanelConfig['description'];\n  headerActions?: PanelConfig['headerActions'];\n  menu?: PanelConfig['menu'];\n  legend?: PanelConfig['legend'];\n  mappings?: PanelConfig['mappings'];\n  behaviors?: PanelConfig['behaviors'];\n};\n\n/* Query config */\n\nexport type QueryDefs = Array<{\n  fn: PrometheusFunction;\n  params?: Record<string, any>;\n}>;\n\nexport type QueryConfig = {\n  resolution: QUERY_RESOLUTION;\n  labelMatchers: LabelMatcher[];\n  addIgnoreUsageFilter: boolean;\n  addExtremeValuesFiltering?: boolean;\n  groupBy?: string;\n  queries?: QueryDefs;\n  data?: SceneDataProvider;\n};\n\nexport type QueryOptions = {\n  resolution?: QueryConfig['resolution'];\n  labelMatchers?: QueryConfig['labelMatchers'];\n  groupBy?: string;\n  queries?: QueryDefs;\n  data?: QueryConfig['data'];\n};\n\n/* GmdVizPanelState */\n\nexport type HistogramType = 'native' | 'classic' | 'none';\n\ninterface GmdVizPanelState extends SceneObjectState {\n  metric: string;\n  histogramType: HistogramType;\n  panelConfig: PanelConfig;\n  queryConfig: QueryConfig;\n  body?: VizPanel;\n}\n\nexport class GmdVizPanel extends SceneObjectBase<GmdVizPanelState> {\n  constructor({\n    key,\n    metric,\n    panelOptions,\n    queryOptions,\n    discardUserPrefs,\n  }: {\n    key?: string;\n    metric: GmdVizPanelState['metric'];\n    panelOptions?: PanelOptions;\n    queryOptions?: QueryOptions;\n    discardUserPrefs?: boolean;\n  }) {\n    const histogramType = isClassicHistogramMetric(metric) ? 'classic' : 'none';\n    const prefConfig = discardUserPrefs ? undefined : getPreferredConfigForMetric(metric);\n\n    super({\n      key,\n      metric,\n      histogramType,\n      panelConfig: {\n        // we want a panel type to be able to render the panel as soon as possible after activation\n        // so we don't determine if the metric is a native histogram here because it's an async process that will be done in onActivate()\n        type: panelOptions?.type || getPanelTypeForMetricSync(metric, histogramType),\n        title: metric,\n        height: PANEL_HEIGHT.M,\n        headerActions: ({ metric }) => [new SelectAction({ metric })],\n        ...panelOptions,\n        ...prefConfig?.panelOptions,\n      },\n      queryConfig: {\n        resolution: QUERY_RESOLUTION.MEDIUM,\n        labelMatchers: [],\n        addIgnoreUsageFilter: true,\n        ...queryOptions,\n        ...prefConfig?.queryOptions,\n      },\n      body: undefined,\n    });\n\n    this.addActivationHandler(() => {\n      this.onActivate(Boolean(panelOptions?.type || prefConfig?.panelOptions.type));\n    });\n  }\n\n  private async onActivate(discardPanelTypeUpdates: boolean) {\n    const { metric, panelConfig } = this.state;\n\n    this.updateBody();\n\n    this.subscribeToStateChanges(discardPanelTypeUpdates);\n    this.subscribeToEvents();\n\n    const isNativeHistogram = await getTrailFor(this).isNativeHistogram(metric);\n    if (isNativeHistogram) {\n      this.setState({\n        histogramType: 'native',\n        panelConfig: discardPanelTypeUpdates\n          ? panelConfig\n          : { description: 'Native Histogram ', ...panelConfig, type: 'heatmap' },\n      });\n    }\n  }\n\n  private subscribeToStateChanges(discardPanelTypeUpdates: boolean) {\n    const { histogramType, body, panelConfig } = this.state;\n\n    // in addition to using the metadata fetched in src/helpers/MetricDatasourceHelper.ts to determine if the metric is a native histogram or not,\n    // we give another chance to display it properly by looking into the data frame type received\n    if (!discardPanelTypeUpdates && histogramType === 'none') {\n      const bodySub = (body?.state.$data as SceneDataProvider)?.subscribeToState((newState) => {\n        if (newState.data?.state !== LoadingState.Done) {\n          return;\n        }\n\n        const dataFrameType = newState.data.series[0]?.meta?.type;\n        if (!dataFrameType) {\n          return;\n        }\n\n        if (dataFrameType === DataFrameType.HeatmapCells) {\n          this.setState({\n            histogramType: 'native',\n            panelConfig: { description: 'Native Histogram ', ...panelConfig, type: 'heatmap' },\n          });\n        }\n\n        bodySub.unsubscribe();\n      });\n\n      this._subs.add(bodySub);\n    }\n\n    this.subscribeToState((newState, prevState) => {\n      if (\n        newState.histogramType !== prevState.histogramType ||\n        !isEqual(newState.panelConfig, prevState.panelConfig) ||\n        !isEqual(newState.queryConfig, prevState.queryConfig)\n      ) {\n        this.updateBody();\n      }\n    });\n  }\n\n  private subscribeToEvents() {\n    this.subscribeToEvent(EventPanelTypeChanged, (event) => {\n      this.setState({\n        panelConfig: {\n          ...this.state.panelConfig,\n          type: event.payload.panelType,\n        },\n      });\n    });\n  }\n\n  private updateBody() {\n    const { metric, panelConfig, queryConfig, histogramType } = this.state;\n\n    switch (panelConfig.type) {\n      case 'timeseries':\n        this.setState({\n          body: buildTimeseriesPanel({ metric, panelConfig, queryConfig }),\n        });\n        return;\n\n      case 'heatmap':\n        this.setState({\n          body: buildHeatmapPanel({ metric, histogramType, panelConfig, queryConfig }),\n        });\n        return;\n\n      case 'percentiles':\n        this.setState({\n          body: buildPercentilesPanel({\n            metric,\n            histogramType,\n            panelConfig,\n            queryConfig,\n          }),\n        });\n        return;\n\n      case 'statushistory':\n        this.setState({\n          body: buildStatushistoryPanel({ metric, panelConfig, queryConfig }),\n        });\n        return;\n\n      case 'stat':\n        this.setState({\n          body: buildStatPanel({ metric, panelConfig, queryConfig }),\n        });\n        return;\n\n      default:\n        throw new TypeError(`Unsupported panel type \"${panelConfig.type}\"!`);\n    }\n  }\n\n  public update(panelOptions: PanelOptions, queryOptions: QueryOptions) {\n    const { panelConfig, queryConfig } = this.state;\n\n    this.setState({\n      panelConfig: {\n        ...panelConfig,\n        ...panelOptions,\n      },\n      queryConfig: {\n        ...queryConfig,\n        ...queryOptions,\n      },\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<GmdVizPanel>) => {\n    const { body, panelConfig } = model.useState();\n    const styles = useStyles2(getStyles, panelConfig.height);\n\n    return (\n      <div className={styles.container} data-testid=\"gmd-vizpanel\">\n        {body && <body.Component model={body} />}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2, height: PANEL_HEIGHT) {\n  return {\n    container: css`\n      width: 100%;\n      height: ${height}px;\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  behaviors,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneReactObject,\n  type MultiValueVariable,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { DashboardCursorSync } from '@grafana/schema';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { InlineBanner } from 'App/InlineBanner';\nimport { SceneByVariableRepeater } from 'MetricsReducer/components/SceneByVariableRepeater';\nimport { ShowMoreButton } from 'MetricsReducer/components/ShowMoreButton';\nimport { LayoutSwitcher, LayoutType, type LayoutSwitcherState } from 'MetricsReducer/list-controls/LayoutSwitcher';\nimport { ConfigurePanelAction } from 'shared/GmdVizPanel/components/ConfigurePanelAction';\nimport { SelectAction } from 'shared/GmdVizPanel/components/SelectAction';\nimport { GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\n\nimport { VIZ_PANEL_HEIGHT, WithUsageDataPreviewPanel } from './WithUsageDataPreviewPanel';\n\nexport const GRID_TEMPLATE_COLUMNS = 'repeat(auto-fit, minmax(400px, 1fr))';\nexport const GRID_TEMPLATE_ROWS = '1fr';\n\ninterface MetricsListState extends SceneObjectState {\n  variableName: string;\n  body: SceneByVariableRepeater;\n}\n\nexport class MetricsList extends SceneObjectBase<MetricsListState> {\n  constructor({ variableName }: { variableName: MetricsListState['variableName'] }) {\n    super({\n      key: 'metrics-list',\n      variableName,\n      body: new SceneByVariableRepeater({\n        variableName,\n        initialPageSize: 120,\n        pageSizeIncrement: 9,\n        body: new SceneCSSGridLayout({\n          children: [],\n          isLazy: true,\n          templateColumns: GRID_TEMPLATE_COLUMNS,\n          autoRows: VIZ_PANEL_HEIGHT,\n          $behaviors: [\n            new behaviors.CursorSync({\n              key: 'metricCrosshairSync',\n              sync: DashboardCursorSync.Crosshair,\n            }),\n          ],\n        }),\n        getLayoutLoading: () =>\n          new SceneReactObject({\n            reactNode: <Spinner inline />,\n          }),\n        getLayoutEmpty: () =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner title=\"\" severity=\"info\">\n                No metrics found for the current filters and time range.\n              </InlineBanner>\n            ),\n          }),\n        getLayoutError: (error: Error) =>\n          new SceneReactObject({\n            reactNode: <InlineBanner severity=\"error\" title=\"Error while loading metrics!\" error={error} />,\n          }),\n        getLayoutChild: (option, colorIndex) => {\n          const metric = option.value as string;\n\n          return new SceneCSSGridItem({\n            body: new WithUsageDataPreviewPanel({\n              metric: option.value as string,\n              vizPanelInGridItem: new GmdVizPanel({\n                metric,\n                panelOptions: {\n                  fixedColorIndex: colorIndex,\n                  headerActions: () => [new ConfigurePanelAction({ metric }), new SelectAction({ metric })],\n                },\n              }),\n            }),\n          });\n        },\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.subscribeToLayoutChange();\n  }\n\n  private subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', LayoutSwitcher);\n    const body = this.state.body.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: LayoutSwitcherState, prevState?: LayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: newState.layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS,\n        });\n      }\n    };\n\n    onChangeState(layoutSwitcher.state); // ensure layout when landing on the page\n\n    this._subs.add(layoutSwitcher.subscribeToState(onChangeState));\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<MetricsList>) => {\n    const { variableName, body } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    const variable = sceneGraph.lookupVariable(variableName, model) as MultiValueVariable;\n    const { loading, error } = variable.useState();\n\n    const batchSizes = body.useSizes();\n    const shouldDisplayShowMoreButton =\n      !loading && !error && batchSizes.total > 0 && batchSizes.current < batchSizes.total;\n\n    const onClickShowMore = () => {\n      body.increaseBatchSize();\n    };\n\n    return (\n      <div data-testid=\"metrics-list\">\n        <div className={styles.container}>\n          <body.Component model={body} />\n        </div>\n        {shouldDisplayShowMoreButton && (\n          <div className={styles.footer}>\n            <ShowMoreButton label=\"metric\" batchSizes={batchSizes} onClick={onClickShowMore} />\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({}),\n    footer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: theme.spacing(4),\n\n      '& button': {\n        height: '40px',\n        borderRadius: '8px',\n      },\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { DashboardCursorSync, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  behaviors,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneReactObject,\n  SceneVariableSet,\n  type AdHocFiltersVariable,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Button, CollapsableSection, Spinner, useStyles2 } from '@grafana/ui';\nimport React, { useState } from 'react';\n\nimport { SceneByVariableRepeater } from 'MetricsReducer/components/SceneByVariableRepeater';\nimport { ShowMoreButton } from 'MetricsReducer/components/ShowMoreButton';\nimport { LayoutSwitcher, LayoutType, type LayoutSwitcherState } from 'MetricsReducer/list-controls/LayoutSwitcher';\nimport { MetricsVariable } from 'MetricsReducer/metrics-variables/MetricsVariable';\nimport {\n  VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW,\n  WithUsageDataPreviewPanel,\n} from 'MetricsReducer/MetricsList/WithUsageDataPreviewPanel';\nimport { GroupsIcon } from 'MetricsReducer/SideBar/custom-icons/GroupsIcon';\nimport { ConfigurePanelAction } from 'shared/GmdVizPanel/components/ConfigurePanelAction';\nimport { SelectAction } from 'shared/GmdVizPanel/components/SelectAction';\nimport { GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { VAR_FILTERS } from 'shared/shared';\n\nimport { GRID_TEMPLATE_COLUMNS, GRID_TEMPLATE_ROWS } from '..//MetricsList/MetricsList';\nimport { InlineBanner } from '../../App/InlineBanner';\nimport { NULL_GROUP_BY_VALUE } from '../labels/LabelsDataSource';\nimport { VAR_WINGMAN_GROUP_BY, type LabelsVariable } from '../labels/LabelsVariable';\n\ninterface MetricsGroupByRowState extends SceneObjectState {\n  index: number;\n  labelName: string;\n  labelValue: string;\n  labelCardinality: number;\n  $variables: SceneVariableSet;\n  body: SceneByVariableRepeater;\n}\n\nexport class MetricsGroupByRow extends SceneObjectBase<MetricsGroupByRowState> {\n  public constructor({\n    index,\n    labelName,\n    labelValue,\n    labelCardinality,\n  }: {\n    index: MetricsGroupByRowState['index'];\n    labelName: MetricsGroupByRowState['labelName'];\n    labelValue: MetricsGroupByRowState['labelValue'];\n    labelCardinality: MetricsGroupByRowState['labelCardinality'];\n  }) {\n    const variableName = `var-metrics-${labelName}-${labelValue}`;\n\n    super({\n      index,\n      labelName,\n      labelValue,\n      labelCardinality,\n      key: `${labelName}-${labelValue}`,\n      $variables: new SceneVariableSet({\n        variables: [\n          new MetricsVariable({\n            key: variableName,\n            name: variableName,\n            labelMatcher: { key: labelName, operator: '=', value: labelValue },\n            addLifeCycleEvents: true,\n          }),\n        ],\n      }),\n      body: new SceneByVariableRepeater({\n        variableName: variableName,\n        initialPageSize: 3,\n        body: new SceneCSSGridLayout({\n          children: [],\n          isLazy: true,\n          templateColumns: GRID_TEMPLATE_COLUMNS,\n          autoRows: VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW,\n          $behaviors: [\n            new behaviors.CursorSync({\n              key: 'metricCrosshairSync',\n              sync: DashboardCursorSync.Crosshair,\n            }),\n          ],\n        }),\n        getLayoutLoading: () =>\n          new SceneReactObject({\n            reactNode: <Spinner inline />,\n          }),\n        getLayoutEmpty: () =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner title=\"\" severity=\"info\">\n                No metrics found for the current filters and time range.\n              </InlineBanner>\n            ),\n          }),\n        getLayoutError: (error: Error) =>\n          new SceneReactObject({\n            reactNode: <InlineBanner severity=\"error\" title=\"Error while loading metrics!\" error={error} />,\n          }),\n        getLayoutChild: (option, colorIndex) => {\n          const metric = option.value as string;\n\n          return new SceneCSSGridItem({\n            body: new WithUsageDataPreviewPanel({\n              metric,\n              vizPanelInGridItem: new GmdVizPanel({\n                metric,\n                panelOptions: {\n                  fixedColorIndex: colorIndex,\n                  headerActions: () => [new SelectAction({ metric }), new ConfigurePanelAction({ metric })],\n                },\n                queryOptions: {\n                  labelMatchers: [{ key: labelName, operator: '=', value: labelValue }],\n                },\n              }),\n            }),\n          });\n        },\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.subscribeToLayoutChange();\n  }\n\n  private subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', LayoutSwitcher);\n    const body = this.state.body.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: LayoutSwitcherState, prevState?: LayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: newState.layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS,\n        });\n      }\n    };\n\n    onChangeState(layoutSwitcher.state); // ensure layout when landing on the page\n\n    this._subs.add(layoutSwitcher.subscribeToState(onChangeState));\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<MetricsGroupByRow>) => {\n    const [isCollapsed, setIsCollapsed] = useState(false);\n    const styles = useStyles2(getStyles);\n\n    const { index, labelName, labelValue, labelCardinality, $variables, body } = model.useState();\n\n    const variable = $variables.state.variables[0] as MetricsVariable;\n    const { loading, error } = variable.useState();\n\n    const batchSizes = body.useSizes();\n    const shouldDisplayShowMoreButton =\n      !loading && !error && batchSizes.total > 0 && batchSizes.current < batchSizes.total;\n\n    const onClickShowMore = () => {\n      body.increaseBatchSize();\n    };\n\n    const onClickSelect = () => {\n      const adHocFiltersVariable = sceneGraph.lookupVariable(VAR_FILTERS, model) as AdHocFiltersVariable;\n\n      adHocFiltersVariable.setState({\n        // TOOD: keep unique filters\n        filters: [...adHocFiltersVariable.state.filters, { key: labelName, operator: '=', value: labelValue }],\n      });\n\n      (sceneGraph.lookupVariable(VAR_WINGMAN_GROUP_BY, model) as LabelsVariable)?.changeValueTo(NULL_GROUP_BY_VALUE);\n    };\n\n    return (\n      <div className={styles.container} data-testid={`${labelName}-${labelValue}-metrics-group`}>\n        <div className={styles.containerHeader}>\n          <div className={styles.headerButtons}>\n            <Button\n              className={styles.selectButton}\n              variant=\"secondary\"\n              onClick={onClickSelect}\n              tooltip={`See metrics with ${labelName}=${labelValue}`}\n              tooltipPlacement=\"top\"\n            >\n              Select\n            </Button>\n          </div>\n        </div>\n\n        {\n          <CollapsableSection\n            isOpen={!isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            label={\n              <div className={styles.groupName}>\n                <GroupsIcon />\n                <div className={styles.labelValue}>{labelValue}</div>\n                {labelCardinality > 1 && (\n                  <div className={styles.index}>\n                    ({index + 1}/{labelCardinality})\n                  </div>\n                )}\n              </div>\n            }\n          >\n            <div className={styles.collapsableSectionBody}>\n              <body.Component model={body} />\n            </div>\n\n            {shouldDisplayShowMoreButton && (\n              <div className={styles.footer}>\n                <ShowMoreButton\n                  label=\"metric\"\n                  batchSizes={batchSizes}\n                  onClick={onClickShowMore}\n                  tooltip={`Show more metrics for ${labelName}=\"${labelValue}\"`}\n                />\n              </div>\n            )}\n          </CollapsableSection>\n        }\n\n        {/* required to trigger its activation handlers */}\n        <div className={styles.variable}>\n          <variable.Component key={variable.state.name} model={variable} />\n        </div>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      background: theme.colors.background.canvas,\n      margin: theme.spacing(1, 0, 0, 0),\n\n      '& div:focus-within': {\n        boxShadow: 'none !important',\n      },\n    }),\n    containerHeader: css({\n      display: 'flex',\n      alignItems: 'center',\n      gap: '8px',\n      marginBottom: '-36px',\n      paddingBottom: theme.spacing(1.5),\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n    }),\n    headerButtons: css({\n      position: 'relative',\n      top: '3px',\n      marginLeft: 'auto',\n      marginRight: '30px',\n      zIndex: 100,\n    }),\n    selectButton: css({\n      height: '28px',\n    }),\n    collapsableSectionBody: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '24px',\n      padding: theme.spacing(1),\n    }),\n    groupName: css({\n      display: 'flex',\n      alignItems: 'center',\n      fontSize: '1.3rem',\n      lineHeight: '1.3rem',\n    }),\n    labelValue: css({\n      fontSize: '16px',\n      marginLeft: '8px',\n    }),\n    index: css({\n      fontSize: '12px',\n      color: theme.colors.text.secondary,\n      marginLeft: '8px',\n    }),\n    footer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: theme.spacing(1),\n\n      '& button': {\n        height: '40px',\n      },\n    }),\n    variable: css({\n      display: 'none',\n    }),\n  };\n}\n","import { VariableHide, VariableRefresh } from '@grafana/data';\nimport { QueryVariable } from '@grafana/scenes';\nimport React from 'react';\n\nimport { LabelsDataSource } from './LabelsDataSource';\n\nexport const VAR_LABEL_VALUES = 'wingmanLabelValues';\n\nexport class LabelValuesVariable extends QueryVariable {\n  constructor({ labelName }: { labelName: string }) {\n    super({\n      name: VAR_LABEL_VALUES,\n      datasource: { uid: LabelsDataSource.uid },\n      // just some syntax we make up so that the data source can decide what to fetch\n      query: `valuesOf(${labelName})`,\n      isMulti: false,\n      allowCustomValue: false,\n      refresh: VariableRefresh.onTimeRangeChanged,\n      hide: VariableHide.hideVariable,\n      // BOTH \"value\" and \"includeAll\" below ensure the repetition in SceneByVariableRepeater\n      // // (if not set, it'll render only the 1st variable option)\n      value: '$__all',\n      includeAll: true,\n    });\n  }\n\n  public static readonly Component = () => {\n    return <></>;\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneObjectBase,\n  SceneReactObject,\n  SceneVariableSet,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { SceneByVariableRepeater } from 'MetricsReducer/components/SceneByVariableRepeater';\nimport { ShowMoreButton } from 'MetricsReducer/components/ShowMoreButton';\n\nimport { MetricsGroupByRow } from './MetricsGroupByRow';\nimport { InlineBanner } from '../../App/InlineBanner';\nimport { LabelValuesVariable, VAR_LABEL_VALUES } from '../labels/LabelValuesVariable';\n\ninterface MetricsGroupByListState extends SceneObjectState {\n  labelName: string;\n  $variables: SceneVariableSet;\n  body: SceneByVariableRepeater;\n}\n\nexport class MetricsGroupByList extends SceneObjectBase<MetricsGroupByListState> {\n  constructor({ labelName }: { labelName: MetricsGroupByListState['labelName'] }) {\n    super({\n      key: 'metrics-group-list',\n      labelName,\n      $variables: new SceneVariableSet({\n        variables: [new LabelValuesVariable({ labelName })],\n      }),\n      body: new SceneByVariableRepeater({\n        variableName: VAR_LABEL_VALUES,\n        initialPageSize: 20,\n        pageSizeIncrement: 10,\n        body: new SceneCSSGridLayout({\n          children: [],\n          isLazy: true,\n          templateColumns: '1fr',\n          autoRows: 'auto',\n          rowGap: 1,\n        }),\n        getLayoutLoading: () =>\n          new SceneReactObject({\n            reactNode: <Spinner inline />,\n          }),\n        getLayoutEmpty: () =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner title=\"\" severity=\"info\">\n                No label values found for label &quot;{labelName}&quot;.\n              </InlineBanner>\n            ),\n          }),\n        getLayoutError: (error: Error) =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner severity=\"error\" title={`Error while loading label \"${labelName}\" values!`} error={error} />\n            ),\n          }),\n        getLayoutChild: (option, index, options) => {\n          return new SceneCSSGridItem({\n            body: new MetricsGroupByRow({\n              index,\n              labelName,\n              labelValue: option.value as string,\n              labelCardinality: options.length,\n            }),\n          });\n        },\n      }),\n    });\n  }\n\n  static readonly Component = ({ model }: SceneComponentProps<MetricsGroupByList>) => {\n    const styles = useStyles2(getStyles);\n    const { body, $variables, labelName } = model.useState();\n\n    const variable = $variables.state.variables[0] as LabelValuesVariable;\n    const { loading, error } = variable.useState();\n\n    const batchSizes = body.useSizes();\n    const shouldDisplayShowMoreButton =\n      !loading && !error && batchSizes.total > 0 && batchSizes.current < batchSizes.total;\n\n    const onClickShowMore = () => {\n      body.increaseBatchSize();\n    };\n\n    return (\n      <div data-testid=\"metrics-groupby-list\">\n        <body.Component model={body} />\n\n        {shouldDisplayShowMoreButton && (\n          <div className={styles.footer}>\n            <ShowMoreButton label={`\"${labelName}\" value`} batchSizes={batchSizes} onClick={onClickShowMore} />\n          </div>\n        )}\n\n        {/* required to trigger its activation handlers */}\n        <div className={styles.variable}>\n          <variable.Component key={variable.state.name} model={variable} />\n        </div>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    footer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      margin: theme.spacing(3, 0, 1, 0),\n\n      '& button': {\n        height: '40px',\n      },\n    }),\n    variable: css({\n      display: 'none',\n    }),\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { type MetricFilters } from 'MetricsReducer/metrics-variables/MetricsVariableFilterEngine';\n\ninterface EventFiltersChangedPayload {\n  type: keyof MetricFilters;\n  filters: string[];\n}\n\nexport class EventFiltersChanged extends BusEventWithPayload<EventFiltersChangedPayload> {\n  public static readonly type = 'filters-changed';\n}\n","export const RULE_GROUP_LABELS = {\n  metrics: 'Non-rules metrics',\n  rules: 'Recording rules',\n} as const;\n\nexport type RuleGroupLabel = (typeof RULE_GROUP_LABELS)[keyof typeof RULE_GROUP_LABELS];\n","import { BusEventWithPayload } from '@grafana/data';\n\ninterface EventSectionValueChangedPayload {\n  key: string;\n  values: string[];\n}\n\nexport class EventSectionValueChanged extends BusEventWithPayload<EventSectionValueChangedPayload> {\n  public static readonly type = 'section-value-changed';\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\ntype SectionTitleProps = {\n  title: string;\n  description: string;\n};\n\nexport function SectionTitle({ title, description }: Readonly<SectionTitleProps>) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <h6 className={styles.title}>\n      <span>{title}</span>\n      <Tooltip content={description} placement=\"top\">\n        <Icon name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n      </Tooltip>\n    </h6>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    title: css({\n      fontSize: '15px',\n      fontWeight: theme.typography.fontWeightLight,\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n      paddingBottom: theme.spacing(0.5),\n    }),\n    infoIcon: css({\n      marginLeft: theme.spacing(1),\n      cursor: 'pointer',\n      color: theme.colors.text.secondary,\n      position: 'relative',\n      top: '-4px',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Checkbox, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nexport const CheckboxWithCount = ({\n  label,\n  count,\n  checked,\n  onChange,\n}: {\n  label: string;\n  count: number;\n  checked: boolean;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.checkboxWrapper} title={label}>\n      <Checkbox label={label} value={checked} onChange={onChange} />\n      <span className={styles.count}>({count})</span>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    checkboxWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n      '& label *': {\n        fontSize: '14px !important',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n    }),\n    count: css({\n      color: theme.colors.text.secondary,\n      marginLeft: theme.spacing(0.5),\n      display: 'inline-block',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { type RuleGroupLabel } from 'MetricsReducer/SideBar/sections/MetricsFilterSection/rule-group-labels';\n\nimport { CheckboxWithCount } from './CheckboxWithCount';\nimport { type MetricsFilterSectionState } from './MetricsFilterSection';\n\ntype CheckBoxListProps = {\n  groups: MetricsFilterSectionState['groups'];\n  selectedGroups: MetricsFilterSectionState['selectedGroups'];\n  onSelectionChange: (newGroups: MetricsFilterSectionState['selectedGroups']) => void;\n};\n\nexport function CheckBoxList({ groups, selectedGroups, onSelectionChange }: Readonly<CheckBoxListProps>) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <div className={styles.checkboxListHeader}>\n        <div>{selectedGroups.length} selected</div>\n        <Button variant=\"secondary\" fill=\"text\" onClick={() => onSelectionChange([])} disabled={!selectedGroups.length}>\n          clear\n        </Button>\n      </div>\n\n      {!groups.length && <div className={styles.noResults}>No results.</div>}\n\n      {groups.length > 0 && (\n        <ul className={styles.checkboxList} data-testid=\"checkbox-filters-list\">\n          {groups.map((group) => (\n            <li key={group.value} className={styles.checkboxItem}>\n              <CheckboxWithCount\n                label={group.label}\n                count={group.count}\n                checked={selectedGroups.some((g) => g.value === group.value)}\n                onChange={(e) => {\n                  const newGroups = e.currentTarget.checked\n                    ? [...selectedGroups, { label: group.label as RuleGroupLabel, value: group.value }]\n                    : selectedGroups.filter((v) => v.value !== group.value);\n\n                  onSelectionChange(newGroups);\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    checkboxListHeader: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      color: theme.colors.text.secondary,\n      margin: theme.spacing(0),\n      padding: theme.spacing(0, 0, 0, 1),\n    }),\n    checkboxList: css({\n      height: '100%',\n      margin: 0,\n      padding: theme.spacing(0, 1, 1, 1),\n      overflowY: 'auto',\n      '& .css-1n4u71h-Label': {\n        fontSize: '14px !important',\n      },\n      '&::-webkit-scrollbar': {\n        '-webkit-appearance': 'none',\n        width: '7px',\n      },\n      '&::-webkit-scrollbar-thumb': {\n        borderRadius: '4px',\n        backgroundColor: theme.colors.secondary.main,\n        '-webkit-box-shadow': `0 0 1px ${theme.colors.secondary.shade}`,\n      },\n    }),\n    checkboxItem: css({\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n      padding: theme.spacing(0.5, 0),\n    }),\n    noResults: css({\n      fontStyle: 'italic',\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  VariableDependencyConfig,\n  type MultiValueVariable,\n  type SceneComponentProps,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { Icon, IconButton, Input, Spinner, Switch, useStyles2 } from '@grafana/ui';\nimport React, { useMemo, useState, type KeyboardEventHandler } from 'react';\n\nimport {\n  VAR_FILTERED_METRICS_VARIABLE,\n  type FilteredMetricsVariable,\n} from 'MetricsReducer/metrics-variables/FilteredMetricsVariable';\nimport {\n  VAR_METRICS_VARIABLE,\n  type MetricOptions,\n  type MetricsVariable,\n} from 'MetricsReducer/metrics-variables/MetricsVariable';\nimport {\n  MetricsVariableFilterEngine,\n  type MetricFilters,\n} from 'MetricsReducer/metrics-variables/MetricsVariableFilterEngine';\nimport { MetricsReducer } from 'MetricsReducer/MetricsReducer';\nimport {\n  RULE_GROUP_LABELS,\n  type RuleGroupLabel,\n} from 'MetricsReducer/SideBar/sections/MetricsFilterSection/rule-group-labels';\nimport { logger } from 'shared/logger/logger';\n\nimport { reportExploreMetrics } from '../../../../shared/tracking/interactions';\nimport { EventSectionValueChanged } from '../EventSectionValueChanged';\nimport { SectionTitle } from '../SectionTitle';\nimport { type SideBarSectionState } from '../types';\nimport { CheckBoxList } from './CheckBoxList';\nimport { EventFiltersChanged } from './EventFiltersChanged';\n\nexport interface MetricsFilterSectionState extends SideBarSectionState {\n  type: keyof MetricFilters;\n  computeGroups: (\n    options: Array<{ label: string; value: string }>\n  ) => Array<{ label: string; value: string; count: number }>;\n  showHideEmpty: boolean;\n  showSearch: boolean;\n  groups: Array<{ label: string; value: string; count: number }>;\n  selectedGroups: Array<{ label: RuleGroupLabel; value: string }>; // we need labels for displaying tooltips in `SideBar.tsx`\n  loading: boolean;\n}\n\nexport class MetricsFilterSection extends SceneObjectBase<MetricsFilterSectionState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_METRICS_VARIABLE, VAR_FILTERED_METRICS_VARIABLE],\n    onReferencedVariableValueChanged: (variable) => {\n      const { name, options } = (variable as MultiValueVariable).state;\n\n      if (name === VAR_METRICS_VARIABLE) {\n        this.updateLists(options as MetricOptions);\n        return;\n      }\n\n      if (name === VAR_FILTERED_METRICS_VARIABLE) {\n        this.updateCounts();\n      }\n    },\n  });\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: [this.state.key] });\n\n  getUrlState() {\n    return {\n      [this.state.key]: this.state.selectedGroups.map((g) => g.value).join(','),\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    const stateUpdate: Partial<MetricsFilterSectionState> = {};\n\n    if (\n      typeof values[this.state.key] === 'string' &&\n      values[this.state.key] !== this.state.selectedGroups.map((g) => g.value).join(',')\n    ) {\n      stateUpdate.selectedGroups = (values[this.state.key] as string)\n        .split(',')\n        .map((v) => ({ label: v as RuleGroupLabel, value: v })) as Array<{ label: RuleGroupLabel; value: string }>;\n    }\n\n    this.setState(stateUpdate);\n  }\n\n  constructor({\n    key,\n    type,\n    title,\n    description,\n    icon,\n    computeGroups,\n    showHideEmpty,\n    showSearch,\n    disabled,\n    active,\n  }: {\n    key: MetricsFilterSectionState['key'];\n    type: MetricsFilterSectionState['type'];\n    title: MetricsFilterSectionState['title'];\n    description: MetricsFilterSectionState['description'];\n    icon: MetricsFilterSectionState['icon'];\n    computeGroups: MetricsFilterSectionState['computeGroups'];\n    showHideEmpty?: MetricsFilterSectionState['showHideEmpty'];\n    showSearch?: MetricsFilterSectionState['showSearch'];\n    disabled?: MetricsFilterSectionState['disabled'];\n    active?: MetricsFilterSectionState['active'];\n  }) {\n    super({\n      key,\n      type,\n      title,\n      description,\n      icon,\n      groups: [],\n      computeGroups,\n      selectedGroups: [],\n      loading: true,\n      showHideEmpty: showHideEmpty ?? true,\n      showSearch: showSearch ?? true,\n      disabled: disabled ?? false,\n      active: active ?? false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const metricsVariable = sceneGraph.lookupVariable(VAR_METRICS_VARIABLE, this) as MetricsVariable;\n    const filteredMetricsVariable = sceneGraph.lookupVariable(\n      VAR_FILTERED_METRICS_VARIABLE,\n      this\n    ) as FilteredMetricsVariable;\n\n    this.updateLists(metricsVariable.state.options as MetricOptions);\n    this.updateCounts();\n\n    const { selectedGroups } = this.state;\n\n    this.setState({\n      loading: filteredMetricsVariable.state.loading,\n      active: selectedGroups.length > 0,\n    });\n  }\n\n  private updateLists(options: MetricOptions) {\n    this.setState({\n      groups: this.state.computeGroups(options),\n      loading: false,\n    });\n  }\n\n  private updateCounts() {\n    const { groups, computeGroups, type } = this.state;\n\n    // Access the original unfiltered options\n    const metricsVariable = sceneGraph.lookupVariable(VAR_METRICS_VARIABLE, this) as MetricsVariable;\n    const originalOptions = metricsVariable.state.options as MetricOptions;\n\n    const metricsReducer = sceneGraph.getAncestor(this, MetricsReducer);\n    const filterEngine = metricsReducer.state.enginesMap.get(VAR_FILTERED_METRICS_VARIABLE)?.filterEngine;\n\n    if (!filterEngine) {\n      logger.warn('MetricsFilterSection: No filter engine found');\n      return;\n    }\n\n    // Create a copy of current filters excluding the current filter type\n    const filtersWithoutCurrentType = { ...filterEngine.getFilters(), [type]: [] };\n\n    // Get options filtered by everything except the current filter type\n    const optionsForCounting = MetricsVariableFilterEngine.getFilteredOptions(\n      originalOptions,\n      filtersWithoutCurrentType\n    );\n\n    // Calculate counts based on these options\n    const newGroups = new Map<string, number>(\n      computeGroups(optionsForCounting).map((option) => [option.label, option.count])\n    );\n\n    const newGroupsWithCount = groups.map((group) => ({\n      ...group,\n      count: newGroups.get(group.label) ?? 0,\n    }));\n\n    this.setState({\n      groups: newGroupsWithCount,\n      loading: false,\n    });\n  }\n\n  private onSelectionChange = (selectedGroups: MetricsFilterSectionState['selectedGroups']) => {\n    this.setState({ selectedGroups, active: selectedGroups.length > 0 });\n\n    this.publishEvent(\n      new EventFiltersChanged({ type: this.state.type, filters: selectedGroups.map((g) => g.value) }),\n      true\n    );\n\n    this.publishEvent(\n      new EventSectionValueChanged({ key: this.state.key, values: selectedGroups.map((g) => g.label) }),\n      true\n    );\n\n    if (this.state.type === 'prefixes') {\n      reportExploreMetrics('sidebar_prefix_filter_applied', {\n        filter_count: selectedGroups.length,\n      });\n    } else if (this.state.type === 'suffixes') {\n      reportExploreMetrics('sidebar_suffix_filter_applied', {\n        filter_count: selectedGroups.length,\n      });\n    }\n\n    // Track rule filter selection events\n    if (this.state.key === 'filters-rule' && selectedGroups.length > 0) {\n      // Map the label to the appropriate filter_type for the event\n      selectedGroups.forEach((group) => {\n        let filterType: 'non_rules_metrics' | 'recording_rules' | 'alerting_rules';\n\n        switch (group.label) {\n          case RULE_GROUP_LABELS.metrics:\n            filterType = 'non_rules_metrics';\n            break;\n          case RULE_GROUP_LABELS.rules:\n            filterType = 'recording_rules';\n            break;\n          default:\n            return; // Skip if it's not a recognized rules filter\n        }\n\n        reportExploreMetrics('sidebar_rules_filter_selected', { filter_type: filterType });\n      });\n    }\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<MetricsFilterSection>) => {\n    const styles = useStyles2(getStyles);\n    const { groups, selectedGroups, loading, title, description, showHideEmpty, showSearch } = model.useState();\n\n    const [hideEmpty, setHideEmpty] = useState(false);\n    const [searchValue, setSearchValue] = useState('');\n\n    const filteredGroups = useMemo(() => {\n      const filters: Array<(item: { label: string; value: string; count: number }) => boolean> = [];\n\n      if (hideEmpty) {\n        filters.push((item) => item.count > 0);\n      }\n\n      filters.push((item) => item.label.toLowerCase().includes(searchValue.toLowerCase()));\n\n      return groups.filter((group) => filters.every((filter) => filter(group)));\n    }, [hideEmpty, groups, searchValue]);\n\n    const onKeyDown: KeyboardEventHandler<HTMLInputElement> = (e) => {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        setSearchValue('');\n      }\n    };\n\n    return (\n      <div className={styles.container}>\n        <SectionTitle title={title} description={description} />\n\n        {showHideEmpty && (\n          <div className={styles.switchContainer}>\n            <span className={styles.switchLabel}>Hide empty</span>\n            <Switch value={hideEmpty} onChange={(e) => setHideEmpty(e.currentTarget.checked)} />\n          </div>\n        )}\n\n        {showSearch && (\n          <Input\n            className={styles.searchInput}\n            prefix={<Icon name=\"search\" />}\n            placeholder=\"Search...\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.currentTarget.value)}\n            onKeyDown={onKeyDown}\n            suffix={\n              <IconButton name=\"times\" variant=\"secondary\" tooltip=\"Clear search\" onClick={() => setSearchValue('')} />\n            }\n          />\n        )}\n\n        {loading && <Spinner inline />}\n\n        {!loading && (\n          <CheckBoxList\n            groups={filteredGroups}\n            selectedGroups={selectedGroups}\n            onSelectionChange={model.onSelectionChange}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      height: '100%',\n      overflowY: 'hidden',\n    }),\n    switchContainer: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      gap: theme.spacing(1),\n    }),\n    switchLabel: css({\n      fontSize: '12px',\n      color: theme.colors.text.primary,\n    }),\n    searchInput: css({\n      flexBasis: '32px',\n      flexShrink: 0,\n      marginBottom: theme.spacing(1),\n      padding: theme.spacing(0, 0.5),\n    }),\n  };\n}\n","import { localeCompare } from 'MetricsReducer/helpers/localCompare';\n\nconst NONE_PREFIX = '<none>';\n\nexport function computeMetricPrefixGroups(options: Array<{ label: string; value: string }>) {\n  const rawPrefixesMap = new Map<string, string[]>();\n\n  for (const option of options) {\n    const parts = option.value.split(/[^a-z0-9]/i);\n    const key = parts.length <= 1 ? option.value : parts[0];\n    const values = rawPrefixesMap.get(key) ?? [];\n\n    values.push(option.value);\n    rawPrefixesMap.set(key || NONE_PREFIX, values);\n  }\n\n  const prefixesMap = new Map<string, number>();\n\n  for (const [prefix, values] of rawPrefixesMap) {\n    prefixesMap.set(prefix, values.length);\n  }\n\n  return Array.from(prefixesMap.entries())\n    .sort((a, b) => {\n      if (a[1] !== b[1]) {\n        return b[1] - a[1];\n      }\n\n      return localeCompare(a[0], b[0]);\n    })\n    .map(([value, count]) => ({\n      value,\n      count,\n      label: value,\n    }));\n}\n","import { localeCompare } from 'MetricsReducer/helpers/localCompare';\n\nconst NONE_SUFFIX = '<none>';\n\nexport function computeMetricSuffixGroups(options: Array<{ label: string; value: string }>) {\n  const rawSuffixesMap = new Map<string, string[]>();\n\n  for (const option of options) {\n    const parts = option.value.split(/[^a-z0-9]/i);\n    const key = parts.length <= 1 ? option.value : parts[parts.length - 1];\n    const values = rawSuffixesMap.get(key) ?? [];\n\n    values.push(option.value);\n    rawSuffixesMap.set(key || NONE_SUFFIX, values);\n  }\n\n  const suffixesMap = new Map<string, number>();\n\n  for (const [suffix, values] of rawSuffixesMap) {\n    suffixesMap.set(suffix, values.length);\n  }\n\n  return Array.from(suffixesMap.entries())\n    .sort((a, b) => {\n      if (a[1] !== b[1]) {\n        return b[1] - a[1];\n      }\n\n      return localeCompare(a[0], b[0]);\n    })\n    .map(([value, count]) => ({\n      value,\n      count,\n      label: value,\n    }));\n}\n","import { RULE_GROUP_LABELS } from '../SideBar/sections/MetricsFilterSection/rule-group-labels';\n\ntype MetricType = 'metrics' | 'rules';\n\n/**\n * Checks if a metric name follows Prometheus recording rule naming conventions.\n *\n * @remarks Recording rules follow the pattern: `level:metric:operations` or `level:metric`.\n * The `level` component might be empty. Where `level` and `operations` can contain\n * underscores and alphanumeric characters. The `metric` part can contain any character, but can't be empty.\n */\nfunction isRecordingRule(value: string): boolean {\n  // Matches patterns like:\n  // - instance_path:requests:rate5m\n  // - path:requests:rate5m\n  // - job:request_failures_per_requests:ratio_rate5m\n  // - apiserver_request:availability30d\n  // - asserts:container_memory\n  // - :requests:rate5m\n  return /^\\w*:.*?(?::\\w+)?$/.test(value);\n}\n\nexport function computeRulesGroups(options: Array<{ label: string; value: string }>) {\n  const rulesMap = new Map<MetricType, string[]>([\n    ['metrics', []],\n    ['rules', []],\n  ]);\n\n  for (const option of options) {\n    const { value } = option;\n    const key: MetricType = isRecordingRule(value) ? 'rules' : 'metrics';\n\n    const values = rulesMap.get(key) ?? [];\n    values.push(value);\n    rulesMap.set(key, values);\n  }\n\n  return [\n    { value: '^(?!.*:.*)', label: RULE_GROUP_LABELS.metrics, count: rulesMap.get('metrics')!.length },\n    { value: ':', label: RULE_GROUP_LABELS.rules, count: rulesMap.get('rules')!.length },\n  ];\n}\n","import { type SceneObjectUrlValues } from '@grafana/scenes';\n\nfunction filterUrlValues(urlValues: SceneObjectUrlValues) {\n  delete urlValues.actionView;\n  delete urlValues.layout;\n  delete urlValues.refresh;\n\n  if (Array.isArray(urlValues['var-filters'])) {\n    urlValues['var-filters'] = urlValues['var-filters'].filter(Boolean);\n  }\n\n  return urlValues;\n}\n\nexport function genBookmarkKey(urlValues: SceneObjectUrlValues) {\n  return JSON.stringify(filterUrlValues(urlValues));\n}\n","import { css } from '@emotion/css';\nimport { dateTimeFormat, type GrafanaTheme2 } from '@grafana/data';\nimport { type SceneObjectUrlValues } from '@grafana/scenes';\nimport { Card, IconButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { type Bookmark } from 'shared/bookmarks/useBookmarks';\nimport { VAR_FILTERS } from 'shared/shared';\n\nimport { getMetricName } from '../../../../shared/utils/utils';\n\n// Helper function to truncate the value for a single key:value pair\nconst truncateValue = (key: string, value: string, maxLength: number) => {\n  const combinedLength = key.length + 2 + value.length; // 2 for \": \"\n  if (combinedLength > maxLength) {\n    return value.substring(0, maxLength - key.length - 5) + '...'; // 5 for \": \" and \"...\"\n  }\n  return value;\n};\n\nconst getFiltersFromUrl = (urlValues: SceneObjectUrlValues) => {\n  // the filters are always represented as an array of strings in urlValues\n  // e.g. ['job|=|prometheus', 'branch|=|HEAD']\n  const filtersFromUrl = urlValues[`var-${VAR_FILTERS}`] as string[];\n  if (!filtersFromUrl.length) {\n    return [];\n  }\n  return filtersFromUrl.map((f) => f.split('|'));\n};\n\ntype BookmarkListItemProps = {\n  bookmark: Bookmark;\n  onSelect: () => void;\n  onDelete: () => void;\n  wide?: boolean;\n  compactHeight?: boolean;\n};\n\nexport function BookmarkListItem(props: Readonly<BookmarkListItemProps>) {\n  const styles = useStyles2(getStyles);\n  const { onSelect, onDelete, bookmark } = props;\n\n  const { createdAt, urlValues } = bookmark;\n  const metric = (urlValues.metric as string) || '?';\n  const filters = getFiltersFromUrl(urlValues);\n\n  const heading = truncateValue('', getMetricName(metric), 27);\n  const cardHeightClassName = `${props.compactHeight && filters.length > 0 ? styles.cardTall : ''}`;\n  const cardClassName = `${styles.card} ${props.wide ? styles.cardWide : ''} ${cardHeightClassName}`;\n\n  return (\n    <article data-testid={`data-trail-card ${metric}`}>\n      <Card onClick={onSelect} className={cardClassName}>\n        <Card.Heading>\n          <div className={styles.metricValue}>{heading}</div>\n        </Card.Heading>\n        <Card.Meta className={styles.meta}>\n          {filters.map(([key, operator, value], i) => (\n            <div key={i} className={styles.filter}>\n              <span className={styles.secondaryFont}>\n                {key} {operator}\n              </span>\n              <span className={styles.primaryFont}> {truncateValue(key, value, 44)}</span>\n            </div>\n          ))}\n        </Card.Meta>\n        <div className={styles.deleteButton}>\n          <Card.SecondaryActions>\n            <IconButton\n              key=\"delete\"\n              name=\"trash-alt\"\n              className={styles.secondary}\n              tooltip=\"Remove bookmark\"\n              tooltipPlacement=\"top\"\n              onClick={onDelete}\n            />\n          </Card.SecondaryActions>\n        </div>\n      </Card>\n      <div className={styles.date}>\n        <div className={styles.secondaryFont}>Date created: </div>\n        <div className={styles.primaryFont}>{createdAt > 0 && dateTimeFormat(createdAt, { format: 'YYYY-MM-DD' })}</div>\n      </div>\n    </article>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    metricValue: css({\n      display: 'inline',\n      color: theme.colors.text.primary,\n      fontWeight: 500,\n      wordBreak: 'break-all',\n    }),\n    card: css({\n      position: 'relative',\n      width: '318px',\n      padding: `12px ${theme.spacing(2)} ${theme.spacing(1)} ${theme.spacing(2)}`,\n      alignItems: 'start',\n      marginBottom: 0,\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n      borderRight: `1px solid ${theme.colors.border.weak}`,\n      borderLeft: `1px solid ${theme.colors.border.weak}`,\n      borderBottom: 'none', // Remove the bottom border\n      borderRadius: '2px 2px 0 0', // Top-left and top-right corners are 2px, bottom-left and bottom-right are 0; cannot use theme.shape.radius.default because need bottom corners to be 0\n    }),\n    cardWide: css({\n      width: '100%',\n    }),\n    cardTall: css({\n      height: '110px',\n    }),\n    secondary: css({\n      color: theme.colors.text.secondary,\n      fontSize: '12px',\n    }),\n    date: css({\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: '0 0 2px 2px',\n      padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      backgroundColor: theme.colors.background.primary,\n    }),\n    meta: css({\n      flexWrap: 'wrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      maxHeight: '36px', // 2 lines * 18px line-height\n      margin: 0,\n      gridArea: 'Meta',\n      color: theme.colors.text.secondary,\n      whiteSpace: 'nowrap',\n    }),\n    filter: css({\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    }),\n    primaryFont: css({\n      display: 'inline',\n      color: theme.colors.text.primary,\n      fontSize: '12px',\n      fontWeight: '500',\n      letterSpacing: '0.018px',\n    }),\n    secondaryFont: css({\n      display: 'inline',\n      color: theme.colors.text.secondary,\n      fontSize: '12px',\n      fontWeight: '400',\n      lineHeight: '18px' /* 150% */,\n      letterSpacing: '0.018px',\n    }),\n    deleteButton: css({\n      position: 'absolute',\n      bottom: theme.spacing(1.5),\n      right: theme.spacing(0.5),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { useBookmarks } from 'shared/bookmarks/useBookmarks';\n\nimport { BookmarkListItem } from './BookmarkListItem';\nimport { reportExploreMetrics } from '../../../../shared/tracking/interactions';\nimport { SectionTitle } from '../SectionTitle';\nimport { type SideBarSectionState } from '../types';\n\ninterface BookmarksListState extends SideBarSectionState {}\n\nexport class BookmarksList extends SceneObjectBase<BookmarksListState> {\n  constructor({\n    key,\n    title,\n    description,\n    icon,\n    disabled,\n  }: {\n    key: BookmarksListState['key'];\n    title: BookmarksListState['title'];\n    description: BookmarksListState['description'];\n    icon: BookmarksListState['icon'];\n    disabled?: BookmarksListState['disabled'];\n  }) {\n    super({\n      key,\n      title,\n      description,\n      icon,\n      disabled: disabled ?? false,\n      active: false,\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<BookmarksList>) => {\n    const styles = useStyles2(getStyles);\n    const { title, description } = model.useState();\n    const { bookmarks, gotoBookmark, removeBookmark } = useBookmarks(model);\n\n    const onSelect = (bookmarkKey: string) => {\n      reportExploreMetrics('exploration_started', { cause: 'bookmark_clicked' });\n      gotoBookmark(bookmarkKey);\n    };\n\n    const onDelete = (bookmarkKey: string) => {\n      reportExploreMetrics('bookmark_changed', { action: 'deleted' });\n      removeBookmark(bookmarkKey);\n    };\n\n    return (\n      <div className={styles.container}>\n        <SectionTitle title={title} description={description} data-testid=\"bookmarks-list-sidebar\" />\n        {bookmarks.length > 0 ? (\n          <div className={styles.bookmarksList}>\n            {bookmarks.map((bookmark) => (\n              <BookmarkListItem\n                key={bookmark.key}\n                bookmark={bookmark}\n                onSelect={() => onSelect(bookmark.key)}\n                onDelete={() => onDelete(bookmark.key)}\n                wide={true}\n                compactHeight={true}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className={styles.emptyState}>\n            <div>No bookmarks yet for the</div>\n            <div>current data source.</div>\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      height: '100%',\n    }),\n    bookmarksList: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1.5),\n      overflowY: 'auto',\n      paddingRight: theme.spacing(1),\n    }),\n    emptyState: css({\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      height: '100px',\n      color: theme.colors.text.secondary,\n      fontStyle: 'italic',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2, type SelectableValue } from '@grafana/data';\nimport { Button, RadioButtonList, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { NULL_GROUP_BY_VALUE } from 'MetricsReducer/labels/LabelsDataSource';\n\ntype LabelsListProps = {\n  labels: Array<SelectableValue<string>>;\n  selectedLabel: string;\n  onSelectLabel: (label: string) => void;\n  onClearSelection: () => void;\n};\n\nexport function LabelsList({ labels, selectedLabel, onSelectLabel, onClearSelection }: Readonly<LabelsListProps>) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <div className={styles.listHeader}>\n        <div className={styles.selected}>\n          {selectedLabel === NULL_GROUP_BY_VALUE ? 'No selection' : `Selected: \"${selectedLabel}\"`}\n        </div>\n        <Button\n          variant=\"secondary\"\n          fill=\"text\"\n          onClick={onClearSelection}\n          disabled={selectedLabel === NULL_GROUP_BY_VALUE}\n        >\n          clear\n        </Button>\n      </div>\n\n      {!labels.length && <div className={styles.noResults}>No results.</div>}\n\n      {labels.length > 0 && (\n        <div className={styles.list} data-testid=\"labels-list\">\n          {/* TODO: use a custom one to have option labels with ellipsis and title/tooltip when hovering\n      now we're customizing too much the component CSS */}\n          <RadioButtonList name=\"labels-list\" options={labels} onChange={onSelectLabel} value={selectedLabel} />\n        </div>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    listHeader: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      color: theme.colors.text.secondary,\n      margin: theme.spacing(0),\n      padding: theme.spacing(0, 0, 0, 1),\n    }),\n    selected: css({\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n    }),\n    list: css({\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n      gap: 0,\n      overflowY: 'auto',\n\n      '& [role=\"radiogroup\"]': {\n        gap: 0,\n      },\n\n      '& label': {\n        cursor: 'pointer',\n        padding: theme.spacing(0.5, 1),\n        '&:hover': {\n          background: theme.colors.background.secondary,\n        },\n      },\n\n      '& label div': {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n      },\n    }),\n    noResults: css({\n      fontStyle: 'italic',\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n  };\n}\n","import { sceneGraph, sceneUtils, type SceneObject, type SceneObjectUrlValues } from '@grafana/scenes';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { MetricsDrilldownDataSourceVariable } from 'AppDataTrail/MetricsDrilldownDataSourceVariable';\nimport { displayError } from 'MetricsReducer/helpers/displayStatus';\nimport { MetricSelectedEvent, VAR_DATASOURCE } from 'shared/shared';\nimport { getTrailFor } from 'shared/utils/utils';\n\nimport { genBookmarkKey } from './genBookmarkKey';\nimport { PREF_KEYS } from '../user-preferences/pref-keys';\nimport { userStorage } from '../user-preferences/userStorage';\n\nexport type Bookmark = {\n  key: string;\n  urlValues: SceneObjectUrlValues & { metric: string };\n  createdAt: number;\n};\n\nexport type BookmarkFromStorage = Omit<Bookmark, 'key'>;\n\nexport function useBookmarks(sceneObject: SceneObject) {\n  const [allBookmarks, setAllBookmarks] = useState<Record<string, Bookmark>>({});\n  const trail = getTrailFor(sceneObject);\n\n  useEffect(() => {\n    const bookmarksFromStorage: BookmarkFromStorage[] = userStorage.getItem(PREF_KEYS.BOOKMARKS) || [];\n    const bookmarks: Record<string, Bookmark> = {};\n\n    for (const b of bookmarksFromStorage) {\n      // to store the min amount of data, we don't store the key in user storage, we compute it on-the-fly here, when it's retrieved\n      const key = genBookmarkKey(b.urlValues);\n      bookmarks[key] = { ...b, key };\n    }\n\n    setAllBookmarks(bookmarks);\n  }, []);\n\n  const { value: dsValue } = sceneGraph\n    .findByKeyAndType(trail, VAR_DATASOURCE, MetricsDrilldownDataSourceVariable)\n    .useState();\n\n  const bookmarks = useMemo(\n    () => Object.values(allBookmarks).filter((b) => b.urlValues[`var-${VAR_DATASOURCE}`] === (dsValue as string)),\n    [allBookmarks, dsValue]\n  );\n\n  const addBookmark = () => {\n    const newBookmark = {\n      urlValues: sceneUtils.getUrlState(trail) as Bookmark['urlValues'],\n      createdAt: Date.now(),\n    };\n    const bookmarksForStorage = Object.values(allBookmarks).map((b) => ({ ...b, key: undefined }));\n\n    userStorage.setItem(PREF_KEYS.BOOKMARKS, [...bookmarksForStorage, newBookmark]);\n\n    const newKey = genBookmarkKey(newBookmark.urlValues);\n    setAllBookmarks({ ...allBookmarks, [newKey]: { ...newBookmark, key: newKey } });\n  };\n\n  const removeBookmark = (bookmarkKey: string) => {\n    delete allBookmarks[bookmarkKey];\n    const bookmarksForStorage = Object.values(allBookmarks).map((b) => ({ ...b, key: undefined }));\n\n    userStorage.setItem(PREF_KEYS.BOOKMARKS, bookmarksForStorage);\n\n    setAllBookmarks({ ...allBookmarks });\n  };\n\n  const gotoBookmark = (bookmarkKey: string) => {\n    const bookmark = allBookmarks[bookmarkKey];\n    if (!bookmark) {\n      const error = new Error('Bookmark not found!');\n      displayError(error, [error.toString()]);\n      return;\n    }\n\n    trail.publishEvent(\n      new MetricSelectedEvent({\n        metric: bookmark.urlValues.metric,\n        urlValues: bookmark.urlValues,\n      }),\n      true\n    );\n  };\n\n  return { bookmarks, addBookmark, removeBookmark, gotoBookmark };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2, type SelectableValue } from '@grafana/data';\nimport { sceneGraph, SceneObjectBase, type SceneComponentProps } from '@grafana/scenes';\nimport { Icon, IconButton, Input, Spinner, useStyles2 } from '@grafana/ui';\nimport React, { useMemo, useState } from 'react';\n\nimport { NULL_GROUP_BY_VALUE } from 'MetricsReducer/labels/LabelsDataSource';\nimport { type LabelsVariable } from 'MetricsReducer/labels/LabelsVariable';\n\nimport { reportExploreMetrics } from '../../../../shared/tracking/interactions';\nimport { EventSectionValueChanged } from '../EventSectionValueChanged';\nimport { SectionTitle } from '../SectionTitle';\nimport { type SideBarSectionState } from '../types';\nimport { LabelsList } from './LabelsList';\n\ninterface LabelsBrowserState extends SideBarSectionState {\n  variableName: string;\n}\n\nexport class LabelsBrowser extends SceneObjectBase<LabelsBrowserState> {\n  constructor({\n    key,\n    variableName,\n    title,\n    description,\n    icon,\n    disabled,\n    active,\n  }: {\n    key: LabelsBrowserState['key'];\n    variableName: LabelsBrowserState['variableName'];\n    title: LabelsBrowserState['title'];\n    description: LabelsBrowserState['description'];\n    icon: LabelsBrowserState['icon'];\n    disabled?: LabelsBrowserState['disabled'];\n    active?: LabelsBrowserState['active'];\n  }) {\n    super({\n      key,\n      variableName,\n      title,\n      description,\n      icon,\n      disabled: disabled ?? false,\n      active: active ?? false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const labelsVariable = sceneGraph.lookupVariable(this.state.variableName, this) as LabelsVariable;\n    const labelValue = labelsVariable.state.value;\n\n    this.setState({ active: Boolean(labelValue && labelValue !== NULL_GROUP_BY_VALUE) });\n\n    // Subscribe to variable changes to update active state when the variable is changed externally\n    this._subs.add(\n      labelsVariable.subscribeToState((newState, prevState) => {\n        if (newState.value === prevState.value) {\n          return;\n        }\n\n        const active = Boolean(newState.value && newState.value !== NULL_GROUP_BY_VALUE);\n        if (active === this.state.active) {\n          return;\n        }\n\n        this.setState({ active });\n\n        this.publishEvent(\n          new EventSectionValueChanged({ key: this.state.key, values: active ? [newState.value as string] : [] }),\n          true\n        );\n      })\n    );\n  }\n\n  private selectLabel(label: string) {\n    const labelsVariable = sceneGraph.lookupVariable(this.state.variableName, this) as LabelsVariable;\n    labelsVariable.changeValueTo(label);\n\n    const active = Boolean(label && label !== NULL_GROUP_BY_VALUE);\n\n    this.setState({ active });\n  }\n\n  private onSelectLabel = (label: string) => {\n    reportExploreMetrics('sidebar_group_by_label_filter_applied', { label });\n    this.selectLabel(label);\n  };\n\n  private onClearSelection = () => {\n    this.selectLabel(NULL_GROUP_BY_VALUE);\n  };\n\n  private useLabelsBrowser = () => {\n    const { variableName, title, description } = this.useState();\n\n    const labelsVariable = sceneGraph.lookupVariable(variableName, this) as LabelsVariable;\n    const { loading, options: labels, value: labelValue } = labelsVariable.useState();\n\n    const [searchValue, setSearchValue] = useState('');\n\n    const labelsList: Array<SelectableValue<string>> = useMemo(() => {\n      const filters = [\n        (item: string) => item !== NULL_GROUP_BY_VALUE,\n        (item: string) => item.toLowerCase().includes(searchValue.toLowerCase()),\n      ];\n\n      return labels.filter((item) => filters.every((filter) => filter(item.value as string))) as Array<\n        SelectableValue<string>\n      >;\n    }, [labels, searchValue]);\n\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n      setSearchValue(e.currentTarget.value);\n    };\n\n    const onInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        setSearchValue('');\n      }\n    };\n\n    const onInputClear = () => {\n      setSearchValue('');\n    };\n\n    return {\n      title,\n      description,\n      loading,\n      selectedLabel: labelValue as string,\n      labelsList,\n      searchValue,\n      onInputChange,\n      onInputKeyDown,\n      onInputClear,\n    };\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<LabelsBrowser>) => {\n    const styles = useStyles2(getStyles);\n\n    const {\n      title,\n      description,\n      loading,\n      labelsList,\n      selectedLabel,\n      searchValue,\n      onInputChange,\n      onInputKeyDown,\n      onInputClear,\n    } = model.useLabelsBrowser();\n\n    return (\n      <div className={styles.container} data-testid=\"labels-browser\">\n        <SectionTitle title={title} description={description} />\n\n        <Input\n          className={styles.search}\n          prefix={<Icon name=\"search\" />}\n          placeholder=\"Search...\"\n          value={searchValue}\n          onChange={onInputChange}\n          onKeyDown={onInputKeyDown}\n          suffix={<IconButton name=\"times\" variant=\"secondary\" tooltip=\"Clear search\" onClick={onInputClear} />}\n        />\n\n        {loading && <Spinner inline />}\n\n        {!loading && (\n          <LabelsList\n            labels={labelsList}\n            selectedLabel={selectedLabel}\n            onSelectLabel={model.onSelectLabel}\n            onClearSelection={model.onClearSelection}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      height: '100%',\n      overflowY: 'hidden',\n    }),\n    search: css({\n      marginBottom: theme.spacing(1),\n      padding: theme.spacing(0, 0.5),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { SectionTitle } from './SectionTitle';\nimport { type SideBarSectionState } from './types';\n\ninterface SettingsState extends SideBarSectionState {}\n\nexport class Settings extends SceneObjectBase<SettingsState> {\n  constructor({\n    key,\n    title,\n    description,\n    icon,\n    disabled,\n  }: {\n    key: SettingsState['key'];\n    title: SettingsState['title'];\n    description: SettingsState['description'];\n    icon: SettingsState['icon'];\n    disabled?: SettingsState['disabled'];\n  }) {\n    super({\n      key,\n      title,\n      description,\n      icon,\n      disabled: disabled ?? false,\n      active: false,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {}\n\n  public static readonly Component = ({ model }: SceneComponentProps<Settings>) => {\n    const styles = useStyles2(getStyles);\n    const { title, description } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <SectionTitle title={title} description={description} />\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n      height: '100%',\n      overflowY: 'hidden',\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { availableIconsIndex, type GrafanaTheme2, type IconName } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { GroupsIcon } from './custom-icons/GroupsIcon';\nimport { RulesIcon } from './custom-icons/RulesIcon';\n\nconst CustomIcons = new Map<string, React.FC>([\n  ['rules', RulesIcon],\n  ['groups', GroupsIcon],\n]);\n\ntype SideBarButtonProps = {\n  ariaLabel: string;\n  disabled: boolean;\n  visible: boolean;\n  active: boolean;\n  tooltip: string;\n  onClick: () => void;\n  iconOrText: string | IconName;\n};\n\nexport function SideBarButton({\n  ariaLabel,\n  disabled,\n  visible,\n  active,\n  tooltip,\n  iconOrText,\n  onClick,\n}: Readonly<SideBarButtonProps>) {\n  const styles = useStyles2(getStyles);\n\n  let buttonIcon;\n  let ButtonChild;\n\n  if (iconOrText in availableIconsIndex) {\n    buttonIcon = iconOrText as IconName;\n  } else if (CustomIcons.has(iconOrText)) {\n    // some icons are not available in the Saga Design System and have been added as SVG files to the code base\n    ButtonChild = CustomIcons.get(iconOrText);\n  } else {\n    ButtonChild = function ButtonChildText() {\n      return <>{iconOrText}</>;\n    };\n  }\n\n  return (\n    <Button\n      className={cx(styles.button, disabled && 'disabled', visible && 'visible', active && 'active')}\n      size=\"md\"\n      variant=\"secondary\"\n      fill=\"text\"\n      icon={buttonIcon}\n      aria-label={ariaLabel}\n      tooltip={tooltip}\n      tooltipPlacement=\"right\"\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {ButtonChild && <ButtonChild />}\n    </Button>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    button: css({\n      margin: 0,\n      color: theme.colors.text.secondary,\n      '&:hover': {\n        color: theme.colors.text.maxContrast,\n        background: 'transparent',\n      },\n      '&.disabled:hover': {\n        color: theme.colors.text.secondary,\n      },\n      '&.visible': {\n        color: theme.colors.text.maxContrast,\n      },\n      '&.active': {\n        color: theme.colors.text.maxContrast,\n      },\n    }),\n  };\n}\n","import React from 'react';\n\nexport function RulesIcon() {\n  return (\n    <svg stroke=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n      <rect x=\"1.25\" y=\"1.625\" width=\"5.25\" height=\"5.25\" rx=\"1\" strokeWidth=\"1.5\" />\n      <circle cx=\"12.25\" cy=\"4.25\" r=\"2.75\" strokeWidth=\"1.5\" />\n      <circle cx=\"3.75\" cy=\"11.75\" r=\"2.75\" strokeWidth=\"1.5\" />\n      <rect x=\"9.5\" y=\"9.125\" width=\"5.25\" height=\"5.25\" rx=\"1\" strokeWidth=\"1.5\" />\n    </svg>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { VariableHide, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  AdHocFiltersVariable,\n  sceneGraph,\n  SceneObjectBase,\n  type AdHocFilterWithLabels,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { IconButton, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { NULL_GROUP_BY_VALUE } from 'MetricsReducer/labels/LabelsDataSource';\nimport { VAR_WINGMAN_GROUP_BY } from 'MetricsReducer/labels/LabelsVariable';\nimport { computeMetricPrefixGroups } from 'MetricsReducer/metrics-variables/computeMetricPrefixGroups';\nimport { computeMetricSuffixGroups } from 'MetricsReducer/metrics-variables/computeMetricSuffixGroups';\nimport { computeRulesGroups } from 'MetricsReducer/metrics-variables/computeRulesGroups';\nimport { VAR_OTHER_METRIC_FILTERS } from 'shared/shared';\nimport { PREF_KEYS } from 'shared/user-preferences/pref-keys';\nimport { userStorage } from 'shared/user-preferences/userStorage';\nimport { getTrailFor } from 'shared/utils/utils';\nimport { isAdHocFiltersVariable } from 'shared/utils/utils.variables';\n\nimport { BookmarksList } from './sections/BookmarksList/BookmarksList';\nimport { EventSectionValueChanged } from './sections/EventSectionValueChanged';\nimport { LabelsBrowser } from './sections/LabelsBrowser/LabelsBrowser';\nimport { MetricsFilterSection } from './sections/MetricsFilterSection/MetricsFilterSection';\nimport { Settings } from './sections/Settings';\nimport { SideBarButton } from './SideBarButton';\nimport { reportExploreMetrics } from '../../shared/tracking/interactions';\nimport { HGFeatureToggles, isFeatureToggleEnabled } from '../../shared/utils/utils.feature-toggles';\n\ntype Section = MetricsFilterSection | LabelsBrowser | BookmarksList | Settings;\n\ninterface SideBarState extends SceneObjectState {\n  sections: Section[];\n  visibleSection: Section | null;\n  sectionValues: Map<string, string[]>;\n}\n\nconst metricFiltersVariables = ['filters-rule', 'filters-prefix', 'filters-suffix'] as const;\ntype MetricFiltersVariable = (typeof metricFiltersVariables)[number];\n\nexport class SideBar extends SceneObjectBase<SideBarState> {\n  constructor(state: Partial<SideBarState>) {\n    const sectionValues = SideBar.getSectionValuesFromUrl();\n\n    super({\n      key: 'sidebar',\n      visibleSection: null,\n      sections: [\n        new MetricsFilterSection({\n          key: 'filters-rule',\n          type: 'categories',\n          title: 'Rules filters',\n          description: 'Filter metrics and recording rules',\n          icon: 'rules',\n          computeGroups: computeRulesGroups,\n          showHideEmpty: false,\n          showSearch: false,\n          active: Boolean(sectionValues.get('filters-rule')?.length),\n        }),\n        new MetricsFilterSection({\n          key: 'filters-prefix',\n          type: 'prefixes',\n          title: 'Prefix filters',\n          description: 'Filter metrics based on their name prefix (Prometheus namespace)',\n          icon: 'A_',\n          computeGroups: computeMetricPrefixGroups,\n          active: Boolean(sectionValues.get('filters-prefix')?.length),\n        }),\n        new MetricsFilterSection({\n          key: 'filters-suffix',\n          type: 'suffixes',\n          title: 'Suffix filters',\n          description: 'Filter metrics based on their name suffix',\n          icon: '_Z',\n          computeGroups: computeMetricSuffixGroups,\n          active: Boolean(sectionValues.get('filters-suffix')?.length),\n        }),\n        new LabelsBrowser({\n          key: 'groupby-labels',\n          variableName: VAR_WINGMAN_GROUP_BY,\n          title: 'Group by labels',\n          description: 'Group metrics by their label values',\n          icon: 'groups',\n          active: sectionValues.has('groupby-labels'),\n        }),\n        new BookmarksList({\n          key: 'bookmarks',\n          title: 'Bookmarks',\n          description: 'Access your saved metrics for quick reference',\n          icon: 'star',\n        }),\n        new Settings({\n          key: 'settings',\n          title: 'Settings',\n          description: 'Settings',\n          icon: 'cog',\n          disabled: true,\n        }),\n      ],\n      sectionValues,\n      ...state,\n    });\n\n    // FIXME: rule values are regexes, we do this only to disable adding the values to the button tooltip\n    // we need to provide the corresponding label instead\n    sectionValues.set('filters-rule', []);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const cleanupOtherMetricsVar = this.initOtherMetricsVar();\n\n    this.subscribeToEvent(EventSectionValueChanged, (event) => {\n      const { key, values } = event.payload;\n      const { sectionValues } = this.state;\n      const newSectionValues = new Map(sectionValues).set(key, values);\n      this.setOtherMetricFilters(newSectionValues);\n      this.setState({ sectionValues: newSectionValues });\n    });\n\n    // Open the sidebar to the most recently selected section if the \"Default Open Sidebar\" experiment is enabled\n    if (!this.state.visibleSection?.state.key && isFeatureToggleEnabled(HGFeatureToggles.sidebarOpenByDefault)) {\n      this.setActiveSection(userStorage.getItem(PREF_KEYS.SIDEBAR_SECTION) || 'filters-prefix');\n    }\n\n    return () => {\n      cleanupOtherMetricsVar();\n    };\n  }\n\n  private setOtherMetricFilters(sectionValues: Map<string, string[]>) {\n    const otherMetricFiltersVar = sceneGraph.lookupVariable(VAR_OTHER_METRIC_FILTERS, this);\n    if (!isAdHocFiltersVariable(otherMetricFiltersVar)) {\n      return;\n    }\n\n    const varToTextMap: Record<MetricFiltersVariable, string> = {\n      'filters-rule': 'rule group',\n      'filters-prefix': 'prefix',\n      'filters-suffix': 'suffix',\n    };\n\n    const newFilters = Array.from(sectionValues.entries()).reduce<Array<AdHocFilterWithLabels<{}>>>(\n      (acc, [key, value]) => {\n        if (value.length && metricFiltersVariables.includes(key as MetricFiltersVariable)) {\n          acc.push({\n            key,\n            operator: '=',\n            value: value.join(', '),\n            keyLabel: varToTextMap[key as MetricFiltersVariable],\n          });\n        }\n\n        return acc;\n      },\n      []\n    );\n\n    otherMetricFiltersVar.setState({\n      filters: newFilters,\n      hide: newFilters.length ? VariableHide.hideLabel : VariableHide.hideVariable,\n    });\n  }\n\n  /**\n   * Initialize the other metrics variable and set the filters from the current sidebar selections.\n   * This powers the read-only, \"other metric filters\" UI next to the label filters.\n   * The purpose of this is to provide users with at-a-glance feedback about the current sidebar\n   * selections, without needing to interact with the sidebar.\n   */\n  private initOtherMetricsVar() {\n    const currentVariableSet = getTrailFor(this).state.$variables;\n    if (!currentVariableSet) {\n      return () => {};\n    }\n\n    const otherMetricFiltersVar = new AdHocFiltersVariable({\n      name: VAR_OTHER_METRIC_FILTERS,\n      readOnly: true,\n      skipUrlSync: true,\n      datasource: null,\n      hide: VariableHide.hideVariable,\n      layout: 'combobox',\n      applyMode: 'manual',\n      allowCustomValue: true,\n    });\n\n    currentVariableSet.setState({\n      variables: [...currentVariableSet.state.variables, otherMetricFiltersVar],\n    });\n\n    this.setOtherMetricFilters(this.state.sectionValues);\n\n    return () => {\n      currentVariableSet.setState({\n        variables: [...currentVariableSet.state.variables.filter((v) => v !== otherMetricFiltersVar)],\n      });\n    };\n  }\n\n  private static getSectionValuesFromUrl() {\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const sectionValues = new Map();\n\n    for (const filterKey of metricFiltersVariables) {\n      const filterValueFromUrl = urlSearchParams.get(filterKey);\n      sectionValues.set(filterKey, filterValueFromUrl ? filterValueFromUrl.split(',').map((v) => v.trim()) : []);\n    }\n\n    const labelValue = urlSearchParams.get(`var-${VAR_WINGMAN_GROUP_BY}`);\n    const isLabelsBrowserActive = Boolean(labelValue && labelValue !== NULL_GROUP_BY_VALUE);\n    if (isLabelsBrowserActive) {\n      sectionValues.set('groupby-labels', [labelValue!]);\n    }\n\n    return sectionValues;\n  }\n\n  private setActiveSection(sectionKey: string) {\n    const { visibleSection, sections } = this.state;\n\n    if (!sectionKey || sectionKey === visibleSection?.state.key) {\n      // Report closing the sidebar\n      reportExploreMetrics('metrics_sidebar_toggled', {\n        action: 'closed',\n        section: visibleSection?.state.key,\n      });\n\n      this.setState({ visibleSection: null });\n      return;\n    }\n\n    // Keep track of the section that the user has most recently selected\n    userStorage.setItem(PREF_KEYS.SIDEBAR_SECTION, sectionKey);\n\n    // Report opening the sidebar with the selected section\n    reportExploreMetrics('metrics_sidebar_toggled', {\n      action: 'opened',\n      section: sectionKey,\n    });\n\n    if (sectionKey === 'filters-prefix') {\n      reportExploreMetrics('sidebar_prefix_filter_section_clicked', {});\n    } else if (sectionKey === 'filters-suffix') {\n      reportExploreMetrics('sidebar_suffix_filter_section_clicked', {});\n    }\n\n    this.setState({\n      visibleSection: sections.find((section) => section.state.key === sectionKey) ?? null,\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<SideBar>) => {\n    const styles = useStyles2(getStyles);\n    const { sections, visibleSection, sectionValues } = model.useState();\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.buttonsBar} data-testid=\"sidebar-buttons\">\n          {sections.map((section) => {\n            const { key, title, icon: iconOrText, disabled, active } = section.state;\n            const visible = visibleSection?.state.key === key;\n            const tooltip = sectionValues.get(key)?.length ? `${title}: ${sectionValues.get(key)?.join(', ')}` : title;\n\n            return (\n              <div\n                key={key}\n                className={cx(styles.buttonContainer, visible && 'visible', active && 'active', disabled && 'disabled')}\n              >\n                <SideBarButton\n                  ariaLabel={title}\n                  disabled={disabled}\n                  visible={visible}\n                  active={active}\n                  tooltip={tooltip}\n                  onClick={() => model.setActiveSection(key)}\n                  iconOrText={iconOrText}\n                />\n              </div>\n            );\n          })}\n        </div>\n        {visibleSection && (\n          <div className={styles.content} data-testid=\"sidebar-content\">\n            <IconButton\n              className={styles.closeButton}\n              name=\"times\"\n              aria-label=\"Close\"\n              tooltip=\"Close\"\n              tooltipPlacement=\"top\"\n              onClick={() => model.setActiveSection('')}\n            />\n            {/* TODO: find a better way */}\n            {visibleSection instanceof MetricsFilterSection && <visibleSection.Component model={visibleSection} />}\n            {visibleSection instanceof LabelsBrowser && <visibleSection.Component model={visibleSection} />}\n            {visibleSection instanceof BookmarksList && <visibleSection.Component model={visibleSection} />}\n            {visibleSection instanceof Settings && <visibleSection.Component model={visibleSection} />}\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      position: 'relative',\n      display: 'flex',\n      flexDirection: 'row',\n      height: '100%',\n      overflow: 'hidden',\n    }),\n    buttonsBar: css({\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      gap: 0,\n      width: '42px',\n      padding: 0,\n      margin: 0,\n      boxSizing: 'border-box',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderRadius: theme.shape.radius.default,\n      backgroundColor: theme.colors.background.primary,\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n      position: 'relative',\n    }),\n    buttonContainer: css({\n      marginTop: theme.spacing(1),\n      '&::before': {\n        transition: '0.5s ease',\n        content: '\"\"',\n        position: 'absolute',\n        left: 0,\n        height: '32px',\n        borderLeft: `2px solid ${theme.colors.action.selectedBorder}`,\n        boxSizing: 'border-box',\n        opacity: 0,\n        visibility: 'hidden',\n      },\n      '&:hover::before': {\n        opacity: 1,\n        visibility: 'visible',\n      },\n      '&.visible::before': {\n        opacity: 1,\n        visibility: 'visible',\n      },\n      '&.disabled::before': {\n        opacity: 0,\n        visibility: 'hidden',\n      },\n      '&.active::after': {\n        content: '\"\"',\n        position: 'absolute',\n        right: 0,\n        width: '8px',\n        height: '8px',\n        backgroundColor: theme.colors.action.selectedBorder,\n        borderRadius: '50%',\n        margin: '2px 4px 0 0',\n      },\n    }),\n    content: css({\n      width: 'calc(300px - 42px)', // we want 300px in total\n      boxSizing: 'border-box',\n      border: `1px solid ${theme.colors.border.weak}`,\n      borderLeft: 'none',\n      borderRadius: theme.shape.radius.default,\n      backgroundColor: theme.colors.background.canvas,\n      padding: theme.spacing(1.5),\n    }),\n    closeButton: css({\n      position: 'absolute',\n      top: theme.spacing(1.5),\n      right: theme.spacing(1),\n      margin: 0,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { useChromeHeaderHeight } from '@grafana/runtime';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  type CustomVariable,\n  type QueryVariable,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\n\nimport { registerRuntimeDataSources } from './helpers/registerRuntimeDataSources';\nimport { LabelsDataSource, NULL_GROUP_BY_VALUE } from './labels/LabelsDataSource';\nimport { LabelsVariable, VAR_WINGMAN_GROUP_BY } from './labels/LabelsVariable';\nimport { ListControls } from './list-controls/ListControls';\nimport { EventSortByChanged } from './list-controls/MetricsSorter/events/EventSortByChanged';\nimport { MetricsSorter, VAR_WINGMAN_SORT_BY, type SortingOption } from './list-controls/MetricsSorter/MetricsSorter';\nimport { EventQuickSearchChanged } from './list-controls/QuickSearch/EventQuickSearchChanged';\nimport { QuickSearch } from './list-controls/QuickSearch/QuickSearch';\nimport { EventMetricsVariableActivated } from './metrics-variables/events/EventMetricsVariableActivated';\nimport { EventMetricsVariableDeactivated } from './metrics-variables/events/EventMetricsVariableDeactivated';\nimport { EventMetricsVariableLoaded } from './metrics-variables/events/EventMetricsVariableLoaded';\nimport { FilteredMetricsVariable, VAR_FILTERED_METRICS_VARIABLE } from './metrics-variables/FilteredMetricsVariable';\nimport { MetricsVariableFilterEngine, type MetricFilters } from './metrics-variables/MetricsVariableFilterEngine';\nimport { MetricsVariableSortEngine } from './metrics-variables/MetricsVariableSortEngine';\nimport { MetricsGroupByList } from './MetricsGroupByList/MetricsGroupByList';\nimport { MetricsList } from './MetricsList/MetricsList';\nimport { EventFiltersChanged } from './SideBar/sections/MetricsFilterSection/EventFiltersChanged';\nimport { MetricsFilterSection } from './SideBar/sections/MetricsFilterSection/MetricsFilterSection';\nimport { SideBar } from './SideBar/SideBar';\n\ninterface MetricsReducerState extends SceneObjectState {\n  listControls: ListControls;\n  sidebar: SideBar;\n  body?: SceneObjectBase;\n  enginesMap: Map<string, { filterEngine: MetricsVariableFilterEngine; sortEngine: MetricsVariableSortEngine }>;\n}\n\nexport class MetricsReducer extends SceneObjectBase<MetricsReducerState> {\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_WINGMAN_GROUP_BY],\n    onReferencedVariableValueChanged: (variable) => {\n      this.updateBasedOnGroupBy((variable as LabelsVariable).state.value as string);\n    },\n  });\n\n  public constructor() {\n    super({\n      $variables: new SceneVariableSet({\n        variables: [new FilteredMetricsVariable(), new LabelsVariable()],\n      }),\n      listControls: new ListControls({}),\n      sidebar: new SideBar({}),\n      body: undefined,\n      enginesMap: new Map(),\n    });\n\n    registerRuntimeDataSources([new LabelsDataSource()]);\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const groupByValue = (sceneGraph.lookupVariable(VAR_WINGMAN_GROUP_BY, this) as LabelsVariable).state\n      .value as string;\n\n    this.updateBasedOnGroupBy(groupByValue);\n\n    this.subscribeToEvents();\n  }\n\n  private updateBasedOnGroupBy(groupByValue: string) {\n    const hasGroupByValue = Boolean(groupByValue && groupByValue !== NULL_GROUP_BY_VALUE);\n\n    sceneGraph.findByKeyAndType(this, 'quick-search', QuickSearch).toggleCountsDisplay(!hasGroupByValue);\n\n    if (!hasGroupByValue && this.state.body instanceof MetricsList) {\n      return;\n    }\n\n    if (\n      hasGroupByValue &&\n      this.state.body instanceof MetricsGroupByList &&\n      this.state.body.state.labelName === groupByValue\n    ) {\n      return;\n    }\n\n    this.setState({\n      body: hasGroupByValue\n        ? (new MetricsGroupByList({ labelName: groupByValue }) as unknown as SceneObjectBase)\n        : (new MetricsList({ variableName: VAR_FILTERED_METRICS_VARIABLE }) as unknown as SceneObjectBase),\n    });\n  }\n\n  private subscribeToEvents() {\n    this.initVariablesFilteringAndSorting();\n  }\n\n  /**\n   * The centralized filtering and sorting mechanism implemented here is decoupled via the usage of events.\n   * In order to work, the variables to be filtered/sorted must emit lifecycle events.\n   * This is done via the `withLifecycleEvents` decorator function.\n   *\n   * For example, check the `FilteredMetricsVariable` class.\n   */\n  private initVariablesFilteringAndSorting() {\n    this.subscribeToEvent(EventMetricsVariableActivated, (event) => {\n      // register engines\n      const { key } = event.payload;\n      const filteredMetricsVariable = sceneGraph.findByKey(this, key) as QueryVariable;\n\n      this.state.enginesMap.set(key, {\n        filterEngine: new MetricsVariableFilterEngine(filteredMetricsVariable),\n        sortEngine: new MetricsVariableSortEngine(filteredMetricsVariable),\n      });\n    });\n\n    this.subscribeToEvent(EventMetricsVariableDeactivated, (event) => {\n      // unregister engines\n      this.state.enginesMap.delete(event.payload.key);\n    });\n\n    const quickSearch = sceneGraph.findByKeyAndType(this, 'quick-search', QuickSearch);\n    const filterSections = sceneGraph.findAllObjects(\n      this,\n      (o) => o instanceof MetricsFilterSection\n    ) as MetricsFilterSection[];\n    const metricsSorter = sceneGraph.findByKeyAndType(this, 'metrics-sorter', MetricsSorter);\n    const sortByVariable = metricsSorter.state.$variables.getByName(VAR_WINGMAN_SORT_BY) as CustomVariable;\n\n    this.subscribeToEvent(EventMetricsVariableLoaded, (event) => {\n      // filter and sort on initial load\n      const { key, options } = event.payload;\n      const { filterEngine, sortEngine } = this.state.enginesMap.get(key)!;\n\n      filterEngine.setInitOptions(options);\n\n      const filters: Partial<MetricFilters> = {\n        names: quickSearch.state.value ? [quickSearch.state.value] : [],\n      };\n\n      for (const filterSection of filterSections) {\n        filters[filterSection.state.type] = filterSection.state.selectedGroups.map((g) => g.value);\n      }\n\n      filterEngine.applyFilters(filters, { forceUpdate: true, notify: false });\n      sortEngine.sort(sortByVariable.state.value as SortingOption);\n    });\n\n    /* Filters */\n\n    this.subscribeToEvent(EventQuickSearchChanged, (event) => {\n      const { searchText } = event.payload;\n\n      for (const [, { filterEngine, sortEngine }] of this.state.enginesMap) {\n        filterEngine.applyFilters({ names: searchText ? [searchText] : [] });\n        sortEngine.sort(sortByVariable.state.value as SortingOption);\n      }\n    });\n\n    this.subscribeToEvent(EventFiltersChanged, (event) => {\n      const { type, filters } = event.payload;\n\n      for (const [, { filterEngine, sortEngine }] of this.state.enginesMap) {\n        filterEngine.applyFilters({ [type]: filters });\n        sortEngine.sort(sortByVariable.state.value as SortingOption);\n      }\n    });\n\n    /* Sorting */\n\n    this.subscribeToEvent(EventSortByChanged, (event) => {\n      const { sortBy } = event.payload;\n      reportExploreMetrics('sorting_changed', { from: 'metrics-reducer', sortBy });\n\n      for (const [, { sortEngine }] of this.state.enginesMap) {\n        sortEngine.sort(sortBy);\n      }\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<MetricsReducer>) => {\n    const chromeHeaderHeight = useChromeHeaderHeight() ?? 0;\n    const styles = useStyles2(getStyles, chromeHeaderHeight);\n\n    const { $variables, body, listControls, sidebar } = model.useState();\n\n    return (\n      <>\n        <div className={styles.listControls} data-testid=\"list-controls\">\n          <listControls.Component model={listControls} />\n        </div>\n        <div className={styles.body}>\n          <div className={styles.sidebar} data-testid=\"sidebar\">\n            <sidebar.Component model={sidebar} />\n          </div>\n          <div className={styles.list}>{body && <body.Component model={body} />}</div>\n        </div>\n        <div className={styles.variables}>\n          {$variables?.state.variables.map((variable) => (\n            <variable.Component key={variable.state.name} model={variable} />\n          ))}\n        </div>\n      </>\n    );\n  };\n}\n\n// the height of header between Grafana's chrome header and the metrics list container.\nconst APP_HEADER_HEIGHT = 144;\n\nfunction getStyles(theme: GrafanaTheme2, chromeHeaderHeight: number) {\n  return {\n    listControls: css({\n      marginBottom: theme.spacing(1.5),\n    }),\n    body: css({\n      display: 'flex',\n      flexDirection: 'row',\n      gap: theme.spacing(1),\n      height: `calc(100vh - ${chromeHeaderHeight + APP_HEADER_HEIGHT}px)`,\n    }),\n    list: css({\n      width: '100%',\n      overflowY: 'auto',\n    }),\n    sidebar: css({\n      flex: '0 0 auto',\n      overflowY: 'auto',\n    }),\n    variables: css({\n      display: 'none',\n    }),\n  };\n}\n","import { registerRuntimeDataSource, type RuntimeDataSource } from '@grafana/scenes';\n\nimport { displayError } from './displayStatus';\n\nexport function registerRuntimeDataSources(dataSources: RuntimeDataSource[]) {\n  try {\n    for (const dataSource of dataSources) {\n      registerRuntimeDataSource({ dataSource });\n    }\n  } catch (error) {\n    const { message } = error as Error;\n\n    if (!/A runtime data source with uid (.+) has already been registered/.test(message)) {\n      displayError(error as Error, [\n        'Fail to register all the runtime data sources!',\n        'The application cannot work as expected, please try reloading the page or if the problem persists, contact your organization admin.',\n      ]);\n    }\n  }\n}\n","import { type DataTrail } from 'AppDataTrail/DataTrail';\n\nimport { isAgeMetric } from './isAgeMetric';\nimport { isClassicHistogramMetric } from './isClassicHistogramMetric';\nimport { isCounterMetric } from './isCounterMetric';\nimport { isStatusUpDownMetric } from './isStatusUpDownMetric';\n\nexport type MetricType = 'status-updown' | 'classic-histogram' | 'native-histogram' | 'age' | 'counter' | 'gauge';\n\nexport async function getMetricType(metric: string, dataTrail: DataTrail): Promise<MetricType> {\n  let metricType = getMetricTypeSync(metric);\n\n  if (metricType === 'gauge') {\n    if (await dataTrail.isNativeHistogram(metric)) {\n      metricType = 'native-histogram';\n    }\n  }\n\n  return metricType as MetricType;\n}\n\n/**\n * A sync version to use when performance is important or when the metadata for determing native histograms is missing\n */\nexport function getMetricTypeSync(metric: string): Omit<MetricType, 'native-histogram'> {\n  if (isCounterMetric(metric)) {\n    return 'counter';\n  }\n\n  if (isClassicHistogramMetric(metric)) {\n    return 'classic-histogram';\n  }\n\n  if (isAgeMetric(metric)) {\n    return 'age';\n  }\n\n  if (isStatusUpDownMetric(metric)) {\n    return 'status-updown';\n  }\n\n  return 'gauge';\n}\n","/**\n * Identifies gauge metrics with a value measured as a Unix timestamp in seconds\n */\nexport const isAgeMetric = (metric: string) => metric.endsWith('_timestamp_seconds');\n","import { CONFIG_PRESETS, type ConfigPresetId, type PanelConfigPreset } from './types';\n\nexport const DEFAULT_TIMESERIES_AGE_PRESETS: Partial<Record<ConfigPresetId, PanelConfigPreset>> = {\n  [CONFIG_PRESETS.TIMESERIES_AGE_TIME_MINUS_AVG]: {\n    id: CONFIG_PRESETS.TIMESERIES_AGE_TIME_MINUS_AVG,\n    name: 'Average age',\n    panelOptions: {\n      type: 'timeseries',\n      description:\n        'Suitable only for metrics that store unix timestamps (usually containing \"timestamp_seconds\" in their name) to calculate an average age. Calculates the age by subtracting the average timestamp value from current time.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'time-avg(metric)' }],\n    },\n  },\n  [CONFIG_PRESETS.TIMESERIES_AGE_TIME_MINUS_MIN_MAX]: {\n    id: CONFIG_PRESETS.TIMESERIES_AGE_TIME_MINUS_MIN_MAX,\n    name: 'Minimum and maximum ages',\n    panelOptions: {\n      type: 'timeseries',\n      description:\n        'Suitable only for metrics that store unix timestamps (usually containing \"timestamp_seconds\" in their name) to calculate a minimum and a maximum age. Calculates the ages by subtracting the min and the max timestamp values from current time.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'time-min(metric)' }, { fn: 'time-max(metric)' }],\n    },\n  },\n} as const;\n","import { CONFIG_PRESETS, type ConfigPresetId, type PanelConfigPreset } from './types';\n\nexport const DEFAULT_HISTOGRAMS_PRESETS: Partial<Record<ConfigPresetId, PanelConfigPreset>> = {\n  [CONFIG_PRESETS.HISTOGRAM_HEATMAP]: {\n    id: CONFIG_PRESETS.HISTOGRAM_HEATMAP,\n    name: 'Heatmap (default)',\n    panelOptions: {\n      type: 'heatmap',\n      description:\n        'Visualizes the full distribution of histogram data over time using color intensity. Perfect for spotting patterns, identifying performance degradation, and understanding latency distribution changes. Shows density of values across different buckets.',\n    },\n    queryOptions: {\n      queries: [],\n    },\n  },\n  [CONFIG_PRESETS.HISTOGRAM_PERCENTILES]: {\n    id: CONFIG_PRESETS.HISTOGRAM_PERCENTILES,\n    name: 'Percentiles',\n    panelOptions: {\n      type: 'percentiles',\n      description:\n        'Extracts specific percentile values from histogram data. Essential for SLA monitoring and performance analysis, showing how response times or other metrics behave for different user experience tiers.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'histogram_quantile', params: { percentiles: [99, 90, 50] } }],\n    },\n  },\n} as const;\n","import { CONFIG_PRESETS, type ConfigPresetId, type PanelConfigPreset } from './types';\n\nexport const DEFAULT_STATUS_UP_DOWN_PRESETS: Partial<Record<ConfigPresetId, PanelConfigPreset>> = {\n  [CONFIG_PRESETS.STATUS_UPDOWN_HISTORY]: {\n    id: CONFIG_PRESETS.STATUS_UPDOWN_HISTORY,\n    name: 'Status History (default)',\n    panelOptions: {\n      type: 'statushistory',\n      description:\n        'Displays binary status changes over time as colored bars (green=up, red=down). Perfect for monitoring service availability, health checks, or any binary state metrics. Shows patterns in uptime/downtime and helps identify recurring issues.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'min' }],\n    },\n  },\n  [CONFIG_PRESETS.STATUS_UPDOWN_STAT]: {\n    id: CONFIG_PRESETS.STATUS_UPDOWN_STAT,\n    name: 'Stat with latest value',\n    panelOptions: {\n      type: 'stat',\n      description:\n        'Shows the current status as a single value display with color coding (green=up, red=down). Ideal for dashboards where you need an at-a-glance view of service health or binary state. Uses minimum value to ensure any \"down\" status is highlighted.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'min' }],\n    },\n  },\n} as const;\n","import { CONFIG_PRESETS, type ConfigPresetId, type PanelConfigPreset } from './types';\n\nexport const DEFAULT_TIMESERIES_PRESETS: Partial<Record<ConfigPresetId, PanelConfigPreset>> = {\n  [CONFIG_PRESETS.TIMESERIES_AVG]: {\n    id: CONFIG_PRESETS.TIMESERIES_AVG,\n    name: 'Average (default)',\n    panelOptions: {\n      type: 'timeseries',\n      description:\n        'Shows the average value across all time series. Ideal for understanding typical behavior and smoothing out variations between different targets. For rate queries, displays average throughput per target.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'avg' }],\n    },\n  },\n  [CONFIG_PRESETS.TIMESERIES_SUM]: {\n    id: CONFIG_PRESETS.TIMESERIES_SUM,\n    name: 'Sum',\n    panelOptions: {\n      type: 'timeseries',\n      description:\n        'Aggregates total values across all time series. Perfect for measuring overall system throughput, total resource consumption, or fleet-wide capacity. Essential for rate queries showing total request rates.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'sum' }],\n    },\n  },\n  [CONFIG_PRESETS.TIMESERIES_STDDEV]: {\n    id: CONFIG_PRESETS.TIMESERIES_STDDEV,\n    name: 'Standard deviation',\n    panelOptions: {\n      type: 'timeseries',\n      description:\n        'Measures variability and consistency across time series. High values indicate uneven load distribution or inconsistent behavior. Useful for detecting load balancing issues or identifying when some targets behave differently.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'stddev' }],\n    },\n  },\n  [CONFIG_PRESETS.TIMESERIES_PERCENTILES]: {\n    id: CONFIG_PRESETS.TIMESERIES_PERCENTILES,\n    name: 'Percentiles',\n    panelOptions: {\n      type: 'percentiles',\n      description:\n        'Displays percentiles to show value distribution. Excellent for SLA monitoring and understanding outlier behavior without being skewed by extreme values. Critical for performance analysis.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'quantile', params: { percentiles: [99, 90, 50] } }],\n    },\n  },\n  [CONFIG_PRESETS.TIMESERIES_MIN_MAX]: {\n    id: CONFIG_PRESETS.TIMESERIES_MIN_MAX,\n    name: 'Minimum and maximum',\n    panelOptions: {\n      type: 'timeseries',\n      description:\n        'Shows the range between lowest and highest values across time series. Useful for capacity planning, identifying idle resources (min), and spotting overloaded targets (max). Helps detect outliers and resource utilization patterns.',\n    },\n    queryOptions: {\n      queries: [{ fn: 'min' }, { fn: 'max' }],\n    },\n  },\n} as const;\n\n// the presets are arranged so the first one is always the default one\n// this is why we define the default rate presets and we don't use DEFAULT_TIMESERIES_PRESETS in GmdVizPanel.tsx\nexport const DEFAULT_TIMESERIES_RATE_PRESETS: Partial<Record<ConfigPresetId, PanelConfigPreset>> = {\n  [CONFIG_PRESETS.TIMESERIES_SUM]: {\n    ...DEFAULT_TIMESERIES_PRESETS[CONFIG_PRESETS.TIMESERIES_SUM],\n    name: 'Sum (default)',\n    id: CONFIG_PRESETS.TIMESERIES_SUM,\n  } as PanelConfigPreset,\n  [CONFIG_PRESETS.TIMESERIES_AVG]: {\n    ...DEFAULT_TIMESERIES_PRESETS[CONFIG_PRESETS.TIMESERIES_AVG],\n    name: 'Average',\n  } as PanelConfigPreset,\n  [CONFIG_PRESETS.TIMESERIES_STDDEV]: DEFAULT_TIMESERIES_PRESETS[CONFIG_PRESETS.TIMESERIES_STDDEV] as PanelConfigPreset,\n  [CONFIG_PRESETS.TIMESERIES_PERCENTILES]: DEFAULT_TIMESERIES_PRESETS[\n    CONFIG_PRESETS.TIMESERIES_PERCENTILES\n  ] as PanelConfigPreset,\n  [CONFIG_PRESETS.TIMESERIES_MIN_MAX]: DEFAULT_TIMESERIES_PRESETS[\n    CONFIG_PRESETS.TIMESERIES_MIN_MAX\n  ] as PanelConfigPreset,\n} as const;\n","import { type DataTrail } from 'AppDataTrail/DataTrail';\nimport { getMetricType } from 'shared/GmdVizPanel/matchers/getMetricType';\n\nimport { DEFAULT_TIMESERIES_AGE_PRESETS } from './config-presets-ages';\nimport { DEFAULT_HISTOGRAMS_PRESETS } from './config-presets-histograms';\nimport { DEFAULT_STATUS_UP_DOWN_PRESETS } from './config-presets-status-updown';\nimport { DEFAULT_TIMESERIES_PRESETS, DEFAULT_TIMESERIES_RATE_PRESETS } from './config-presets-timeseries';\nimport { type PanelConfigPreset } from './types';\n\nexport async function getConfigPresetsForMetric(metric: string, dataTrail: DataTrail): Promise<PanelConfigPreset[]> {\n  const metricType = await getMetricType(metric, dataTrail);\n\n  switch (metricType) {\n    case 'counter':\n      return Object.values(DEFAULT_TIMESERIES_RATE_PRESETS);\n\n    case 'classic-histogram':\n    case 'native-histogram':\n      return Object.values(DEFAULT_HISTOGRAMS_PRESETS);\n\n    case 'age':\n      return [Object.values(DEFAULT_TIMESERIES_PRESETS)[0], ...Object.values(DEFAULT_TIMESERIES_AGE_PRESETS)];\n\n    case 'status-updown':\n      return Object.values(DEFAULT_STATUS_UP_DOWN_PRESETS);\n\n    default:\n      return Object.values(DEFAULT_TIMESERIES_PRESETS);\n  }\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\nimport { type PanelConfigPreset } from 'shared/GmdVizPanel/config/presets/types';\n\ninterface EventApplyPanelConfigPayload {\n  metric: string;\n  config: PanelConfigPreset;\n  restoreDefault?: boolean;\n}\n\nexport class EventApplyPanelConfig extends BusEventWithPayload<EventApplyPanelConfigPayload> {\n  public static readonly type = 'apply-panel-config';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\ninterface EventCancelConfigurePanelPayload {\n  metric: string;\n}\n\nexport class EventCancelConfigurePanel extends BusEventWithPayload<EventCancelConfigurePanelPayload> {\n  public static readonly type = 'cancel-configure-panel';\n}\n","export const AVAILABLE_PERCENTILES_OPTIONS = [\n  { value: 99, label: 'P99' },\n  { value: 95, label: 'P95' },\n  { value: 90, label: 'P90' },\n  { value: 75, label: 'P75' },\n  { value: 50, label: 'P50' },\n] as const;\n","import { css, cx } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Tooltip, useStyles2 } from '@grafana/ui';\nimport { cloneDeep } from 'lodash';\nimport React from 'react';\n\nimport { AVAILABLE_PERCENTILES_OPTIONS } from 'shared/GmdVizPanel/config/percentiles-options';\nimport { type ConfigPresetId } from 'shared/GmdVizPanel/config/presets/types';\nimport { type GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\n\ninterface WithConfigPanelOptionsState extends SceneObjectState {\n  presetId: ConfigPresetId;\n  body: GmdVizPanel;\n  isSelected: boolean;\n  onSelect: (presetId: ConfigPresetId) => void;\n  // currently, only percentiles are handheld by the app\n  // in the future, if we add more parameters, this code will have to be more generic\n  queryParams: {\n    show: boolean;\n    options: Array<{ value: any; label: string; checked: boolean }>;\n    type?: 'percentiles';\n  };\n}\n\nexport class WithConfigPanelOptions extends SceneObjectBase<WithConfigPanelOptionsState> {\n  constructor({\n    body,\n    presetId,\n    isSelected,\n    onSelect,\n  }: {\n    body: WithConfigPanelOptionsState['body'];\n    presetId: WithConfigPanelOptionsState['presetId'];\n    isSelected: WithConfigPanelOptionsState['isSelected'];\n    onSelect: WithConfigPanelOptionsState['onSelect'];\n  }) {\n    super({\n      presetId,\n      body,\n      isSelected,\n      onSelect,\n      queryParams: {\n        show: false,\n        options: [],\n      },\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.initPercentilesParams();\n  }\n\n  private initPercentilesParams() {\n    const queryConfig = this.state.body.state.queryConfig;\n\n    const percentiles = new Set(queryConfig.queries?.find((q) => q.params?.percentiles)?.params?.percentiles || []);\n\n    const options =\n      percentiles.size > 0\n        ? AVAILABLE_PERCENTILES_OPTIONS.map((o) => ({ ...o, checked: percentiles.has(o.value) }))\n        : [];\n\n    this.setState({\n      queryParams: {\n        show: options.length > 0,\n        options,\n      },\n    });\n  }\n\n  private onTogglePercentile = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { queryParams, body } = this.state;\n    const value = Number(event.target.value);\n\n    const option = queryParams.options.find((o) => o.value === value);\n    if (!option) {\n      return;\n    }\n\n    // update in situ, for simplicity (so we don't have to clone queryParams)\n    option.checked = !option.checked;\n\n    const checkedOptions = queryParams.options.filter((o) => o.checked);\n    if (!checkedOptions.length) {\n      return; // prevent invalid config\n    }\n\n    // we have to clone queryConfig so that the body state update below triggers\n    // a re-render of the panel (see GmdVizPanel.subscribeToEvents())\n    const newQueryConfig = cloneDeep(body.state.queryConfig);\n\n    newQueryConfig.queries?.some((q) => {\n      if (q.params?.percentiles) {\n        q.params.percentiles = checkedOptions.map((o) => o.value);\n        return true;\n      }\n      return false;\n    });\n\n    body.update({}, newQueryConfig);\n\n    this.setState({ queryParams });\n  };\n\n  private onClickPreset = () => {\n    this.state.onSelect(this.state.presetId);\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<WithConfigPanelOptions>) => {\n    const styles = useStyles2(getStyles);\n    const { body, isSelected, queryParams } = model.useState();\n\n    return (\n      <div\n        className={cx(styles.container, isSelected && styles.selected)}\n        onClick={!isSelected ? model.onClickPreset : undefined}\n      >\n        <div className={cx(styles.bodyAndParams)}>\n          <body.Component model={body} />\n\n          {queryParams.show && (\n            <div className={styles.paramsContainer}>\n              {queryParams.options.map((o) => (\n                <label key={o.value} className={cx('param', styles.param)} htmlFor={`checkbox-${o.value}`}>\n                  <input\n                    id={`checkbox-${o.value}`}\n                    type=\"checkbox\"\n                    value={o.value}\n                    checked={o.checked}\n                    onChange={model.onTogglePercentile}\n                  />\n                  <span>{o.label}</span>\n                </label>\n              ))}\n            </div>\n          )}\n        </div>\n        <div className={styles.radioContainer}>\n          <Tooltip\n            content={!isSelected ? 'Click to select this configuration' : 'Current configuration'}\n            placement=\"top\"\n          >\n            <input type=\"radio\" name=\"select-config\" checked={isSelected} />\n          </Tooltip>\n        </div>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      gap: ${theme.spacing(1)};\n      padding: ${theme.spacing(1, 1, 1.25, 1)};\n      border: 1px solid transparent;\n      transition: all 0.2s ease-in-out;\n\n      &:hover {\n        border: 1px solid ${theme.colors.border.weak};\n        border-color: ${theme.colors.primary.border};\n      }\n      &:focus {\n        border: 1px solid ${theme.colors.border.weak};\n        outline: 1px solid ${theme.colors.primary.main};\n        outline-offset: 1px;\n      }\n    `,\n    selected: css`\n      cursor: default;\n      border: 1px solid ${theme.colors.border.weak};\n      border-color: ${theme.colors.primary.border};\n    `,\n    bodyAndParams: css`\n      display: flex;\n      flex-direction: row;\n      gap: ${theme.spacing(1.25)};\n      width: 100%;\n    `,\n    paramsContainer: css`\n      margin-top: ${theme.spacing(1)};\n    `,\n    param: css`\n      display: flex;\n      align-items: center;\n      gap: ${theme.spacing(0.5)};\n      margin-bottom: ${theme.spacing(0.5)};\n      font-size: 12px;\n      cursor: pointer;\n\n      & [type='checkbox'] {\n        cursor: pointer;\n      }\n    `,\n    radioContainer: css`\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      & [type='radio'] {\n        cursor: pointer;\n      }\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport { DashboardCursorSync, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  behaviors,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Button, ConfirmModal, useStyles2 } from '@grafana/ui';\nimport { cloneDeep, omit } from 'lodash';\nimport React from 'react';\n\nimport { DataTrail } from 'AppDataTrail/DataTrail';\nimport { displayError } from 'MetricsReducer/helpers/displayStatus';\nimport { GRID_TEMPLATE_COLUMNS } from 'MetricsReducer/MetricsList/MetricsList';\nimport { getPreferredConfigForMetric } from 'shared/GmdVizPanel/config/getPreferredConfigForMetric';\nimport { PANEL_HEIGHT } from 'shared/GmdVizPanel/config/panel-heights';\nimport { getConfigPresetsForMetric } from 'shared/GmdVizPanel/config/presets/getConfigPresetsForMetric';\nimport { type PanelConfigPreset } from 'shared/GmdVizPanel/config/presets/types';\nimport { GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { PREF_KEYS } from 'shared/user-preferences/pref-keys';\nimport { userStorage } from 'shared/user-preferences/userStorage';\nimport { getTrailFor } from 'shared/utils/utils';\n\nimport { EventApplyPanelConfig } from './EventApplyPanelConfig';\nimport { EventCancelConfigurePanel } from './EventCancelConfigurePanel';\nimport { WithConfigPanelOptions } from './WithConfigPanelOptions';\n\ninterface ConfigurePanelFormState extends SceneObjectState {\n  metric: string;\n  $timeRange: SceneTimeRange;\n  controls: SceneObject[];\n  isConfirmModalOpen: boolean;\n  presets: PanelConfigPreset[];\n  selectedPresetId?: string;\n  body?: SceneCSSGridLayout;\n}\n\nexport class ConfigurePanelForm extends SceneObjectBase<ConfigurePanelFormState> {\n  constructor({ metric }: { metric: ConfigurePanelFormState['metric'] }) {\n    super({\n      metric,\n      $timeRange: new SceneTimeRange({}),\n      controls: [new SceneTimePicker({}), new SceneRefreshPicker({})],\n      isConfirmModalOpen: false,\n      presets: [],\n      selectedPresetId: undefined,\n      body: undefined,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.syncTimeRange();\n    this.buildBody();\n    this.subscribeToEvents();\n  }\n\n  private syncTimeRange() {\n    const metricScene = sceneGraph.getAncestor(this, DataTrail);\n    const { from, to, timeZone, value } = sceneGraph.getTimeRange(metricScene).state;\n    sceneGraph.getTimeRange(this).setState({ from, to, timeZone, value });\n  }\n\n  private async buildBody() {\n    const { metric } = this.state;\n    const prefConfig = getPreferredConfigForMetric(metric);\n    const presets = await getConfigPresetsForMetric(metric, getTrailFor(this));\n\n    // if not found in the user preferences, we use the first preset\n    // it always works because the presets are organized to always have the default one as the first element (see GmdVizPanel/config/presets)\n    const selectedPresetId = (prefConfig || presets[0]).id;\n\n    const body = new SceneCSSGridLayout({\n      templateColumns: GRID_TEMPLATE_COLUMNS,\n      autoRows: PANEL_HEIGHT.M + 46, // see css in WithConfigPanelOptions\n      isLazy: true,\n      $behaviors: [\n        new behaviors.CursorSync({\n          key: 'metricCrosshairSync',\n          sync: DashboardCursorSync.Crosshair,\n        }),\n      ],\n      children: presets.map((option, colorIndex) => {\n        return new SceneCSSGridItem({\n          body: new WithConfigPanelOptions({\n            presetId: option.id,\n            isSelected: selectedPresetId === option.id,\n            onSelect: (presetId) => this.onSelectPreset(presetId),\n            body: new GmdVizPanel({\n              key: `panel-${option.id}`,\n              // we make sure that, if the user has previously configured some query parameters (like percentiles),\n              // they are applied here\n              discardUserPrefs: option.id !== prefConfig?.id,\n              metric,\n              panelOptions: {\n                ...option.panelOptions,\n                title: option.name,\n                fixedColorIndex: colorIndex,\n                headerActions: () => [],\n              },\n              queryOptions: option.queryOptions,\n            }),\n          }),\n        });\n      }),\n    });\n\n    this.setState({ presets, selectedPresetId, body });\n  }\n\n  private onSelectPreset = (presetId: string) => {\n    for (const panel of sceneGraph.findDescendents(this, WithConfigPanelOptions)) {\n      panel.setState({ isSelected: panel.state.presetId === presetId });\n    }\n\n    this.setState({ selectedPresetId: presetId });\n  };\n\n  private subscribeToEvents() {\n    const { metric } = this.state;\n\n    this.subscribeToEvent(EventApplyPanelConfig, (event) => {\n      const { config, restoreDefault } = event.payload;\n      const userPrefs = userStorage.getItem(PREF_KEYS.METRIC_PREFS) || {};\n      const userPrefForMetric = userPrefs[metric];\n\n      if (restoreDefault && userPrefForMetric) {\n        delete userPrefs[metric].config;\n      } else {\n        userPrefs[metric] = { ...userPrefForMetric, config };\n      }\n\n      userStorage.setItem(PREF_KEYS.METRIC_PREFS, userPrefs);\n    });\n  }\n\n  private onClickRestoreDefault = () => {\n    this.setState({ isConfirmModalOpen: true });\n  };\n\n  private onClickConfirmRestoreDefault = () => {\n    const { metric, presets } = this.state;\n    const [defaultPreset] = presets;\n\n    if (!defaultPreset) {\n      displayError(new Error(`No default config found for metric ${metric}!`), [\n        'Cannot restore default configuration.',\n      ]);\n      return;\n    }\n\n    this.publishEvent(\n      new EventApplyPanelConfig({\n        metric,\n        config: ConfigurePanelForm.getPanelConfigFromPreset(defaultPreset),\n        restoreDefault: true,\n      }),\n      true\n    );\n\n    this.closeConfirmModal();\n  };\n\n  private closeConfirmModal = () => {\n    this.setState({ isConfirmModalOpen: false });\n  };\n\n  private onClickCancel = () => {\n    this.publishEvent(new EventCancelConfigurePanel({ metric: this.state.metric }), true);\n  };\n\n  private onClickApplyConfig = () => {\n    const { metric, presets, selectedPresetId } = this.state;\n\n    const presetPanel = sceneGraph.findByKeyAndType(this, `panel-${selectedPresetId}`, GmdVizPanel);\n    if (!presetPanel) {\n      throw new Error(`Panel not found for preset id=\"${selectedPresetId}\"!`);\n    }\n\n    const preset = presets.find((preset) => preset.id === selectedPresetId);\n    if (!preset) {\n      throw new Error(`Preset with id=\"${selectedPresetId}\" not found!`);\n    }\n\n    // we clone the preset to update its queries property to\n    // ensure that some customized parameters (like percentiles) are properly applied\n    const presetWithQueryParams: PanelConfigPreset = cloneDeep(preset);\n    presetWithQueryParams.queryOptions.queries = presetPanel.state.queryConfig.queries;\n\n    this.publishEvent(\n      new EventApplyPanelConfig({\n        metric,\n        config: ConfigurePanelForm.getPanelConfigFromPreset(presetWithQueryParams),\n      }),\n      true\n    );\n  };\n\n  private static getPanelConfigFromPreset(preset: PanelConfigPreset) {\n    return omit(preset, ['name', 'panelOptions.description']) as PanelConfigPreset;\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<ConfigurePanelForm>) => {\n    const styles = useStyles2(getStyles);\n    const { metric, body, controls, isConfirmModalOpen } = model.useState();\n\n    return (\n      <div>\n        <div className={styles.controlsContainer}>\n          <Button variant=\"secondary\" size=\"md\" onClick={model.onClickRestoreDefault}>\n            Restore default config\n          </Button>\n          <div className={styles.controls}>\n            {controls.map((control) => (\n              <control.Component key={control.state.key} model={control} />\n            ))}\n          </div>\n        </div>\n\n        <div className={styles.messageContainer}>\n          <p>Select a Prometheus function that will be used by default to display the {metric} metric.</p>\n        </div>\n\n        {body && <body.Component model={body} />}\n\n        <div className={styles.formButtonsContainer}>\n          <Button variant=\"primary\" size=\"md\" onClick={model.onClickApplyConfig}>\n            Apply\n          </Button>\n          <Button variant=\"secondary\" size=\"md\" onClick={model.onClickCancel}>\n            Cancel\n          </Button>\n        </div>\n\n        <ConfirmModal\n          isOpen={isConfirmModalOpen}\n          title=\"Restore default configuration\"\n          body={`Are you sure you want to restore the default configuration for the ${metric} metric?`}\n          confirmText=\"Restore\"\n          onConfirm={model.onClickConfirmRestoreDefault}\n          onDismiss={model.closeConfirmModal}\n        />\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    controlsContainer: css`\n      display: flex;\n      justify-content: flex-end;\n      gap: ${theme.spacing(1)};\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    messageContainer: css`\n      margin: ${theme.spacing(2.5, 0, 1, 0)};\n    `,\n    controls: css`\n      display: flex;\n    `,\n    formButtonsContainer: css`\n      display: flex;\n      justify-content: center;\n      gap: ${theme.spacing(2)};\n      position: sticky;\n      bottom: 0;\n      background: ${theme.colors.background.primary};\n      padding: ${theme.spacing(2, 0)};\n      border-top: 1px solid ${theme.colors.border.weak};\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { memo } from 'react';\n\ntype PluginLogoProps = {\n  size: 'small' | 'large';\n};\n\nexport const PluginLogo = memo(function PluginLogoComponent({ size }: PluginLogoProps) {\n  const styles = useStyles2(getStyles);\n  return <img className={cx(styles.logo, size)} src=\"public/plugins/grafana-metricsdrilldown-app/img/logo.svg\" />;\n});\n\nconst getStyles = () => ({\n  logo: css`\n    &.small {\n      width: 24px;\n      height: 24px;\n      margin-right: 4px;\n      position: relative;\n      top: -2px;\n    }\n\n    &.large {\n      width: 40px;\n      height: 40px;\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport { usePluginContext, type GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Dropdown, Menu, useStyles2 } from '@grafana/ui';\nimport React, { useEffect, useState } from 'react';\n\nimport { type PrometheusBuildInfo } from 'AppDataTrail/MetricDatasourceHelper/MetricDatasourceHelper';\nimport { logger } from 'shared/logger/logger';\nimport { GIT_COMMIT } from 'version';\n\nimport { PluginLogo } from './PluginLogo';\n\nconst pluginCommitSha: string = GIT_COMMIT;\nconst pluginCommitURL = `https://github.com/grafana/metrics-drilldown/commit/${pluginCommitSha}`;\n\nconst { buildInfo: grafanaBuildInfo } = config;\n\nfunction InfoMenuHeader() {\n  const styles = useStyles2(getStyles);\n\n  const {\n    meta: {\n      info: { version, updated },\n    },\n  } = usePluginContext() || { meta: { info: { version: '?.?.?', updated: '?' } } };\n\n  return (\n    <div className={styles.menuHeader}>\n      <h5>\n        <PluginLogo size=\"small\" />\n        Grafana Metrics Drilldown v{version}\n      </h5>\n      <div className={styles.subTitle}>Last update: {updated}</div>\n    </div>\n  );\n}\n\nfunction InfoMenu({ getPrometheusBuildInfo }: Readonly<PluginInfoProps>) {\n  const styles = useStyles2(getStyles);\n\n  const isDev = pluginCommitSha === 'dev';\n  const shortCommitSha = isDev ? pluginCommitSha : pluginCommitSha.slice(0, 8);\n\n  const [promBuildInfo, setPromBuildInfo] = useState<PrometheusBuildInfo>();\n  useEffect(() => {\n    getPrometheusBuildInfo()\n      .then((info) => setPromBuildInfo(info))\n      .catch((e) => {\n        logger.warn('Error while fetching Prometheus build info!');\n        logger.warn(e);\n        setPromBuildInfo(undefined);\n      });\n  }, [getPrometheusBuildInfo]);\n\n  return (\n    <Menu header={<InfoMenuHeader />}>\n      <Menu.Item\n        label={`Commit SHA: ${shortCommitSha}`}\n        icon=\"github\"\n        onClick={() => window.open(pluginCommitURL)}\n        disabled={isDev}\n      />\n      <Menu.Item\n        label=\"Changelog\"\n        icon=\"list-ul\"\n        onClick={() =>\n          window.open(\n            'https://github.com/grafana/metrics-drilldown/blob/main/CHANGELOG.md',\n            '_blank',\n            'noopener,noreferrer'\n          )\n        }\n      />\n      <Menu.Item\n        label=\"Contribute\"\n        icon=\"external-link-alt\"\n        onClick={() =>\n          window.open(\n            'https://github.com/grafana/metrics-drilldown/blob/main/docs/contributing.md',\n            '_blank',\n            'noopener,noreferrer'\n          )\n        }\n      />\n      <Menu.Item\n        label=\"Documentation\"\n        icon=\"document-info\"\n        onClick={() =>\n          window.open(\n            'https://grafana.com/docs/grafana/latest/explore/simplified-exploration/metrics',\n            '_blank',\n            'noopener,noreferrer'\n          )\n        }\n      />\n      <Menu.Item\n        label=\"Report an issue\"\n        icon=\"bug\"\n        onClick={() =>\n          window.open(\n            'https://github.com/grafana/metrics-drilldown/issues/new?template=bug_report.md',\n            '_blank',\n            'noopener,noreferrer'\n          )\n        }\n      />\n      <Menu.Divider />\n      <Menu.Item\n        label={`Grafana ${grafanaBuildInfo.edition} v${grafanaBuildInfo.version} (${grafanaBuildInfo.env})`}\n        icon=\"grafana\"\n        onClick={() =>\n          window.open(\n            `https://github.com/grafana/grafana/commit/${grafanaBuildInfo.commit}`,\n            '_blank',\n            'noopener,noreferrer'\n          )\n        }\n      />\n      {promBuildInfo && (\n        <Menu.Item\n          className={styles.promBuildInfo}\n          // eslint-disable-next-line sonarjs/no-nested-template-literals\n          label={`${promBuildInfo.application || '?'} ${promBuildInfo.version} ${\n            promBuildInfo.buildDate ? `(${promBuildInfo.buildDate})` : ''\n          }`}\n          icon=\"gf-prometheus\"\n          onClick={() =>\n            window.open(`${promBuildInfo.repository}/commit/${promBuildInfo.revision}`, '_blank', 'noopener,noreferrer')\n          }\n        />\n      )}\n    </Menu>\n  );\n}\n\ntype PluginInfoProps = { getPrometheusBuildInfo: () => Promise<PrometheusBuildInfo | undefined> };\n\nexport function PluginInfo({ getPrometheusBuildInfo }: Readonly<PluginInfoProps>) {\n  return (\n    <Dropdown overlay={() => <InfoMenu getPrometheusBuildInfo={getPrometheusBuildInfo} />} placement=\"bottom-end\">\n      <Button\n        icon=\"info-circle\"\n        variant=\"secondary\"\n        tooltip=\"Plugin info\"\n        tooltipPlacement=\"top\"\n        title=\"Plugin info\"\n        data-testid=\"plugin-info-button\"\n      />\n    </Dropdown>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    position: relative;\n    display: flex;\n    align-items: center;\n    width: 32px;\n    height: 32px;\n    line-height: 30px;\n    border: 1px solid ${theme.colors.border.weak};\n    border-radius: 2px;\n    border-left: 0;\n    color: ${theme.colors.text.primary};\n    background: ${theme.colors.background.secondary};\n\n    &:hover {\n      border-color: ${theme.colors.border.medium};\n      background-color: ${theme.colors.background.canvas};\n    }\n  `,\n  menuHeader: css`\n    padding: ${theme.spacing(0.5, 1)};\n    white-space: nowrap;\n  `,\n  subTitle: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n  promBuildInfo: css`\n    & svg {\n      color: #e5502a;\n    }\n  `,\n});\n","export const UI_TEXT = {\n  SEARCH: {\n    TITLE: 'Search metrics',\n  },\n  METRIC_SELECT_SCENE: {\n    OPEN_EXPLORE_LABEL: 'Open in explore',\n    COPY_URL_LABEL: 'Copy url',\n    BOOKMARK_LABEL: 'Bookmark',\n    SELECT_NEW_METRIC_TOOLTIP: 'Remove existing metric and choose a new metric',\n  },\n};\n","import { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { LinkButton, ToolbarButton } from '@grafana/ui';\nimport React from 'react';\n\nimport { createAppUrl } from '../../extensions/links';\nimport { UI_TEXT } from '../../shared/constants/ui';\nimport { MetricSelectedEvent } from '../../shared/shared';\nimport { reportExploreMetrics } from '../../shared/tracking/interactions';\nimport { getTrailFor, getUrlForTrail } from '../../shared/utils/utils';\n\ninterface SelectNewMetricButtonState extends SceneObjectState {}\n\nexport class SelectNewMetricButton extends SceneObjectBase<SelectNewMetricButtonState> {\n  constructor(state: Partial<SelectNewMetricButtonState> = {}) {\n    super({\n      ...state,\n    });\n  }\n\n  private onSelectNewMetric = () => {\n    const trail = getTrailFor(this);\n    reportExploreMetrics('selected_metric_action_clicked', { action: 'unselect' });\n    trail.publishEvent(new MetricSelectedEvent({}));\n  };\n\n  static readonly Component = ({ model }: SceneComponentProps<SelectNewMetricButton>) => {\n    const trail = getTrailFor(model);\n    const { embedded } = trail.useState();\n\n    // In embedded mode, show \"Metrics Drilldown\" button to open full app\n    if (embedded) {\n      return (\n        <LinkButton\n          href={createAppUrl(getUrlForTrail(trail))}\n          variant={'secondary'}\n          icon=\"arrow-right\"\n          tooltip=\"Open in Metrics Drilldown\"\n          onClick={() => reportExploreMetrics('selected_metric_action_clicked', { action: 'open_from_embedded' })}\n          data-testid=\"open-metrics-drilldown-button\"\n        >\n          Metrics Drilldown\n        </LinkButton>\n      );\n    }\n\n    // In non-embedded mode, show \"Select new metric\" button\n    return (\n      <ToolbarButton\n        variant={'canvas'}\n        tooltip={UI_TEXT.METRIC_SELECT_SCENE.SELECT_NEW_METRIC_TOOLTIP}\n        onClick={model.onSelectNewMetric}\n        data-testid=\"select-new-metric-button\"\n      >\n        Select new metric\n      </ToolbarButton>\n    );\n  };\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\ninterface EventForceSyncYAxisPayload {}\n\nexport class EventForceSyncYAxis extends BusEventWithPayload<EventForceSyncYAxisPayload> {\n  public static readonly type = 'force-sync-y-axis';\n}\n","import { BusEventWithPayload } from '@grafana/data';\n\ninterface EventResetSyncYAxisPayload {}\n\nexport class EventResetSyncYAxis extends BusEventWithPayload<EventResetSyncYAxisPayload> {\n  public static readonly type = 'reset-sync-y-axis';\n}\n","import { BusEventWithPayload, type DataFrame } from '@grafana/data';\n\ninterface EventTimeseriesDataReceivedPayload {\n  panelKey: string;\n  series: DataFrame[];\n}\n\nexport class EventTimeseriesDataReceived extends BusEventWithPayload<EventTimeseriesDataReceivedPayload> {\n  public static readonly type = 'timeseries-data-received';\n}\n","import { type DataFrame } from '@grafana/data';\nimport { sceneGraph, VizPanel, type SceneObject, type SceneObjectState } from '@grafana/scenes';\nimport { cloneDeep, merge } from 'lodash';\n\nimport { EventForceSyncYAxis } from '../events/EventForceSyncYAxis';\nimport { EventResetSyncYAxis } from '../events/EventResetSyncYAxis';\nimport { EventTimeseriesDataReceived } from '../events/EventTimeseriesDataReceived';\n\n/**\n * Synchronizes the Y-axis ranges across children timeseries panels by listening to data updates from publishTimeseriesData.\n * When new data arrives, it calculates the global min/max values and updates all children panels to use the same scale.\n */\nexport function syncYAxis() {\n  const syncYAxis = (vizPanelsParent: SceneObject<SceneObjectState>) => {\n    let max = Number.NEGATIVE_INFINITY;\n    let min = Number.POSITIVE_INFINITY;\n\n    // reset after timerange changes\n    const timeRangeSub = sceneGraph.getTimeRange(vizPanelsParent).subscribeToState(() => {\n      max = Number.NEGATIVE_INFINITY;\n      min = Number.POSITIVE_INFINITY;\n    });\n\n    // reset after receiving the EventResetSyncYAxis event (see SceneByFrameRepeater when filtering/sorting)\n    const resetSub = vizPanelsParent.subscribeToEvent(EventResetSyncYAxis, () => {\n      max = Number.NEGATIVE_INFINITY;\n      min = Number.POSITIVE_INFINITY;\n    });\n\n    // force new panels update after receiving the EventForceSyncYAxis event (see SceneByFrameRepeater when paginating)\n    const forceSub = vizPanelsParent.subscribeToEvent(EventForceSyncYAxis, () => {\n      let [newMax, newMin] = [max, min];\n\n      const nonSyncedPanels = findTimeseriesPanels(vizPanelsParent).filter((t) => {\n        const { fieldConfig, $data } = t.state;\n\n        if ('min' in fieldConfig.defaults && 'max' in fieldConfig.defaults) {\n          return false; // we assume it's already synced (see updateTimeseriesAxis below)\n        }\n\n        [newMax, newMin] = findNewMaxMin($data?.state.data?.series || [], newMax, newMin);\n        return true;\n      });\n\n      if (newMax === max && newMin === min) {\n        updateTimeseriesAxis(vizPanelsParent, max, min, nonSyncedPanels);\n      } else {\n        [max, min] = [newMax, newMin];\n        updateTimeseriesAxis(vizPanelsParent, newMax, newMin);\n      }\n    });\n\n    // new data coming...\n    const dataReceivedSub = vizPanelsParent.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      const { panelKey, series } = event.payload;\n      const [newMax, newMin] = findNewMaxMin(series, max, min);\n\n      // discard if no min/max have been determined or if they are the same (e.g. info metrics with a value of 1)\n      if (newMax !== newMin && newMax !== Number.NEGATIVE_INFINITY && newMin !== Number.POSITIVE_INFINITY) {\n        // new min or max?\n        if (newMax !== max || newMin !== min) {\n          [max, min] = [newMax, newMin];\n          // update all panels in the Scene\n          updateTimeseriesAxis(vizPanelsParent, newMax, newMin);\n        } else {\n          // update the new panel only\n          updateTimeseriesAxis(vizPanelsParent, max, min, [\n            sceneGraph.findByKeyAndType(vizPanelsParent, panelKey, VizPanel),\n          ]);\n        }\n      }\n    });\n\n    return () => {\n      dataReceivedSub.unsubscribe();\n      forceSub.unsubscribe();\n      resetSub.unsubscribe();\n      timeRangeSub.unsubscribe();\n    };\n  };\n\n  // we add an internal name to be able to detect which Scene objects have the behavior associated\n  // this is useful for a use case where we need to reset the behaviour in the Breakdown tab, after the user config is\n  // applied to all the panels present in the tab (check when the EventApplyPanelConfig event is received in DataTrail.tsx)\n  Object.defineProperty(syncYAxis, '__name__', {\n    value: 'syncYAxis',\n    configurable: false,\n    enumerable: true,\n    writable: false,\n  });\n\n  return syncYAxis;\n}\n\nfunction findNewMaxMin(series: DataFrame[], max: number, min: number) {\n  let [newMax, newMin] = [max, min];\n\n  for (const s of series || []) {\n    const values = s.fields[1]?.values.filter(Boolean);\n\n    if (values) {\n      newMax = Math.max(newMax, ...values);\n      newMin = Math.min(newMin, ...values);\n    }\n  }\n\n  return [newMax, newMin];\n}\n\nfunction findTimeseriesPanels(vizPanelsParent: SceneObject) {\n  // findAllObjects searches down the full scene graph\n  return sceneGraph.findAllObjects(\n    vizPanelsParent,\n    (o) => o instanceof VizPanel && o.state.pluginId === 'timeseries'\n  ) as VizPanel[];\n}\n\nfunction updateTimeseriesAxis(vizPanelsParent: SceneObject, max: number, min: number, panels?: VizPanel[]) {\n  for (const t of panels || findTimeseriesPanels(vizPanelsParent)) {\n    t.clearFieldConfigCache(); // required for the fieldConfig update below\n\n    t.setState({\n      fieldConfig: merge(cloneDeep(t.state.fieldConfig), { defaults: { min, max } }),\n    });\n  }\n}\n\nexport function resetYAxisSync(sceneObject: SceneObject) {\n  const objectsWithBehavior = sceneGraph.findAllObjects(\n    sceneObject,\n    (o) => Boolean(o.state.$behaviors?.some((b) => (b as any).__name__ === 'syncYAxis')) // see above\n  );\n\n  for (const o of objectsWithBehavior) {\n    o.publishEvent(new EventResetSyncYAxis({}), true);\n  }\n}\n","import { css } from '@emotion/css';\nimport { Combobox, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport React, { useMemo } from 'react';\n\nimport { noOp } from 'shared/utils/utils';\n\nexport type GroupByOptions = Array<{ label: string; value: string }>;\n\ninterface GroupBySelectorProps {\n  options: GroupByOptions;\n  value: string;\n  onChange: (label: string, ignore?: boolean) => void;\n  loading?: boolean;\n}\n\nconst DEFAULT_ALL_OPTION = {\n  label: 'All',\n  value: '$__all',\n};\n\nconst MAX_RADIOGROUP_OPTIONS = 4;\nconst COMBOBOX_PLACEHOLDER = 'Select a label to group by';\n\nexport function GroupBySelector(props: Readonly<GroupBySelectorProps>) {\n  const styles = useStyles2(getStyles);\n  const { loading, options, value, onChange } = props;\n  const processedOptions = useMemo(() => [DEFAULT_ALL_OPTION, ...options], [options]);\n\n  if (loading) {\n    // prevent layout changes after loading\n    return <Combobox options={[]} placeholder={COMBOBOX_PLACEHOLDER} onChange={noOp} />;\n  }\n\n  // as per Grafana Design System guidelines (https://grafana.com/developers/saga/components/radio-button-group/#when-to-use)\n  const useRadios = processedOptions.length <= MAX_RADIOGROUP_OPTIONS;\n\n  if (useRadios) {\n    return (\n      <RadioButtonGroup\n        data-testid=\"group-by-selector-radio-group\"\n        options={processedOptions}\n        value={value}\n        onChange={onChange}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.combobox}>\n      <Combobox\n        data-testid=\"group-by-selector-combobox\"\n        options={processedOptions}\n        value={value}\n        placeholder={COMBOBOX_PLACEHOLDER}\n        onChange={(option) => {\n          onChange(option ? option.value : DEFAULT_ALL_OPTION.value);\n        }}\n        isClearable\n      />\n    </div>\n  );\n}\n\nfunction getStyles() {\n  return {\n    combobox: css({\n      marginLeft: '4px',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { QueryVariable, sceneGraph, type MultiValueVariable, type SceneComponentProps } from '@grafana/scenes';\nimport { Field, useStyles2 } from '@grafana/ui';\nimport React, { useCallback } from 'react';\n\nimport { trailDS, VAR_FILTERS, VAR_GROUP_BY, VAR_METRIC_EXPR } from 'shared/shared';\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\nimport { isAdHocFiltersVariable } from 'shared/utils/utils.variables';\n\nimport { GroupBySelector, type GroupByOptions } from './GroupBySelector/GroupBySelector';\n\nconst ALL_VARIABLE_VALUE = '$__all';\n\nexport class GroupByVariable extends QueryVariable {\n  constructor() {\n    super({\n      name: VAR_GROUP_BY,\n      label: 'Group by',\n      datasource: trailDS,\n      includeAll: true,\n      defaultToAll: true,\n      query: `label_names(${VAR_METRIC_EXPR})`,\n      value: '',\n      text: '',\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.filterOptions();\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.value && newState.value !== prevState.value) {\n        reportExploreMetrics('groupby_label_changed', { label: String(newState.value) });\n      }\n\n      if (newState.options !== prevState.options && newState.options.find((o) => o.value === 'le')) {\n        this.filterOptions(newState.options);\n      }\n    });\n\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n\n    if (isAdHocFiltersVariable(filtersVariable)) {\n      filtersVariable.subscribeToState((newState, prevState) => {\n        if (newState.filterExpression !== prevState.filterExpression) {\n          this.changeValueTo(ALL_VARIABLE_VALUE);\n        }\n      });\n    }\n  }\n\n  private filterOptions(options = this.state.options) {\n    this.setState({ options: options.filter((o) => o.value !== 'le') });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<MultiValueVariable>) => {\n    const styles = useStyles2(getStyles);\n    const { options, value, loading } = model.useState();\n\n    const onChange = useCallback(\n      (selected: string, ignore?: boolean) => {\n        const next = selected === 'All' ? '$__all' : selected;\n        model.changeValueTo(next, undefined, !ignore);\n      },\n      [model]\n    );\n\n    return (\n      <Field label=\"By label\" data-testid=\"breakdown-label-selector\" className={styles.field}>\n        <GroupBySelector\n          options={options as GroupByOptions}\n          value={value as string}\n          onChange={onChange}\n          loading={loading}\n        />\n      </Field>\n    );\n  };\n}\n\nfunction getStyles() {\n  return {\n    field: css({\n      marginBottom: 0,\n    }),\n  };\n}\n","import { type GrafanaTheme2 } from '@grafana/data';\n\nimport { type DataTrail } from 'AppDataTrail/DataTrail';\n\nexport function getAppBackgroundColor(theme: GrafanaTheme2, trail?: DataTrail): string {\n  // If DataTrail is in embedded mode, always use primary background\n  if (trail?.state.embedded) {\n    return theme.colors.background.primary;\n  }\n\n  // Otherwise, use the standard theme-based logic\n  return theme.isLight ? theme.colors.background.primary : theme.colors.background.canvas;\n}\n","import { LoadingState } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneQueryRunner,\n  type CancelActivationHandler,\n  type VizPanel,\n  type VizPanelState,\n} from '@grafana/scenes';\n\nimport { MAX_SERIES_TO_RENDER_WHEN_GROUPED_BY } from '../buildTimeseriesPanel';\n\nconst DEFAULT_CTA_TEXT_IN_DESCRIPTION = `Click on \"Select\" on this panel to view a breakdown of all the label's values.`;\n\ntype Options = {\n  description?: {\n    ctaText?: string;\n  };\n};\n\nexport const addCardinalityInfo =\n  (options: Options = {}) =>\n  (panel: VizPanel): CancelActivationHandler | void => {\n    const [queryRunner] = sceneGraph.findDescendents(panel, SceneQueryRunner);\n    if (!queryRunner) {\n      return;\n    }\n\n    const originalTitle = panel.state.title;\n\n    const dataSub = queryRunner.subscribeToState((newState) => {\n      if (newState.data?.state !== LoadingState.Done) {\n        return;\n      }\n\n      const { series } = newState.data;\n      if (!series?.length) {\n        return;\n      }\n\n      const stateUpdate: Partial<VizPanelState> = {\n        title: `${originalTitle} (${series.length})`,\n      };\n\n      if (series.length > MAX_SERIES_TO_RENDER_WHEN_GROUPED_BY) {\n        stateUpdate.description = `Showing only ${MAX_SERIES_TO_RENDER_WHEN_GROUPED_BY} series out of ${series.length} to keep the data easy to read.`;\n        stateUpdate.description +=\n          typeof options.description?.ctaText === 'string'\n            ? ` ${options.description?.ctaText}`\n            : ` ${DEFAULT_CTA_TEXT_IN_DESCRIPTION}`;\n      }\n\n      panel.setState(stateUpdate);\n    });\n\n    return () => {\n      dataSub.unsubscribe();\n    };\n  };\n","import { LoadingState } from '@grafana/data';\nimport { SceneDataTransformer, sceneGraph, type SceneDataProvider, type VizPanel } from '@grafana/scenes';\n\nimport { EventTimeseriesDataReceived } from '../events/EventTimeseriesDataReceived';\n\n/**\n * Publishes timeseries data events when new data arrives from the VizPanel data provider.\n * These events are used by the syncYAxis behaviour to coordinate updates across multiple panels.\n */\nexport function publishTimeseriesData() {\n  return (vizPanel: VizPanel) => {\n    if (vizPanel.state.pluginId !== 'timeseries') {\n      return;\n    }\n\n    let $data = sceneGraph.getData(vizPanel);\n    if ($data instanceof SceneDataTransformer) {\n      $data = $data.state.$data as SceneDataProvider;\n    }\n    const { data } = $data.state;\n\n    if (data?.state === LoadingState.Done && data.series?.length) {\n      vizPanel.publishEvent(\n        new EventTimeseriesDataReceived({\n          panelKey: vizPanel.state.key as string,\n          series: data.series,\n        }),\n        true\n      );\n    }\n\n    const sub = ($data as SceneDataProvider).subscribeToState((newState, prevState) => {\n      if (\n        newState.data?.state === LoadingState.Done &&\n        newState.data.series?.length &&\n        newState.data.series !== prevState.data?.series\n      ) {\n        const dataFrameType = newState.data.series[0].meta?.type;\n        if (dataFrameType && !dataFrameType.startsWith('timeseries')) {\n          return;\n        }\n\n        vizPanel.publishEvent(\n          new EventTimeseriesDataReceived({\n            panelKey: vizPanel.state.key as string,\n            series: newState.data.series,\n          }),\n          true\n        );\n      }\n    });\n\n    return () => {\n      sub.unsubscribe();\n    };\n  };\n}\n","import { sceneGraph, SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\nimport React from 'react';\n\nimport { VAR_GROUP_BY } from 'shared/shared';\nimport { isQueryVariable } from 'shared/utils/utils.variables';\n\nimport { reportExploreMetrics } from '../../../shared/tracking/interactions';\n\ninterface SelectLabelActionState extends SceneObjectState {\n  label: string;\n}\n\nexport class SelectLabelAction extends SceneObjectBase<SelectLabelActionState> {\n  public onClick = () => {\n    const { label } = this.state;\n\n    reportExploreMetrics('breakdown_panel_selected', { label });\n\n    const groupByVariable = sceneGraph.lookupVariable(VAR_GROUP_BY, this)!;\n    if (!isQueryVariable(groupByVariable)) {\n      throw new Error('Group by variable not found');\n    }\n    groupByVariable.changeValueTo(label);\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<SelectLabelAction>) => {\n    return (\n      <Button variant=\"secondary\" size=\"sm\" fill=\"outline\" onClick={model.onClick}>\n        Select\n      </Button>\n    );\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, sceneUtils, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button, Icon, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { genBookmarkKey } from 'shared/bookmarks/genBookmarkKey';\nimport { type BookmarkFromStorage } from 'shared/bookmarks/useBookmarks';\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\nimport { PREF_KEYS } from 'shared/user-preferences/pref-keys';\nimport { userStorage } from 'shared/user-preferences/userStorage';\nimport { getTrailFor } from 'shared/utils/utils';\n\ninterface BookmarkHeaderActionState extends SceneObjectState {\n  metric: string;\n  isBookmarked: boolean;\n}\n\nexport class BookmarkHeaderAction extends SceneObjectBase<BookmarkHeaderActionState> {\n  constructor({ metric }: { metric: BookmarkHeaderActionState['metric'] }) {\n    super({\n      metric,\n      isBookmarked: false,\n    });\n\n    // Update bookmark state when component activates\n    this.addActivationHandler(() => {\n      const actualBookmarkState = this.isCurrentStateBookmarked();\n      this.setState({ isBookmarked: actualBookmarkState });\n    });\n  }\n\n  private isCurrentStateBookmarked(): boolean {\n    try {\n      const trail = getTrailFor(this);\n      const currentUrlState = sceneUtils.getUrlState(trail);\n      const currentKey = genBookmarkKey(currentUrlState);\n      const bookmarksFromStorage = userStorage.getItem(PREF_KEYS.BOOKMARKS) || [];\n      return bookmarksFromStorage.some((b: BookmarkFromStorage) => genBookmarkKey(b.urlValues) === currentKey);\n    } catch {\n      return false;\n    }\n  }\n\n  public onClick = () => {\n    const currentUrlState = sceneUtils.getUrlState(getTrailFor(this));\n    const currentKey = genBookmarkKey(currentUrlState);\n    const bookmarksFromStorage = userStorage.getItem(PREF_KEYS.BOOKMARKS) || [];\n    const isCurrentlyBookmarked = this.state.isBookmarked;\n\n    if (isCurrentlyBookmarked) {\n      // Remove bookmark\n      reportExploreMetrics('bookmark_changed', { action: 'toggled_off' });\n      const updatedBookmarks = bookmarksFromStorage.filter(\n        (b: BookmarkFromStorage) => genBookmarkKey(b.urlValues) !== currentKey\n      );\n      userStorage.setItem(PREF_KEYS.BOOKMARKS, updatedBookmarks);\n    } else {\n      // Add bookmark\n      reportExploreMetrics('bookmark_changed', { action: 'toggled_on' });\n      const newBookmark = {\n        urlValues: currentUrlState,\n        createdAt: Date.now(),\n      };\n      userStorage.setItem(PREF_KEYS.BOOKMARKS, [...bookmarksFromStorage, newBookmark]);\n    }\n\n    // Update state to trigger re-render\n    this.setState({ isBookmarked: !isCurrentlyBookmarked });\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<BookmarkHeaderAction>) => {\n    const styles = useStyles2(getStyles);\n    const { isBookmarked } = model.useState();\n\n    const label = isBookmarked ? 'Remove bookmark' : 'Add bookmark';\n\n    return (\n      <Button\n        className={cx(styles.bookmarkButton, isBookmarked && styles.active)}\n        aria-label={label}\n        variant=\"secondary\"\n        size=\"sm\"\n        fill=\"text\"\n        onClick={model.onClick}\n        icon={\n          isBookmarked ? (\n            <Icon name={'favorite'} type={'mono'} size={'lg'} />\n          ) : (\n            <Icon name={'star'} type={'default'} size={'lg'} />\n          )\n        }\n        tooltip={label}\n        tooltipPlacement=\"top\"\n        data-testid=\"bookmark-header-action\"\n      />\n    );\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  bookmarkButton: css`\n    margin: 0;\n    padding: 0;\n    margin-left: ${theme.spacing(1)};\n  `,\n  active: css`\n    color: ${theme.colors.text.maxContrast};\n  `,\n});\n","import { sceneGraph, SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { RadioButtonGroup } from '@grafana/ui';\nimport React from 'react';\n\nimport { GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { type PanelType } from 'shared/GmdVizPanel/types/available-panel-types';\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\n\nimport { EventPanelTypeChanged } from './EventPanelTypeChanged';\n\ninterface GmdVizPanelVariantSelectorState extends SceneObjectState {\n  metric: string;\n  options: Array<{\n    label: string;\n    value: PanelType;\n  }>;\n  currentPanelType?: PanelType;\n}\n\n// currently used only for histogram metrics\nexport class GmdVizPanelVariantSelector extends SceneObjectBase<GmdVizPanelVariantSelectorState> {\n  constructor({ metric }: { metric: GmdVizPanelVariantSelectorState['metric'] }) {\n    super({\n      metric,\n      options: [\n        { value: 'percentiles' as PanelType, label: 'percentiles' },\n        { value: 'heatmap' as PanelType, label: 'heatmap' },\n      ],\n      currentPanelType: undefined,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const vizPanel = sceneGraph.getAncestor(this, GmdVizPanel);\n\n    this.setState({\n      currentPanelType: vizPanel.state.panelConfig.type,\n    });\n\n    this._subs.add(\n      vizPanel.subscribeToState((newState, prevState) => {\n        if (newState.panelConfig.type !== prevState.panelConfig.type) {\n          this.setState({\n            currentPanelType: newState.panelConfig.type,\n          });\n        }\n      })\n    );\n  }\n\n  private onChange = (newPanelType: PanelType) => {\n    reportExploreMetrics('histogram_panel_type_changed', { panelType: newPanelType });\n\n    this.publishEvent(new EventPanelTypeChanged({ panelType: newPanelType }), true);\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<GmdVizPanelVariantSelector>) => {\n    const { options, currentPanelType } = model.useState();\n\n    if (!options.length) {\n      return null;\n    }\n\n    return <RadioButtonGroup size=\"sm\" options={options} value={currentPanelType} onChange={model.onChange} />;\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { DashboardCursorSync, type GrafanaTheme2 } from '@grafana/data';\nimport { useChromeHeaderHeight } from '@grafana/runtime';\nimport {\n  behaviors,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport { useResizeObserver } from '@react-aria/utils';\nimport React, { useRef } from 'react';\n\nimport { type DataTrail } from 'AppDataTrail/DataTrail';\nimport { BookmarkHeaderAction } from 'shared/GmdVizPanel/components/BookmarkHeaderAction';\nimport { ConfigurePanelAction } from 'shared/GmdVizPanel/components/ConfigurePanelAction';\nimport { GmdVizPanelVariantSelector } from 'shared/GmdVizPanel/components/GmdVizPanelVariantSelector';\nimport { PANEL_HEIGHT } from 'shared/GmdVizPanel/config/panel-heights';\nimport { QUERY_RESOLUTION } from 'shared/GmdVizPanel/config/query-resolutions';\nimport { GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { isClassicHistogramMetric } from 'shared/GmdVizPanel/matchers/isClassicHistogramMetric';\n\nimport { MetricActionBar } from './MetricActionBar';\nimport { PanelMenu } from './PanelMenu/PanelMenu';\nimport { getMetricDescription } from '../AppDataTrail/MetricDatasourceHelper/MetricDatasourceHelper';\nimport { getTrailFor } from '../shared/utils/utils';\nimport { getAppBackgroundColor } from '../shared/utils/utils.styles';\n\nconst MAIN_PANEL_MIN_HEIGHT = PANEL_HEIGHT.XL;\nconst MAIN_PANEL_MAX_HEIGHT = '40%';\n\nexport const TOPVIEW_PANEL_MENU_KEY = 'topview-panel-menu';\n\ninterface MetricGraphSceneState extends SceneObjectState {\n  metric: string;\n  topView: SceneFlexLayout;\n  selectedTab?: SceneObject;\n  actionBar: MetricActionBar;\n}\n\nexport class MetricGraphScene extends SceneObjectBase<MetricGraphSceneState> {\n  public constructor({ metric }: { metric: MetricGraphSceneState['metric'] }) {\n    super({\n      metric,\n      topView: new SceneFlexLayout({\n        direction: 'column',\n        $behaviors: [new behaviors.CursorSync({ key: 'metricCrosshairSync', sync: DashboardCursorSync.Crosshair })],\n        children: [\n          new SceneFlexItem({\n            minHeight: MAIN_PANEL_MIN_HEIGHT,\n            maxHeight: MAIN_PANEL_MAX_HEIGHT,\n            body: new GmdVizPanel({\n              metric,\n              panelOptions: {\n                height: PANEL_HEIGHT.XL,\n                headerActions: isClassicHistogramMetric(metric)\n                  ? () => [\n                      new GmdVizPanelVariantSelector({ metric }),\n                      new ConfigurePanelAction({ metric }),\n                      new BookmarkHeaderAction({ metric }),\n                    ]\n                  : () => [new ConfigurePanelAction({ metric }), new BookmarkHeaderAction({ metric })],\n                menu: () => new PanelMenu({ key: TOPVIEW_PANEL_MENU_KEY, labelName: metric }),\n              },\n              queryOptions: {\n                resolution: QUERY_RESOLUTION.HIGH,\n              },\n            }),\n          }),\n        ],\n      }),\n      selectedTab: undefined,\n      actionBar: new MetricActionBar({}),\n    });\n\n    this.addActivationHandler(() => {\n      this.onActivate();\n    });\n  }\n\n  private async onActivate() {\n    const { metric } = this.state;\n    const [gmdVizPanel] = sceneGraph.findDescendents(this, GmdVizPanel);\n\n    if (gmdVizPanel.state.histogramType === 'classic') {\n      return;\n    }\n\n    const sub = gmdVizPanel.subscribeToState(async (newState, prevState) => {\n      if (prevState.histogramType !== 'native' && newState.histogramType === 'native') {\n        sub.unsubscribe();\n\n        const metadata = await getTrailFor(this).getMetadataForMetric(metric);\n\n        gmdVizPanel.update(\n          {\n            description: getMetricDescription(metadata),\n            headerActions: () => [\n              new GmdVizPanelVariantSelector({ metric }),\n              new ConfigurePanelAction({ metric }),\n              new BookmarkHeaderAction({ metric }),\n            ],\n          },\n          {}\n        );\n      }\n    });\n\n    this._subs.add(sub);\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<MetricGraphScene>) => {\n    const { topView, selectedTab, actionBar } = model.useState();\n    const chromeHeaderHeight = useChromeHeaderHeight();\n    const trail = getTrailFor(model);\n    const styles = useStyles2(getStyles, trail.state.embedded ? 0 : chromeHeaderHeight ?? 0, trail);\n    const controlsContainer = useRef<HTMLDivElement>(null);\n\n    useResizeObserver({\n      ref: controlsContainer,\n      onResize: () => {\n        const element = controlsContainer.current;\n        if (element) {\n          requestAnimationFrame(() => {\n            updateActionBarHeight(controlsContainer);\n          });\n        }\n      },\n    });\n\n    return (\n      <div className={styles.container}>\n        <div className={cx(styles.topView, styles.nonSticky)} data-testid=\"top-view\">\n          <topView.Component model={topView} />\n        </div>\n        <div className={cx(styles.topView, styles.stickyTop)} id=\"action-bar-container\" ref={controlsContainer}>\n          <actionBar.Component model={actionBar} />\n        </div>\n        {selectedTab && (\n          <div data-testid=\"tab-content\" className={styles.tabContent}>\n            <selectedTab.Component model={selectedTab} />\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2, headerHeight: number, trail: DataTrail) {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      position: 'relative',\n      flexGrow: 1,\n    }),\n    tabContent: css({\n      height: '100%',\n    }),\n    topView: css({}),\n    stickyTop: css({\n      display: 'flex',\n      flexDirection: 'row',\n      background: getAppBackgroundColor(theme, trail),\n      position: 'sticky',\n      paddingTop: theme.spacing(1),\n      zIndex: 10,\n      // --app-controls-height is set dynamically by DataTrail component via ResizeObserver\n      // This ensures the main graph sticks below the app-controls in embedded mode\n      top: `calc(var(--app-controls-height, 0px) + ${headerHeight}px)`,\n    }),\n    nonSticky: css({\n      display: 'flex',\n      flexDirection: 'row',\n    }),\n  };\n}\n\nfunction updateActionBarHeight(controlsContainer: React.RefObject<HTMLDivElement>) {\n  const actionBar = controlsContainer.current;\n\n  if (!actionBar) {\n    return;\n  }\n\n  const { height } = actionBar.getBoundingClientRect();\n  document.documentElement.style.setProperty('--action-bar-height', `${height}px`);\n}\n","import { type PanelMenuItem } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { type DataTrail } from 'AppDataTrail/DataTrail';\nimport { PLUGIN_BASE_URL } from 'shared/constants/plugin';\n\nimport { displaySuccess } from '../../../MetricsReducer/helpers/displayStatus';\nimport { reportExploreMetrics } from '../../../shared/tracking/interactions';\nimport { getUrlForTrail } from '../../../shared/utils/utils';\n\nexport class CopyUrlAction {\n  static create(trail: DataTrail): PanelMenuItem {\n    return {\n      text: 'Copy URL',\n      iconClassName: 'copy',\n      onClick: () => {\n        if (navigator.clipboard) {\n          reportExploreMetrics('selected_metric_action_clicked', { action: 'share_url' });\n          const appUrl = config.appUrl.endsWith('/') ? config.appUrl.slice(0, -1) : config.appUrl;\n          const url = `${appUrl}${PLUGIN_BASE_URL}/${getUrlForTrail(trail)}`;\n          navigator.clipboard.writeText(url);\n          displaySuccess(['URL copied to clipboard']);\n        }\n      },\n    };\n  }\n}\n","import { type PanelMenuItem } from '@grafana/data';\nimport { getExploreURL, sceneGraph, VizPanel } from '@grafana/scenes';\n\nexport class ExploreAction {\n  static create(panelMenuInstance: any): PanelMenuItem {\n    let exploreUrl: Promise<string | undefined> | undefined;\n    \n    try {\n      const viz = sceneGraph.getAncestor(panelMenuInstance, VizPanel);\n      const panelData = sceneGraph.getData(viz).state.data;\n      if (!panelData) {\n        throw new Error('Cannot get link to explore, no panel data found');\n      }\n      // 'panelMenuInstance' scene object contain the variable for the metric name which is correctly interpolated into the explore url\n      // when used in the metric select scene case,\n      // this will get the explore url with interpolated variables and include the labels __ignore_usage__, this is a known issue\n      // in the metric scene we do not get use the __ignore_usage__ labels in the explore url\n      exploreUrl = getExploreURL(panelData, panelMenuInstance, panelData.timeRange, (query) => {\n        // remove __ignore_usage__=\"\" from the query\n        if ('expr' in query && typeof query.expr === 'string' && query.expr.includes('__ignore_usage__')) {\n          return {\n            ...query,\n            expr: query.expr.replace(/,?__ignore_usage__=\"\",?/, ''), // also remove leading/trailing comma if present\n          };\n        }\n\n        return query;\n      });\n    } catch {}\n\n    return {\n      text: 'Explore',\n      iconClassName: 'compass',\n      onClick: () => exploreUrl?.then((url) => url && window.open(url, '_blank')),\n      shortcut: 'p x',\n    };\n  }\n}\n","import { type SceneObject, type SceneQueryRunner } from '@grafana/scenes';\n\nexport function isSceneQueryRunner(input: SceneObject | null | undefined): input is SceneQueryRunner {\n  return typeof input !== 'undefined' && input !== null && 'state' in input && 'runQueries' in input;\n}\n","import { type DataFrame, type FieldConfig, type FieldConfigSource, type TimeRange } from '@grafana/data';\nimport { usePluginLinks } from '@grafana/runtime';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  VizPanel,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { type DataQuery, type DataSourceRef } from '@grafana/schema';\nimport { IconButton } from '@grafana/ui';\nimport React from 'react';\n\nimport MimirLogo from 'img/logo.svg';\nimport { findObjectOfType } from 'shared/utils/utils';\n\nimport pluginJson from '../../../../plugin.json';\nimport { VAR_DATASOURCE_EXPR } from '../../../../shared/shared';\nimport { isSceneQueryRunner } from '../../../../shared/utils/utils.queries';\n\nexport const investigationsPluginId = 'grafana-investigations-app';\nexport const extensionPointId = `${pluginJson.id}/investigation/v1`;\nexport const addToExplorationsButtonLabel = 'add panel to exploration';\n\ninterface AddToExplorationButtonState extends SceneObjectState {\n  frame?: DataFrame;\n  dsUid?: string;\n  labelName?: string;\n  fieldName?: string;\n  context?: ExtensionContext;\n\n  queries: DataQuery[];\n  fieldConfig?: FieldConfigSource;\n}\n\ninterface ExtensionContext {\n  timeRange: TimeRange;\n  queries: DataQuery[];\n  datasource: DataSourceRef;\n  origin: string;\n  url: string;\n  type: string;\n  title: string;\n  id: string;\n  logoPath: string;\n  note?: string;\n  drillDownLabel?: string;\n}\n\nexport class AddToExplorationButton extends SceneObjectBase<AddToExplorationButtonState> {\n  constructor(state: Omit<AddToExplorationButtonState, 'queries'>) {\n    super({ ...state, queries: [] });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate = () => {\n    this.subscribeToState(() => {\n      this.getQueries();\n      this.getContext();\n    });\n\n    const datasourceUid = sceneGraph.interpolate(this, VAR_DATASOURCE_EXPR);\n    this.setState({ dsUid: datasourceUid });\n  };\n\n  private readonly getQueries = () => {\n    const data = sceneGraph.getData(this);\n    const queryRunner = sceneGraph.findObject(data, isSceneQueryRunner);\n\n    if (isSceneQueryRunner(queryRunner)) {\n      const filter = this.state.frame ? getFilter(this.state.frame) : null;\n      const queries = queryRunner.state.queries.map((q) => ({\n        ...q,\n        expr: sceneGraph.interpolate(queryRunner, q.expr),\n        legendFormat: filter?.name ? `{{ ${filter.name} }}` : sceneGraph.interpolate(queryRunner, q.legendFormat),\n      }));\n\n      if (JSON.stringify(queries) !== JSON.stringify(this.state.queries)) {\n        this.setState({ queries });\n      }\n    }\n  };\n\n  private getPanelConfigAndDataFrames() {\n    const panel = findObjectOfType(this, (o) => o instanceof VizPanel, VizPanel);\n    const data = sceneGraph.getData(this);\n\n    return {\n      fieldConfig: panel?.state.fieldConfig,\n      frames: data?.state.data?.series,\n    };\n  }\n\n  private readonly updateFieldConfigOverrides = () => {\n    const { fieldConfig, frames } = this.getPanelConfigAndDataFrames();\n\n    if (!fieldConfig || !frames?.length) {\n      return undefined;\n    }\n\n    for (const frame of frames) {\n      for (const field of frame.fields) {\n        const configKeys = Object.keys(field.config);\n        const properties = configKeys.map((key) => ({\n          id: key,\n          value: field.config[key as keyof FieldConfig],\n        }));\n\n        // check if the override already exists\n        const existingOverride = fieldConfig.overrides.find(\n          (o) =>\n            o.matcher.options === (field.config.displayNameFromDS ?? field.config.displayName ?? field.name) &&\n            o.matcher.id === 'byName'\n        );\n\n        if (!existingOverride) {\n          // add as first override\n          fieldConfig.overrides.unshift({\n            matcher: {\n              id: 'byName',\n              options: field.config.displayNameFromDS ?? field.config.displayName ?? field.name,\n            },\n            properties,\n          });\n        }\n\n        if (existingOverride && JSON.stringify(existingOverride.properties) !== JSON.stringify(properties)) {\n          existingOverride.properties = properties;\n        }\n      }\n    }\n\n    return fieldConfig;\n  };\n\n  private readonly getContext = () => {\n    const fieldConfig = this.updateFieldConfigOverrides();\n    const { queries, dsUid, labelName, fieldName } = this.state;\n    const timeRange = sceneGraph.getTimeRange(this);\n\n    if (!timeRange || !queries || !dsUid) {\n      return;\n    }\n    const ctx = {\n      origin: 'Metrics Drilldown',\n      type: 'timeseries',\n      queries,\n      timeRange: { ...timeRange.state.value },\n      datasource: { uid: dsUid },\n      url: window.location.href,\n      id: `${JSON.stringify(queries)}${labelName}${fieldName}`,\n      title: labelName + (fieldName ? ` > ${fieldName}` : ''),\n      logoPath: MimirLogo,\n      drillDownLabel: fieldName,\n      fieldConfig,\n    };\n    if (JSON.stringify(ctx) !== JSON.stringify(this.state.context)) {\n      this.setState({ context: ctx });\n    }\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<AddToExplorationButton>) => {\n    const { context } = model.useState();\n    const { links } = usePluginLinks({ extensionPointId, context, limitPerPlugin: 1 });\n    const link = links.find((link) => link.pluginId === investigationsPluginId);\n\n    if (!link) {\n      return null;\n    }\n\n    return (\n      <IconButton\n        tooltip={link.description}\n        aria-label={addToExplorationsButtonLabel} // this is overriden by the `tooltip`\n        key={link.id}\n        name={link.icon ?? 'panel-add'}\n        onClick={(e) => {\n          if (link.onClick) {\n            link.onClick(e);\n          }\n        }}\n      />\n    );\n  };\n}\n\nconst getFilter = (frame: DataFrame) => {\n  const filterNameAndValueObj = frame.fields[1]?.labels ?? {};\n  const keys = Object.keys(filterNameAndValueObj);\n  if (keys.length !== 1) {\n    return;\n  }\n  const name = keys[0];\n  return { name, value: filterNameAndValueObj[name] };\n};\n","import { type DataFrame, type PanelMenuItem, type PluginExtensionLink } from '@grafana/data';\nimport { config, getObservablePluginLinks } from '@grafana/runtime';\nimport { firstValueFrom } from 'rxjs';\n\nimport { logger } from 'shared/logger/logger';\n\nimport { AddToExplorationButton, extensionPointId } from './AddToExplorationsButton';\n\nconst ADD_TO_INVESTIGATION_MENU_TEXT = 'Add to investigation';\nconst ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT = 'investigations_divider'; // Text won't be visible\nconst ADD_TO_INVESTIGATION_MENU_GROUP_TEXT = 'Investigations';\n\nexport class InvestigationAction {\n  static async create(\n    panelMenuInstance: any,\n    labelName?: string,\n    fieldName?: string,\n    frame?: DataFrame\n  ): Promise<PanelMenuItem[]> {\n    const addToExplorationsButton = new AddToExplorationButton({\n      labelName,\n      fieldName,\n      frame,\n    });\n\n    // Attach the button to the panel menu instance to provide scene graph context\n    panelMenuInstance.setState({\n      explorationsButton: addToExplorationsButton,\n    });\n\n    // Activate the button so it can access scene graph\n    if (panelMenuInstance.state.addExplorationsLink) {\n      addToExplorationsButton.activate();\n    }\n\n    const link = await getInvestigationLink(addToExplorationsButton);\n    const items: PanelMenuItem[] = [];\n\n    if (link) {\n      items.push(\n        {\n          text: ADD_TO_INVESTIGATION_MENU_DIVIDER_TEXT,\n          type: 'divider',\n        },\n        {\n          text: ADD_TO_INVESTIGATION_MENU_GROUP_TEXT,\n          type: 'group',\n        },\n        {\n          text: ADD_TO_INVESTIGATION_MENU_TEXT,\n          iconClassName: 'plus-square',\n          onClick: (e) => link.onClick && link.onClick(e),\n        }\n      );\n    }\n\n    return items;\n  }\n}\n\nconst getInvestigationLink = async (addToExplorations: AddToExplorationButton) => {\n  const context = addToExplorations.state.context;\n\n  // Check if we're running on Grafana v11\n  if (config.buildInfo.version.startsWith('11.')) {\n    try {\n      const runtime = await import('@grafana/runtime');\n      const getPluginLinkExtensions = (runtime as any).getPluginLinkExtensions;\n      if (getPluginLinkExtensions !== undefined) {\n        const links = getPluginLinkExtensions({\n          extensionPointId,\n          context,\n        });\n\n        return links.extensions[0];\n      }\n    } catch (e) {\n      // Ignore import error and fall through to v12 implementation\n      logger.error(e as Error, { message: 'Error importing getPluginLinkExtensions' });\n    }\n  }\n\n  // `getObservablePluginLinks` is introduced in Grafana v12\n  if (typeof getObservablePluginLinks === 'function') {\n    const links: PluginExtensionLink[] = await firstValueFrom(\n      getObservablePluginLinks({\n        extensionPointId,\n        context,\n      })\n    );\n\n    return links[0];\n  }\n\n  return undefined;\n};\n","import { type DataFrame, type PanelMenuItem } from '@grafana/data';\nimport { SceneObjectBase, VizPanelMenu, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport React from 'react';\n\nimport { getTrailFor } from '../../shared/utils/utils';\nimport { TOPVIEW_PANEL_MENU_KEY } from '../MetricGraphScene';\nimport { CopyUrlAction } from './actions/CopyUrlAction';\nimport { ExploreAction } from './actions/ExploreAction';\nimport { type AddToExplorationButton } from './actions/investigation/AddToExplorationsButton';\nimport { InvestigationAction } from './actions/investigation/InvestigationAction';\n\ninterface PanelMenuState extends SceneObjectState {\n  body?: VizPanelMenu;\n  frame?: DataFrame;\n  labelName?: string;\n  fieldName?: string;\n  addExplorationsLink?: boolean;\n  explorationsButton?: AddToExplorationButton;\n}\n\n/**\n * @todo the VizPanelMenu interface is overly restrictive, doesn't allow any member functions on this class, so everything is currently inlined\n */\nexport class PanelMenu extends SceneObjectBase<PanelMenuState> implements VizPanelMenu {\n  constructor(state: Omit<PanelMenuState, 'body'>) {\n    super({\n      ...state,\n      addExplorationsLink: state.addExplorationsLink ?? true,\n      body: new VizPanelMenu({}),\n    });\n\n    this.addActivationHandler(() => {\n      // Navigation group of options (all panels)\n      const items: PanelMenuItem[] = [\n        {\n          text: 'Navigation',\n          type: 'group',\n        },\n        ExploreAction.create(this),\n      ];\n\n      const isMainGraphPanel = this.state.key === TOPVIEW_PANEL_MENU_KEY;\n      if (isMainGraphPanel) {\n        // Only add Copy URL to the main metric graph panel\n        items.push(\n          {\n            text: 'Actions',\n            type: 'group',\n          },\n          CopyUrlAction.create(getTrailFor(this))\n        );\n      }\n\n      // Add investigation items if enabled (async)\n      if (this.state.addExplorationsLink) {\n        InvestigationAction.create(this, this.state.labelName, this.state.fieldName, this.state.frame).then(\n          (investigationItems) => {\n            if (investigationItems.length > 0) {\n              this.state.body?.setItems([...items, ...investigationItems]);\n            }\n          }\n        );\n      }\n\n      this.state.body?.setState({ items });\n    });\n  }\n\n  addItem(item: PanelMenuItem): void {\n    this.state.body?.addItem(item);\n  }\n\n  setItems(items: PanelMenuItem[]): void {\n    this.state.body?.setItems(items);\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<PanelMenu>) => {\n    const { body } = model.useState();\n    return <div data-testid=\"panel-menu\">{body && <body.Component model={body} />}</div>;\n  };\n}\n","import { css } from '@emotion/css';\nimport { DashboardCursorSync, type GrafanaTheme2 } from '@grafana/data';\nimport {\n  behaviors,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneReactObject,\n  sceneUtils,\n  VizPanel,\n  type MultiValueVariable,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Field, Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { InlineBanner } from 'App/InlineBanner';\nimport { SceneByVariableRepeater } from 'MetricsReducer/components/SceneByVariableRepeater';\nimport { ShowMoreButton } from 'MetricsReducer/components/ShowMoreButton';\nimport { LayoutSwitcher, LayoutType, type LayoutSwitcherState } from 'MetricsReducer/list-controls/LayoutSwitcher';\nimport { GRID_TEMPLATE_COLUMNS, GRID_TEMPLATE_ROWS } from 'MetricsReducer/MetricsList/MetricsList';\nimport { PANEL_HEIGHT } from 'shared/GmdVizPanel/config/panel-heights';\nimport { QUERY_RESOLUTION } from 'shared/GmdVizPanel/config/query-resolutions';\nimport { addCardinalityInfo } from 'shared/GmdVizPanel/types/timeseries/behaviors/addCardinalityInfo';\nimport { buildTimeseriesPanel } from 'shared/GmdVizPanel/types/timeseries/buildTimeseriesPanel';\nimport { VAR_GROUP_BY } from 'shared/shared';\n\nimport { publishTimeseriesData } from './behaviors/publishTimeseriesData';\nimport { syncYAxis } from './behaviors/syncYAxis';\nimport { EventTimeseriesDataReceived } from './events/EventTimeseriesDataReceived';\nimport { SelectLabelAction } from './SelectLabelAction';\nimport { PanelMenu } from '../../PanelMenu/PanelMenu';\n\ninterface MetricLabelsListState extends SceneObjectState {\n  metric: string;\n  layoutSwitcher: LayoutSwitcher;\n  body: SceneByVariableRepeater;\n}\n\nexport class MetricLabelsList extends SceneObjectBase<MetricLabelsListState> {\n  constructor({ metric }: { metric: MetricLabelsListState['metric'] }) {\n    super({\n      key: 'metric-labels-list',\n      metric,\n      layoutSwitcher: new LayoutSwitcher({}),\n      body: new SceneByVariableRepeater({\n        variableName: VAR_GROUP_BY,\n        initialPageSize: 60,\n        pageSizeIncrement: 9,\n        body: new SceneCSSGridLayout({\n          children: [],\n          isLazy: true,\n          templateColumns: GRID_TEMPLATE_COLUMNS,\n          autoRows: PANEL_HEIGHT.M,\n          $behaviors: [\n            new behaviors.CursorSync({\n              key: 'metricCrosshairSync',\n              sync: DashboardCursorSync.Crosshair,\n            }),\n            syncYAxis(),\n          ],\n        }),\n        getLayoutLoading: () =>\n          new SceneReactObject({\n            reactNode: <Spinner inline />,\n          }),\n        getLayoutEmpty: () =>\n          new SceneReactObject({\n            reactNode: (\n              <InlineBanner title=\"\" severity=\"info\">\n                No labels found for the current filters and time range.\n              </InlineBanner>\n            ),\n          }),\n        getLayoutError: (error: Error) =>\n          new SceneReactObject({\n            reactNode: <InlineBanner severity=\"error\" title=\"Error while loading labels!\" error={error} />,\n          }),\n        getLayoutChild: (option, labelIndex) => {\n          const label = option.value as string;\n\n          return new SceneCSSGridItem({\n            body: buildTimeseriesPanel({\n              metric,\n              panelConfig: {\n                type: 'timeseries',\n                height: PANEL_HEIGHT.M,\n                title: label,\n                fixedColorIndex: labelIndex,\n                behaviors: [\n                  // publishTimeseriesData is required for the syncYAxis behavior (e.g. see MetricLabelsList)\n                  publishTimeseriesData(),\n                  addCardinalityInfo(),\n                ],\n                headerActions: () => [new SelectLabelAction({ label })],\n                menu: () => new PanelMenu({ labelName: label }),\n                legend: { placement: 'bottom' },\n              },\n              queryConfig: {\n                resolution: QUERY_RESOLUTION.MEDIUM,\n                groupBy: label,\n                labelMatchers: [],\n                addIgnoreUsageFilter: true,\n              },\n            }),\n          });\n        },\n      }),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.subscribeToLayoutChange();\n    this.subscribeToEvents();\n  }\n\n  private subscribeToEvents() {\n    const actionsLookup = new Map<string, SceneObject[]>();\n\n    this.subscribeToEvent(EventTimeseriesDataReceived, (event) => {\n      const { panelKey, series } = event.payload;\n      const vizPanel = sceneGraph.findByKeyAndType(this, panelKey, VizPanel);\n\n      if (series.length === 1) {\n        if (!actionsLookup.has(panelKey)) {\n          actionsLookup.set(panelKey, (vizPanel.state.headerActions as SceneObject[]) || []);\n        }\n\n        vizPanel.setState({ headerActions: [] });\n        return;\n      }\n\n      if (actionsLookup.has(panelKey)) {\n        vizPanel.setState({ headerActions: actionsLookup.get(panelKey) });\n      }\n    });\n  }\n\n  private subscribeToLayoutChange() {\n    const layoutSwitcher = sceneGraph.findByKeyAndType(this, 'layout-switcher', LayoutSwitcher);\n    const body = this.state.body.state.body as SceneCSSGridLayout;\n\n    const onChangeState = (newState: LayoutSwitcherState, prevState?: LayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        body.setState({\n          templateColumns: newState.layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS,\n        });\n      }\n    };\n\n    // We ensure the proper layout when landing on the page:\n    // because MetricLabelsList is created dynamically when LabelBreakdownScene updates its body,\n    // LayoutSwitcher is not properly connected to the URL synchronization system\n    sceneUtils.syncStateFromSearchParams(layoutSwitcher, new URLSearchParams(window.location.search));\n    onChangeState(layoutSwitcher.state);\n\n    this._subs.add(layoutSwitcher.subscribeToState(onChangeState));\n  }\n\n  public Controls({ model }: { model: MetricLabelsList }) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { layoutSwitcher } = model.useState();\n\n    return (\n      <Field label=\"View\" className={styles.field}>\n        <layoutSwitcher.Component model={layoutSwitcher} />\n      </Field>\n    );\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<MetricLabelsList>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    const variable = sceneGraph.lookupVariable(VAR_GROUP_BY, model) as MultiValueVariable;\n    const { loading, error } = variable.useState();\n\n    const batchSizes = body.useSizes();\n    const shouldDisplayShowMoreButton =\n      !loading && !error && batchSizes.total > 0 && batchSizes.current < batchSizes.total;\n\n    const onClickShowMore = () => {\n      body.increaseBatchSize();\n    };\n\n    return (\n      <div data-testid=\"labels-list\">\n        <div className={styles.container}>\n          <body.Component model={body} />\n        </div>\n        {shouldDisplayShowMoreButton && (\n          <div className={styles.footer}>\n            <ShowMoreButton label=\"label\" batchSizes={batchSizes} onClick={onClickShowMore} />\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({ width: '100%' }),\n    field: css({\n      marginBottom: 0,\n    }),\n    footer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: theme.spacing(4),\n\n      '& button': {\n        height: '40px',\n        borderRadius: '8px',\n      },\n    }),\n  };\n}\n","import { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Button } from '@grafana/ui';\nimport React from 'react';\n\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\nimport { getTrailFor } from 'shared/utils/utils';\n\ninterface AddToFiltersGraphActionState extends SceneObjectState {\n  labelName: string;\n  labelValue: string;\n}\n\nexport class AddToFiltersGraphAction extends SceneObjectBase<AddToFiltersGraphActionState> {\n  public onClick = () => {\n    const { labelName, labelValue } = this.state;\n\n    reportExploreMetrics('label_filter_changed', { label: labelName, action: 'added', cause: 'breakdown' });\n\n    getTrailFor(this).addFilterWithoutReportingInteraction({\n      key: labelName,\n      operator: '=',\n      value: labelValue,\n    });\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<AddToFiltersGraphAction>) => {\n    return (\n      <Button variant=\"secondary\" size=\"sm\" fill=\"outline\" onClick={model.onClick}>\n        Add to filters\n      </Button>\n    );\n  };\n}\n","import { type DataFrame } from '@grafana/data';\n\nexport function getLabelValueFromDataFrame(frame: DataFrame) {\n  const labels = frame.fields[1]?.labels || {};\n\n  const keys = Object.keys(labels);\n  if (keys.length === 0) {\n    return '<unspecified>';\n  }\n\n  return labels[keys[0]];\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { SceneObjectBase, type SceneComponentProps, type SceneObjectState } from '@grafana/scenes';\nimport { Combobox, Field, IconButton, useStyles2, type ComboboxOption } from '@grafana/ui';\nimport React from 'react';\n\nimport { type SortSeriesByOption } from 'shared/services/sorting';\nimport { PREF_KEYS } from 'shared/user-preferences/pref-keys';\nimport { userStorage } from 'shared/user-preferences/userStorage';\n\nexport interface SortBySelectorState extends SceneObjectState {\n  target: 'fields' | 'labels';\n  options: Array<ComboboxOption<SortSeriesByOption>>;\n  value: ComboboxOption<SortSeriesByOption>;\n}\n\nexport class SortBySelector extends SceneObjectBase<SortBySelectorState> {\n  static readonly DEFAULT_OPTIONS = [\n    {\n      value: 'outliers' as SortSeriesByOption,\n      label: 'Outlying series',\n      description: 'Prioritizes values that show distinct behavior from others within the same label',\n    },\n    {\n      value: 'alphabetical' as SortSeriesByOption,\n      label: 'Name [A-Z]',\n      description: 'Alphabetical order',\n    },\n    {\n      value: 'alphabetical-reversed' as SortSeriesByOption,\n      label: 'Name [Z-A]',\n      description: 'Reversed alphabetical order',\n    },\n  ];\n\n  constructor(state: Pick<SortBySelectorState, 'target'>) {\n    const sortBy = userStorage.getItem(PREF_KEYS.BREAKDOWN_SORTBY);\n\n    super({\n      key: 'breakdown-sort-by',\n      target: state.target,\n      options: SortBySelector.DEFAULT_OPTIONS,\n      value:\n        (sortBy && SortBySelector.DEFAULT_OPTIONS.find((o) => o.value === sortBy)) || SortBySelector.DEFAULT_OPTIONS[0],\n    });\n  }\n\n  private onChange = (option: ComboboxOption<SortSeriesByOption>) => {\n    this.setState({ value: option });\n    userStorage.setItem(PREF_KEYS.BREAKDOWN_SORTBY, option.value);\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<SortBySelector>) => {\n    const styles = useStyles2(getStyles);\n    const { value, options } = model.useState();\n\n    return (\n      <Field\n        className={styles.field}\n        data-testid=\"sort-by-select\"\n        htmlFor=\"sort-by-criteria\"\n        label={\n          <div className={styles.sortByTooltip}>\n            Sort by\n            <IconButton\n              name={'info-circle'}\n              size=\"sm\"\n              variant={'secondary'}\n              tooltip=\"Sorts values using standard or smart time series calculations.\"\n            />\n          </div>\n        }\n      >\n        <Combobox\n          id=\"sort-by-criteria\"\n          placeholder=\"Choose criteria\"\n          width={20}\n          options={options}\n          value={value}\n          onChange={model.onChange}\n          isClearable={false}\n        />\n      </Field>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    sortByTooltip: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n    }),\n    field: css({\n      marginBottom: 0,\n    }),\n  };\n}\n","import { LoadingState, type DataFrame, type PanelData } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  type SceneComponentProps,\n  type SceneDataProvider,\n  type SceneLayout,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneStatelessBehavior,\n} from '@grafana/scenes';\nimport React from 'react';\n\nimport { type CountsData } from 'MetricsReducer/list-controls/QuickSearch/CountsProvider/CountsProvider';\nimport { QuickSearch } from 'MetricsReducer/list-controls/QuickSearch/QuickSearch';\nimport { sortSeries, type SortSeriesByOption } from 'shared/services/sorting';\n\nimport { getLabelValueFromDataFrame } from './getLabelValueFromDataFrame';\nimport { SortBySelector } from './SortBySelector';\nimport { EventForceSyncYAxis } from '../MetricLabelsList/events/EventForceSyncYAxis';\nimport { EventResetSyncYAxis } from '../MetricLabelsList/events/EventResetSyncYAxis';\n\n/**\n * Same idea as in our custom SceneByVariableRepeater.tsx, we create a Scene object with more capabilities than the official Scene object.\n * Specifically, we're adding:\n *\n * 1. Support for pagination\n * 2. Support for filtering and sorting (we may consider externalizing this to a separate class in the future)\n * 3. Support for $behaviors, that is used to reset the y axis sync after filtering and/or sorting\n */\ninterface SceneByFrameRepeaterState extends SceneObjectState {\n  $behaviors: Array<SceneObject | SceneStatelessBehavior>;\n  body: SceneLayout;\n  getLayoutChild(data: PanelData, frame: DataFrame, frameIndex: number): SceneObject | null;\n  getLayoutLoading?: () => SceneObject;\n  getLayoutError?: (data: PanelData) => SceneObject;\n  getLayoutEmpty?: () => SceneObject;\n  currentBatchSize: number;\n  initialPageSize: number;\n  pageSizeIncrement: number;\n  loadingLayout?: SceneObject;\n  errorLayout?: SceneObject;\n  emptyLayout?: SceneObject;\n  counts: CountsData;\n  $data?: SceneDataProvider;\n}\n\nconst DEFAULT_INITIAL_PAGE_SIZE = 120;\nconst DEFAULT_PAGE_SIZE_INCREMENT = 9;\n\nexport class SceneByFrameRepeater extends SceneObjectBase<SceneByFrameRepeaterState> {\n  private searchText = '';\n  private sortBy?: SortSeriesByOption;\n\n  public constructor({\n    $behaviors,\n    body,\n    getLayoutChild,\n    getLayoutLoading,\n    getLayoutError,\n    getLayoutEmpty,\n    initialPageSize,\n    pageSizeIncrement,\n    $data,\n  }: {\n    $behaviors: SceneByFrameRepeaterState['$behaviors'];\n    body: SceneByFrameRepeaterState['body'];\n    getLayoutChild: SceneByFrameRepeaterState['getLayoutChild'];\n    getLayoutLoading?: SceneByFrameRepeaterState['getLayoutLoading'];\n    getLayoutError?: SceneByFrameRepeaterState['getLayoutError'];\n    getLayoutEmpty?: SceneByFrameRepeaterState['getLayoutEmpty'];\n    initialPageSize?: SceneByFrameRepeaterState['initialPageSize'];\n    pageSizeIncrement?: SceneByFrameRepeaterState['pageSizeIncrement'];\n    $data?: SceneByFrameRepeaterState['$data'];\n  }) {\n    super({\n      key: 'breakdown-by-frame-repeater',\n      $behaviors,\n      body,\n      getLayoutChild,\n      getLayoutLoading,\n      getLayoutError,\n      getLayoutEmpty,\n      currentBatchSize: 0,\n      initialPageSize: initialPageSize || DEFAULT_INITIAL_PAGE_SIZE,\n      pageSizeIncrement: pageSizeIncrement || DEFAULT_PAGE_SIZE_INCREMENT,\n      loadingLayout: undefined,\n      errorLayout: undefined,\n      emptyLayout: undefined,\n      counts: { current: 0, total: 0 },\n      $data,\n    });\n\n    this.addActivationHandler(() => {\n      const dataProvider = sceneGraph.getData(this);\n      if (!dataProvider) {\n        throw new Error('No data provider found!');\n      }\n\n      this.initFilterAndSort();\n\n      this._subs.add(\n        dataProvider.subscribeToState((newState) => {\n          if (newState.data) {\n            this.performRepeat(newState.data);\n          }\n        })\n      );\n\n      if (dataProvider.state.data) {\n        this.performRepeat(dataProvider.state.data);\n      }\n    });\n  }\n\n  private performRepeat(data: PanelData) {\n    if (data.state === LoadingState.Loading) {\n      this.setState({\n        loadingLayout: this.state.getLayoutLoading?.(),\n        errorLayout: undefined,\n        emptyLayout: undefined,\n        currentBatchSize: 0,\n      });\n      return;\n    }\n\n    if (data.state === LoadingState.Error) {\n      this.setState({\n        errorLayout: this.state.getLayoutError?.(data),\n        loadingLayout: undefined,\n        emptyLayout: undefined,\n        currentBatchSize: 0,\n      });\n      return;\n    }\n\n    const filteredSeries = this.filterAndSort(data.series);\n\n    if (!filteredSeries.length) {\n      this.setState({\n        emptyLayout: this.state.getLayoutEmpty?.(),\n        errorLayout: undefined,\n        loadingLayout: undefined,\n        currentBatchSize: 0,\n        counts: { current: 0, total: data.series.length },\n      });\n      return;\n    }\n\n    this.setState({\n      loadingLayout: undefined,\n      errorLayout: undefined,\n      emptyLayout: undefined,\n      currentBatchSize: this.state.initialPageSize,\n      counts: { current: filteredSeries.length, total: data.series.length },\n    });\n\n    const newChildren: SceneObject[] = filteredSeries\n      .slice(0, this.state.initialPageSize)\n      .map((s, i) => this.state.getLayoutChild(data, s, i))\n      .filter(Boolean) as SceneObject[];\n\n    this.state.body.setState({ children: newChildren });\n  }\n\n  private initFilterAndSort() {\n    this.searchText = sceneGraph.findByKeyAndType(this, 'quick-search', QuickSearch).state.value;\n    this.sortBy = sceneGraph.findByKeyAndType(this, 'breakdown-sort-by', SortBySelector).state.value.value;\n  }\n\n  private filterAndSort(series: PanelData['series']) {\n    let filteredSeries: DataFrame[] = [];\n\n    if (!this.searchText) {\n      filteredSeries = series;\n    } else {\n      const regexes = this.searchText\n        .split(',')\n        .map((p) => p.trim())\n        .filter(Boolean)\n        .map((r) => {\n          try {\n            return new RegExp(r);\n          } catch {\n            return null;\n          }\n        })\n        .filter(Boolean) as RegExp[];\n\n      for (let i = 0; i < series.length; i += 1) {\n        const s = series[i];\n\n        if (regexes.some((regex) => regex.test(getLabelValueFromDataFrame(s)))) {\n          filteredSeries.push(s);\n        }\n      }\n    }\n\n    if (this.sortBy) {\n      filteredSeries = sortSeries(filteredSeries, this.sortBy);\n    }\n\n    return filteredSeries;\n  }\n\n  public filter(searchText: string) {\n    this.searchText = searchText;\n\n    const { data } = sceneGraph.getData(this).state;\n    if (data) {\n      this.publishEvent(new EventResetSyncYAxis({}), true);\n      this.performRepeat(data);\n    }\n  }\n\n  public sort(sortBy: SortSeriesByOption) {\n    this.sortBy = sortBy;\n\n    const { data } = sceneGraph.getData(this).state;\n    if (data) {\n      this.publishEvent(new EventResetSyncYAxis({}), true);\n      this.performRepeat(data);\n    }\n  }\n\n  public increaseBatchSize() {\n    const { data } = sceneGraph.getData(this).state;\n    if (!data) {\n      return;\n    }\n\n    const newBatchSize = this.state.currentBatchSize + this.state.pageSizeIncrement;\n\n    const newChildren: SceneObject[] = this.filterAndSort(data.series)\n      .slice(this.state.currentBatchSize, newBatchSize)\n      .map((s, i) => this.state.getLayoutChild(data, s, i))\n      .filter(Boolean) as SceneObject[];\n\n    this.state.body.setState({\n      children: [...this.state.body.state.children, ...newChildren],\n    });\n\n    this.setState({\n      currentBatchSize: newBatchSize,\n    });\n\n    this.publishEvent(new EventForceSyncYAxis({}), true);\n  }\n\n  public useSizes() {\n    const { currentBatchSize, pageSizeIncrement } = this.useState();\n    const { data } = sceneGraph.getData(this).state;\n    const total = data ? this.filterAndSort(data.series).length : 0;\n    const remaining = total - currentBatchSize;\n    const increment = remaining < pageSizeIncrement ? remaining : pageSizeIncrement;\n\n    return {\n      increment,\n      current: currentBatchSize,\n      total,\n    };\n  }\n\n  public getCounts() {\n    const { data } = sceneGraph.getData(this).state;\n    return {\n      current: 0,\n      total: data ? data.series.length : 0,\n    };\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<SceneByFrameRepeater>) => {\n    const { body, loadingLayout, errorLayout, emptyLayout } = model.useState();\n\n    if (loadingLayout) {\n      return <loadingLayout.Component model={loadingLayout} />;\n    }\n\n    if (errorLayout) {\n      return <errorLayout.Component model={errorLayout} />;\n    }\n\n    if (emptyLayout) {\n      return <emptyLayout.Component model={emptyLayout} />;\n    }\n\n    return <body.Component model={body} />;\n  };\n}\n","import { sceneGraph } from '@grafana/scenes';\n\nimport { CountsProvider } from 'MetricsReducer/list-controls/QuickSearch/CountsProvider/CountsProvider';\n\nimport { SceneByFrameRepeater } from './SceneByFrameRepeater';\n\nexport class LabelValuesCountsProvider extends CountsProvider {\n  constructor() {\n    super({ key: 'LabelValuesCountsProvider' });\n\n    this.addActivationHandler(() => {\n      const byFrameRepeater = sceneGraph.findByKeyAndType(this, 'breakdown-by-frame-repeater', SceneByFrameRepeater);\n\n      this._subs.add(\n        byFrameRepeater.subscribeToState((newState, prevState) => {\n          if (newState.counts !== prevState.counts) {\n            this.setState({ counts: newState.counts });\n          }\n        })\n      );\n    });\n  }\n}\n","import { css, cx } from '@emotion/css';\nimport { DashboardCursorSync, LoadingState, type DataFrame, type GrafanaTheme2, type PanelData } from '@grafana/data';\nimport {\n  behaviors,\n  SceneCSSGridItem,\n  SceneCSSGridLayout,\n  SceneDataTransformer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneQueryRunner,\n  SceneReactObject,\n  sceneUtils,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Field, Spinner, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { ShowMoreButton } from 'MetricsReducer/components/ShowMoreButton';\nimport { LayoutSwitcher, LayoutType, type LayoutSwitcherState } from 'MetricsReducer/list-controls/LayoutSwitcher';\nimport { EventQuickSearchChanged } from 'MetricsReducer/list-controls/QuickSearch/EventQuickSearchChanged';\nimport { QuickSearch } from 'MetricsReducer/list-controls/QuickSearch/QuickSearch';\nimport { GRID_TEMPLATE_COLUMNS, GRID_TEMPLATE_ROWS } from 'MetricsReducer/MetricsList/MetricsList';\nimport { getPreferredConfigForMetric } from 'shared/GmdVizPanel/config/getPreferredConfigForMetric';\nimport { PANEL_HEIGHT } from 'shared/GmdVizPanel/config/panel-heights';\nimport { QUERY_RESOLUTION } from 'shared/GmdVizPanel/config/query-resolutions';\nimport { GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { addCardinalityInfo } from 'shared/GmdVizPanel/types/timeseries/behaviors/addCardinalityInfo';\nimport { getTimeseriesQueryRunnerParams } from 'shared/GmdVizPanel/types/timeseries/getTimeseriesQueryRunnerParams';\nimport { addUnspecifiedLabel } from 'shared/GmdVizPanel/types/timeseries/transformations/addUnspecifiedLabel';\nimport { trailDS } from 'shared/shared';\n\nimport { AddToFiltersGraphAction } from './AddToFiltersGraphAction';\nimport { getLabelValueFromDataFrame } from './getLabelValueFromDataFrame';\nimport { LabelValuesCountsProvider } from './LabelValuesCountProvider';\nimport { SceneByFrameRepeater } from './SceneByFrameRepeater';\nimport { SortBySelector, type SortBySelectorState } from './SortBySelector';\nimport { InlineBanner } from '../../../App/InlineBanner';\nimport { PanelMenu } from '../../PanelMenu/PanelMenu';\nimport { publishTimeseriesData } from '../MetricLabelsList/behaviors/publishTimeseriesData';\nimport { syncYAxis } from '../MetricLabelsList/behaviors/syncYAxis';\n\ninterface MetricLabelsValuesListState extends SceneObjectState {\n  metric: string;\n  label: string;\n  layoutSwitcher: LayoutSwitcher;\n  quickSearch: QuickSearch;\n  sortBySelector: SortBySelector;\n  body?: SceneByFrameRepeater | GmdVizPanel;\n}\n\nexport class MetricLabelValuesList extends SceneObjectBase<MetricLabelsValuesListState> {\n  constructor({\n    metric,\n    label,\n  }: {\n    metric: MetricLabelsValuesListState['metric'];\n    label: MetricLabelsValuesListState['label'];\n  }) {\n    const queryParams = getTimeseriesQueryRunnerParams({\n      metric,\n      queryConfig: {\n        resolution: QUERY_RESOLUTION.MEDIUM,\n        labelMatchers: [],\n        addIgnoreUsageFilter: true,\n        groupBy: label,\n      },\n    });\n\n    super({\n      key: 'metric-label-values-list',\n      metric,\n      label,\n      layoutSwitcher: new LayoutSwitcher({\n        urlSearchParamName: 'breakdownLayout',\n        options: [\n          { label: 'Single', value: LayoutType.SINGLE },\n          { label: 'Grid', value: LayoutType.GRID },\n          { label: 'Rows', value: LayoutType.ROWS },\n        ],\n      }),\n      quickSearch: new QuickSearch({\n        urlSearchParamName: 'breakdownSearchText',\n        targetName: 'label value',\n        countsProvider: new LabelValuesCountsProvider(),\n        displayCounts: true,\n      }),\n      sortBySelector: new SortBySelector({ target: 'labels' }),\n      $data: new SceneDataTransformer({\n        $data: new SceneQueryRunner({\n          datasource: trailDS,\n          maxDataPoints: queryParams.maxDataPoints,\n          queries: queryParams.queries,\n        }),\n        transformations: [addUnspecifiedLabel(label)],\n      }),\n      body: undefined,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.subscribeToLayoutChange();\n  }\n\n  private subscribeToQuickSearchChange() {\n    // We ensure the proper quick search value when landing on the page:\n    // because MetricLabelValuesList is created dynamically when LabelBreakdownScene updates its body,\n    // QuickSearch is not properly connected to the URL synchronization system\n    sceneUtils.syncStateFromSearchParams(this.state.quickSearch, new URLSearchParams(window.location.search));\n\n    this._subs.add(\n      this.subscribeToEvent(EventQuickSearchChanged, (event) => {\n        const byFrameRepeater = sceneGraph.findDescendents(this, SceneByFrameRepeater)[0];\n        if (byFrameRepeater) {\n          byFrameRepeater.filter(event.payload.searchText);\n        }\n      })\n    );\n  }\n\n  private subscribeToSortByChange() {\n    const { sortBySelector } = this.state;\n\n    this._subs.add(\n      sortBySelector.subscribeToState((newState: SortBySelectorState, prevState?: SortBySelectorState) => {\n        if (newState.value.value !== prevState?.value.value) {\n          const byFrameRepeater = sceneGraph.findDescendents(this, SceneByFrameRepeater)[0];\n          if (byFrameRepeater) {\n            byFrameRepeater.sort(newState.value.value);\n          }\n        }\n      })\n    );\n  }\n\n  private subscribeToLayoutChange() {\n    const { layoutSwitcher } = this.state;\n\n    // We ensure the proper layout when landing on the page:\n    // because MetricLabelValuesList is created dynamically when LabelBreakdownScene updates its body,\n    // LayoutSwitcher is not properly connected to the URL synchronization system\n    sceneUtils.syncStateFromSearchParams(layoutSwitcher, new URLSearchParams(window.location.search));\n\n    const onChangeState = (newState: LayoutSwitcherState, prevState?: LayoutSwitcherState) => {\n      if (newState.layout !== prevState?.layout) {\n        this.updateBody(newState.layout);\n      }\n    };\n\n    onChangeState(layoutSwitcher.state);\n\n    this._subs.add(layoutSwitcher.subscribeToState(onChangeState));\n  }\n\n  private updateBody(layout: LayoutType) {\n    if (layout === LayoutType.SINGLE) {\n      this.setState({ body: this.buildSinglePanel() });\n      return;\n    }\n\n    const existingByFrameRepeater = sceneGraph.findDescendents(this, SceneByFrameRepeater)[0];\n    const byFrameRepeater = existingByFrameRepeater || this.buildByFrameRepeater();\n\n    (byFrameRepeater.state.body as SceneCSSGridLayout).setState({\n      templateColumns: layout === LayoutType.ROWS ? GRID_TEMPLATE_ROWS : GRID_TEMPLATE_COLUMNS,\n    });\n\n    this.setState({ body: byFrameRepeater });\n\n    if (!existingByFrameRepeater) {\n      // we have to re-subscribe every time we build a new SceneByFrameRepeater instance because these controls (QuickSerach and SortBy) are not rendered when switching to the \"Single\" layout\n      this.subscribeToQuickSearchChange();\n      this.subscribeToSortByChange();\n    }\n  }\n\n  private buildSinglePanel() {\n    const { metric, label } = this.state;\n\n    return new GmdVizPanel({\n      metric,\n      discardUserPrefs: true,\n      panelOptions: {\n        type: 'timeseries',\n        height: PANEL_HEIGHT.XL,\n        headerActions: () => [],\n        behaviors: [addCardinalityInfo({ description: { ctaText: '' } })],\n      },\n      queryOptions: {\n        groupBy: label,\n        data: sceneGraph.getData(this),\n      },\n    });\n  }\n\n  private buildByFrameRepeater() {\n    const { metric, label } = this.state;\n    const prefMetricConfig = getPreferredConfigForMetric(metric);\n\n    return new SceneByFrameRepeater({\n      // we set the syncYAxis behavior here to ensure that the EventResetSyncYAxis events that are published by SceneByFrameRepeater can be received\n      $behaviors: [\n        syncYAxis(),\n        new behaviors.CursorSync({\n          key: 'metricCrosshairSync',\n          sync: DashboardCursorSync.Crosshair,\n        }),\n      ],\n      body: new SceneCSSGridLayout({\n        children: [],\n        isLazy: true,\n        templateColumns: GRID_TEMPLATE_COLUMNS,\n        autoRows: PANEL_HEIGHT.M,\n      }),\n      getLayoutLoading: () =>\n        new SceneReactObject({\n          reactNode: <Spinner inline />,\n        }),\n      getLayoutEmpty: () =>\n        new SceneReactObject({\n          reactNode: (\n            <InlineBanner title=\"\" severity=\"info\">\n              No label values found for the current filters and time range.\n            </InlineBanner>\n          ),\n        }),\n      getLayoutError: (data: PanelData) =>\n        new SceneReactObject({\n          reactNode: (\n            <InlineBanner severity=\"error\" title=\"Error while loading metrics!\" error={data.errors![0] as Error} />\n          ),\n        }),\n      getLayoutChild: (data: PanelData, frame: DataFrame, frameIndex: number) => {\n        // hide frames that have less than 2 points\n        if (frame.length < 2) {\n          return null;\n        }\n\n        const labelValue = getLabelValueFromDataFrame(frame);\n        const canAddToFilters = !labelValue.startsWith('<unspecified'); // see the \"addUnspecifiedLabel\" data transformation\n\n        const vizPanel = new GmdVizPanel({\n          metric,\n          discardUserPrefs: true,\n          panelOptions: {\n            ...prefMetricConfig?.panelOptions,\n            title: labelValue,\n            fixedColorIndex: frameIndex,\n            description: '',\n            headerActions: canAddToFilters\n              ? () => [new AddToFiltersGraphAction({ labelName: label, labelValue })]\n              : () => [],\n            menu: () => new PanelMenu({ labelName: labelValue }),\n            // publishTimeseriesData is required for the syncYAxis behavior (see MetricLabelsList)\n            // no worries to add it for all panel types here as it will check if the panel is a timeseries\n            // and if the data frame received is a timeseries before acting\n            behaviors: [publishTimeseriesData()],\n          },\n          queryOptions: {\n            ...prefMetricConfig?.queryOptions,\n            labelMatchers: [{ key: label, operator: '=', value: labelValue }],\n          },\n        });\n\n        return new SceneCSSGridItem({ body: vizPanel });\n      },\n    });\n  }\n\n  public Controls({ model }: { model: MetricLabelValuesList }) {\n    const styles = useStyles2(getStyles); // eslint-disable-line react-hooks/rules-of-hooks\n    const { body, quickSearch, layoutSwitcher, sortBySelector } = model.useState();\n\n    return (\n      <>\n        {body instanceof SceneByFrameRepeater && (\n          <>\n            <Field className={cx(styles.field, styles.quickSearchField)} label=\"Search\">\n              <quickSearch.Component model={quickSearch} />\n            </Field>\n            <sortBySelector.Component model={sortBySelector} />\n          </>\n        )}\n        <Field label=\"View\" className={styles.field}>\n          <layoutSwitcher.Component model={layoutSwitcher} />\n        </Field>\n      </>\n    );\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<MetricLabelValuesList>) => {\n    const { body } = model.useState();\n\n    return (\n      <>\n        {body instanceof GmdVizPanel && <MetricLabelValuesList.SingleMetricPanelComponent model={model} />}\n        {body instanceof SceneByFrameRepeater && <MetricLabelValuesList.ByFrameRepeaterComponent model={model} />}\n      </>\n    );\n  };\n\n  private static readonly SingleMetricPanelComponent = ({ model }: SceneComponentProps<MetricLabelValuesList>) => {\n    const styles = useStyles2(getStyles);\n    const { body } = model.useState();\n\n    return (\n      <div data-testid=\"single-metric-panel\">\n        <div className={styles.singlePanelContainer}>\n          {body instanceof GmdVizPanel && <body.Component model={body} />}\n        </div>\n      </div>\n    );\n  };\n\n  private static readonly ByFrameRepeaterComponent = ({ model }: SceneComponentProps<MetricLabelValuesList>) => {\n    const styles = useStyles2(getStyles);\n    const { body } = model.useState();\n\n    const dataProvider = sceneGraph.getData(model);\n    const { state, errors } = dataProvider.useState().data || {};\n\n    const byFrameRepeater = body as SceneByFrameRepeater;\n\n    const batchSizes = byFrameRepeater.useSizes();\n    const shouldDisplayShowMoreButton =\n      state !== LoadingState.Loading &&\n      !errors?.length &&\n      batchSizes.total > 0 &&\n      batchSizes.current < batchSizes.total;\n\n    const onClickShowMore = () => {\n      byFrameRepeater.increaseBatchSize();\n    };\n\n    return (\n      <div data-testid=\"label-values-list\">\n        <div className={styles.listContainer}>\n          {body instanceof SceneByFrameRepeater && <body.Component model={body} />}\n        </div>\n        {shouldDisplayShowMoreButton && (\n          <div className={styles.listFooter}>\n            <ShowMoreButton label=\"label value\" batchSizes={batchSizes} onClick={onClickShowMore} />\n          </div>\n        )}\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    singlePanelContainer: css({\n      width: '100%',\n      height: '300px',\n    }),\n    listContainer: css({ width: '100%' }),\n    listFooter: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: theme.spacing(4),\n\n      '& button': {\n        height: '40px',\n        borderRadius: '8px',\n      },\n    }),\n    quickSearchField: css({\n      flexGrow: 1,\n    }),\n    field: css({\n      marginBottom: 0,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { config, useChromeHeaderHeight } from '@grafana/runtime';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  type QueryVariable,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { type DataTrail } from 'AppDataTrail/DataTrail';\nimport { getTrailFor } from 'shared/utils/utils';\nimport { getAppBackgroundColor } from 'shared/utils/utils.styles';\n\nimport { MetricLabelsList } from './MetricLabelsList/MetricLabelsList';\nimport { MetricLabelValuesList } from './MetricLabelValuesList/MetricLabelValuesList';\nimport { RefreshMetricsEvent, VAR_GROUP_BY } from '../../shared/shared';\nimport { isQueryVariable } from '../../shared/utils/utils.variables';\n\ninterface LabelBreakdownSceneState extends SceneObjectState {\n  metric: string;\n  body?: MetricLabelsList | MetricLabelValuesList;\n}\n\nexport class LabelBreakdownScene extends SceneObjectBase<LabelBreakdownSceneState> {\n  constructor({ metric }: { metric: LabelBreakdownSceneState['metric'] }) {\n    super({\n      metric,\n      body: undefined,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    const groupByVariable = this.getVariable();\n\n    groupByVariable.subscribeToState((newState, oldState) => {\n      if (newState.value !== oldState.value) {\n        this.updateBody(groupByVariable);\n      }\n    });\n\n    if (config.featureToggles.enableScopesInMetricsExplore) {\n      this.subscribeToEvent(RefreshMetricsEvent, () => {\n        this.updateBody(groupByVariable);\n      });\n    }\n\n    this.updateBody(groupByVariable);\n  }\n\n  private getVariable(): QueryVariable {\n    const groupByVariable = sceneGraph.lookupVariable(VAR_GROUP_BY, this)!;\n    if (!isQueryVariable(groupByVariable)) {\n      throw new Error('Group by variable not found');\n    }\n    return groupByVariable;\n  }\n\n  private updateBody(groupByVariable: QueryVariable) {\n    const { metric } = this.state;\n\n    this.setState({\n      body: groupByVariable.hasAllValue()\n        ? new MetricLabelsList({ metric })\n        : new MetricLabelValuesList({ metric, label: groupByVariable.state.value as string }),\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<LabelBreakdownScene>) => {\n    const chromeHeaderHeight = useChromeHeaderHeight();\n    const trail = getTrailFor(model);\n    const styles = useStyles2(getStyles, trail.state.embedded ? 0 : chromeHeaderHeight ?? 0, trail);\n    const { body } = model.useState();\n    const groupByVariable = model.getVariable();\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.stickyControls} data-testid=\"breakdown-controls\">\n          <div className={styles.controls}>\n            <groupByVariable.Component model={groupByVariable} />\n            {body instanceof MetricLabelsList && <body.Controls model={body} />}\n            {body instanceof MetricLabelValuesList && <body.Controls model={body} />}\n          </div>\n        </div>\n        <div data-testid=\"panels-list\">\n          {body instanceof MetricLabelsList && <body.Component model={body} />}\n          {body instanceof MetricLabelValuesList && <body.Component model={body} />}\n        </div>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2, headerHeight: number, trail: DataTrail) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      minHeight: '100%',\n      flexDirection: 'column',\n    }),\n    stickyControls: css({\n      margin: theme.spacing(1, 0, 1.5, 0),\n      position: 'sticky',\n      top: `calc(var(--app-controls-height, 0px) + ${headerHeight}px + var(--action-bar-height, 0px))`,\n      zIndex: 10,\n      background: getAppBackgroundColor(theme, trail),\n      paddingBottom: theme.spacing(1),\n    }),\n    controls: css({\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      alignItems: 'end',\n      flexWrap: 'wrap',\n      gap: theme.spacing(1),\n    }),\n    searchField: css({\n      flexGrow: 1,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  VariableDependencyConfig,\n  type MultiValueVariable,\n  type SceneComponentProps,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { Combobox, Icon, InlineField, InlineLabel, Tooltip, useStyles2, type ComboboxOption } from '@grafana/ui';\nimport React from 'react';\n\nimport { getMultiVariableValues } from 'MetricsReducer/components/SceneByVariableRepeater';\nimport { computeMetricPrefixGroups } from 'MetricsReducer/metrics-variables/computeMetricPrefixGroups';\nimport { VAR_METRICS_VARIABLE } from 'MetricsReducer/metrics-variables/MetricsVariable';\nimport { EventFiltersChanged } from 'MetricsReducer/SideBar/sections/MetricsFilterSection/EventFiltersChanged';\n\ninterface PrefixFilterDropdownState extends SceneObjectState {\n  loading: boolean;\n  error: Error | null;\n  options: ComboboxOption[];\n  value: string;\n}\n\nconst METRIC_PREFIX_ALL_OPTION = {\n  label: 'All metric names',\n  value: 'all',\n};\n\nexport class PrefixFilterDropdown extends SceneObjectBase<PrefixFilterDropdownState> {\n  protected _variableDependency: VariableDependencyConfig<PrefixFilterDropdownState> = new VariableDependencyConfig(\n    this,\n    {\n      variableNames: [VAR_METRICS_VARIABLE],\n      onVariableUpdateCompleted: () => this.parseMetricPrefixes(),\n    }\n  );\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['metricPrefix'] });\n\n  getUrlState() {\n    return { metricPrefix: this.state.value };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    if (typeof values.metricPrefix === 'string') {\n      if (this.state.value !== values.metricPrefix) {\n        this.setState({ value: values.metricPrefix });\n      }\n      return;\n    }\n\n    this.setState({ value: METRIC_PREFIX_ALL_OPTION.value });\n  }\n\n  constructor(state: Partial<PrefixFilterDropdownState>) {\n    super({\n      ...state,\n      key: 'related-prefix-filter',\n      loading: true,\n      error: null,\n      options: [METRIC_PREFIX_ALL_OPTION],\n      value: METRIC_PREFIX_ALL_OPTION.value,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.parseMetricPrefixes();\n  }\n\n  private parseMetricPrefixes() {\n    if (this._variableDependency.hasDependencyInLoadingState()) {\n      this.setState({ error: undefined, loading: true });\n      return;\n    }\n\n    const filteredMetricsVariable = sceneGraph.lookupVariable(VAR_METRICS_VARIABLE, this) as MultiValueVariable;\n\n    if (filteredMetricsVariable.state.error) {\n      this.setState({\n        error: filteredMetricsVariable.state.error,\n        loading: false,\n        options: [],\n      });\n      return;\n    }\n\n    const prefixGroups = computeMetricPrefixGroups(\n      getMultiVariableValues(filteredMetricsVariable) as Array<{ label: string; value: string }>\n    );\n\n    const newOptions = [\n      METRIC_PREFIX_ALL_OPTION,\n      ...prefixGroups.map((g) => ({\n        value: g.value,\n        label: `${g.label} (${g.count})`,\n      })),\n    ];\n\n    const { value } = this.state;\n    const newValue = newOptions.find((o) => o.value === value) ? (value as string) : METRIC_PREFIX_ALL_OPTION.value;\n\n    this.setState({\n      error: null,\n      loading: false,\n      options: newOptions,\n    });\n\n    this.selectOption({ value: newValue, label: newValue });\n  }\n\n  private selectOption = (option: ComboboxOption | null) => {\n    const value = option === null ? METRIC_PREFIX_ALL_OPTION.value : option.value;\n\n    this.setState({ value });\n\n    this.publishEvent(\n      new EventFiltersChanged({\n        type: 'prefixes',\n        filters: value === METRIC_PREFIX_ALL_OPTION.value ? [] : [value],\n      }),\n      true\n    );\n  };\n\n  public static readonly Component = ({ model }: SceneComponentProps<PrefixFilterDropdown>) => {\n    const styles = useStyles2(getStyles);\n    const { loading, options, value, error } = model.useState();\n\n    return (\n      <div className={styles.container} data-testid=\"prefix-filter-selector\">\n        <InlineField\n          disabled={loading}\n          error={error && error.toString()}\n          label={\n            <InlineLabel width=\"auto\" className={styles.label}>\n              <span>View by</span>\n              <Tooltip\n                content=\"View by the metric prefix. A metric prefix is a single word at the beginning of the metric name, relevant to the domain the metric belongs to.\"\n                placement=\"top\"\n              >\n                <Icon className={styles.tooltipIcon} name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </InlineLabel>\n          }\n        >\n          <Combobox value={value} onChange={model.selectOption} options={options} />\n        </InlineField>\n      </div>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n\n      & > div {\n        margin: 0;\n      }\n    `,\n\n    label: css`\n      margin-right: 0;\n      background-color: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.medium};\n      border-right: 0 none;\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n    `,\n    tooltipIcon: css`\n      margin-left: ${theme.spacing(0.5)};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport { type SelectableValue } from '@grafana/data';\nimport {\n  EmbeddedScene,\n  SceneFlexItem,\n  SceneFlexLayout,\n  type SceneComponentProps,\n  type SceneObjectState,\n  type SceneReactObject,\n  type SceneVariableSet,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { LayoutSwitcher } from 'MetricsReducer/list-controls/LayoutSwitcher';\nimport { type CountsProvider } from 'MetricsReducer/list-controls/QuickSearch/CountsProvider/CountsProvider';\nimport { MetricVariableCountsProvider } from 'MetricsReducer/list-controls/QuickSearch/CountsProvider/MetricVariableCountsProvider';\nimport { QuickSearch } from 'MetricsReducer/list-controls/QuickSearch/QuickSearch';\n\nimport { PrefixFilterDropdown } from './PrefixFilterDropdown';\n\ninterface RelatedListControlsState extends SceneObjectState {\n  $variables?: SceneVariableSet;\n  inputControls?: SceneReactObject;\n  onChange?: (value: SelectableValue<string>) => void; // Keeping for backward compatibility\n}\n\nexport class RelatedListControls extends EmbeddedScene {\n  constructor(state: Partial<RelatedListControlsState>) {\n    super({\n      ...state,\n      key: 'related-list-controls',\n      body: new SceneFlexLayout({\n        direction: 'row',\n        width: '100%',\n        maxHeight: '32px',\n        children: [\n          new SceneFlexItem({\n            width: 'auto',\n            body: new PrefixFilterDropdown({}),\n          }),\n          new SceneFlexItem({\n            body: new QuickSearch({\n              urlSearchParamName: 'gmd-relatedSearchText',\n              targetName: 'related metric',\n              countsProvider: new MetricVariableCountsProvider() as unknown as CountsProvider,\n              displayCounts: true,\n            }),\n          }),\n          new SceneFlexItem({\n            width: 'auto',\n            body: new LayoutSwitcher({}),\n          }),\n        ],\n      }),\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<RelatedListControls>) => {\n    const styles = useStyles2(getStyles);\n    const { body } = model.useState();\n\n    return (\n      <div className={styles.controls} data-testid=\"related-list-controls\">\n        <body.Component model={body} />\n      </div>\n    );\n  };\n}\n\nfunction getStyles() {\n  return {\n    controls: css({\n      display: 'flex',\n      alignItems: 'end',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { useChromeHeaderHeight } from '@grafana/runtime';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  SceneVariableSet,\n  type QueryVariable,\n  type SceneComponentProps,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { type DataTrail } from 'AppDataTrail/DataTrail';\nimport { EventQuickSearchChanged } from 'MetricsReducer/list-controls/QuickSearch/EventQuickSearchChanged';\nimport { QuickSearch } from 'MetricsReducer/list-controls/QuickSearch/QuickSearch';\nimport { EventMetricsVariableActivated } from 'MetricsReducer/metrics-variables/events/EventMetricsVariableActivated';\nimport { EventMetricsVariableDeactivated } from 'MetricsReducer/metrics-variables/events/EventMetricsVariableDeactivated';\nimport { EventMetricsVariableLoaded } from 'MetricsReducer/metrics-variables/events/EventMetricsVariableLoaded';\nimport {\n  FilteredMetricsVariable,\n  VAR_FILTERED_METRICS_VARIABLE,\n} from 'MetricsReducer/metrics-variables/FilteredMetricsVariable';\nimport {\n  MetricsVariableFilterEngine,\n  type MetricFilters,\n} from 'MetricsReducer/metrics-variables/MetricsVariableFilterEngine';\nimport { MetricsVariableSortEngine } from 'MetricsReducer/metrics-variables/MetricsVariableSortEngine';\nimport { MetricsList } from 'MetricsReducer/MetricsList/MetricsList';\nimport { EventFiltersChanged } from 'MetricsReducer/SideBar/sections/MetricsFilterSection/EventFiltersChanged';\n\nimport { RelatedListControls } from './RelatedListControls';\nimport { getTrailFor } from '../../shared/utils/utils';\nimport { getAppBackgroundColor } from '../../shared/utils/utils.styles';\n\ninterface RelatedMetricsSceneState extends SceneObjectState {\n  metric: string;\n  body: MetricsList;\n  listControls: RelatedListControls;\n}\n\nexport class RelatedMetricsScene extends SceneObjectBase<RelatedMetricsSceneState> {\n  constructor({ metric }: { metric: RelatedMetricsSceneState['metric'] }) {\n    super({\n      metric,\n      $variables: new SceneVariableSet({\n        variables: [new FilteredMetricsVariable()],\n      }),\n      key: 'RelatedMetricsScene',\n      body: new MetricsList({ variableName: VAR_FILTERED_METRICS_VARIABLE }),\n      listControls: new RelatedListControls({}),\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.subscribeToEvents();\n  }\n\n  private subscribeToEvents() {\n    this.initVariablesFilteringAndSorting();\n  }\n\n  /**\n   * The centralized filtering mechanism implemented here is decoupled via the usage of events.\n   * In order to work, the variables to be filtered/sorted must emit lifecycle events.\n   * This is done via the `withLifecycleEvents` decorator function.\n   *\n   * For example, check the `FilteredMetricsVariable` class.\n   */\n  private initVariablesFilteringAndSorting() {\n    const { metric } = this.state;\n\n    const enginesMap = new Map<\n      string,\n      { filterEngine: MetricsVariableFilterEngine; sortEngine: MetricsVariableSortEngine }\n    >();\n\n    this.subscribeToEvent(EventMetricsVariableActivated, (event) => {\n      // register engines\n      const { key } = event.payload;\n      const filteredMetricsVariable = sceneGraph.findByKey(this, key) as QueryVariable;\n\n      enginesMap.set(key, {\n        filterEngine: new MetricsVariableFilterEngine(filteredMetricsVariable),\n        sortEngine: new MetricsVariableSortEngine(filteredMetricsVariable),\n      });\n    });\n\n    this.subscribeToEvent(EventMetricsVariableDeactivated, (event) => {\n      // unregister engines\n      enginesMap.delete(event.payload.key);\n    });\n\n    const quickSearch = sceneGraph.findByKeyAndType(this, 'quick-search', QuickSearch);\n\n    this.subscribeToEvent(EventMetricsVariableLoaded, (event) => {\n      // filter  on initial load\n      const { key, options } = event.payload;\n      const { filterEngine, sortEngine } = enginesMap.get(key)!;\n\n      filterEngine.setInitOptions(options);\n\n      const filters: Partial<MetricFilters> = {\n        names: quickSearch.state.value ? [quickSearch.state.value] : [],\n      };\n\n      filterEngine.applyFilters(filters, { forceUpdate: true, notify: false });\n      sortEngine.sort('related', { metric });\n    });\n\n    /* Filters */\n\n    this.subscribeToEvent(EventQuickSearchChanged, (event) => {\n      const { searchText } = event.payload;\n\n      for (const [, { filterEngine, sortEngine }] of enginesMap) {\n        filterEngine.applyFilters({ names: searchText ? [searchText] : [] });\n        sortEngine.sort('related', { metric });\n      }\n    });\n\n    this.subscribeToEvent(EventFiltersChanged, (event) => {\n      const { type, filters } = event.payload;\n\n      for (const [, { filterEngine, sortEngine }] of enginesMap) {\n        filterEngine.applyFilters({ [type]: filters });\n        sortEngine.sort('related', { metric });\n      }\n    });\n  }\n\n  public static readonly Component = ({ model }: SceneComponentProps<RelatedMetricsScene>) => {\n    const chromeHeaderHeight = useChromeHeaderHeight();\n    const trail = getTrailFor(model);\n    const styles = useStyles2(getStyles, trail.state.embedded ? 0 : chromeHeaderHeight ?? 0, trail);\n    const { $variables, body, listControls } = model.useState();\n\n    return (\n      <>\n        <div className={styles.searchSticky}>\n          <listControls.Component model={listControls} />\n        </div>\n        <div data-testid=\"panels-list\">\n          <body.Component model={body} />\n        </div>\n        <div className={styles.variables}>\n          {$variables?.state.variables.map((variable) => (\n            <variable.Component key={variable.state.name} model={variable} />\n          ))}\n        </div>\n      </>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2, headerHeight: number, trail: DataTrail) {\n  return {\n    variables: css({\n      display: 'none',\n    }),\n    searchSticky: css({\n      margin: theme.spacing(1, 0, 1.5, 0),\n      position: 'sticky',\n      top: `calc(var(--app-controls-height, 0px) + ${headerHeight}px + var(--action-bar-height, 0px))`,\n      zIndex: 10,\n      background: getAppBackgroundColor(theme, trail),\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport {\n  sceneGraph,\n  SceneObjectBase,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n} from '@grafana/scenes';\nimport { Box, Stack, Tab, TabsBar, Tooltip, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { reportExploreMetrics } from 'shared/tracking/interactions';\n\nimport { LabelBreakdownScene } from './Breakdown/LabelBreakdownScene';\nimport { MetricScene } from './MetricScene';\nimport { RelatedMetricsScene } from './RelatedMetrics/RelatedMetricsScene';\n\nexport const actionViews = {\n  breakdown: 'breakdown',\n  related: 'related',\n  relatedLogs: 'logs',\n} as const;\n\nexport type ActionViewType = (typeof actionViews)[keyof typeof actionViews];\n\ninterface ActionViewDefinition {\n  displayName: string;\n  value: ActionViewType;\n  description?: string;\n  getScene: (metricScene: MetricScene) => SceneObject<SceneObjectState>;\n}\n\nexport const actionViewsDefinitions: ActionViewDefinition[] = [\n  {\n    displayName: 'Breakdown',\n    value: actionViews.breakdown,\n    getScene: (metricScene: MetricScene) => new LabelBreakdownScene({ metric: metricScene.state.metric }),\n  },\n  {\n    displayName: 'Related metrics',\n    value: actionViews.related,\n    getScene: (metricScene: MetricScene) => new RelatedMetricsScene({ metric: metricScene.state.metric }),\n    description: 'Relevant metrics based on current label filters',\n  },\n  {\n    displayName: 'Related logs',\n    value: actionViews.relatedLogs,\n    getScene: (metricScene: MetricScene) => metricScene.createRelatedLogsScene(),\n    description: 'Relevant logs based on current label filters and time range',\n  },\n];\n\ninterface MetricActionBarState extends SceneObjectState {}\n\nexport class MetricActionBar extends SceneObjectBase<MetricActionBarState> {\n  public static readonly Component = ({ model }: SceneComponentProps<MetricActionBar>) => {\n    const metricScene = sceneGraph.getAncestor(model, MetricScene);\n    const styles = useStyles2(getStyles);\n    const { actionView } = metricScene.useState();\n\n    return (\n      <Box paddingY={1} data-testid=\"action-bar\" width=\"100%\">\n        <div className={styles.actions}>\n          <Stack gap={1}>{/* Action buttons moved to panel menu */}</Stack>\n        </div>\n\n        <TabsBar className={styles.customTabsBar}>\n          {actionViewsDefinitions.map((tab, index) => {\n            const label = tab.displayName;\n            const counter = tab.value === actionViews.relatedLogs ? metricScene.state.relatedLogsCount : undefined;\n            const isActive = actionView === tab.value;\n\n            const tabRender = (\n              <Tab\n                key={index}\n                label={label}\n                counter={counter}\n                active={isActive}\n                onChangeTab={() => {\n                  if (isActive) {\n                    return;\n                  }\n\n                  reportExploreMetrics('metric_action_view_changed', {\n                    view: tab.value,\n                    related_logs_count: metricScene.relatedLogsOrchestrator.checkConditionsMetForRelatedLogs()\n                      ? counter\n                      : undefined,\n                  });\n\n                  metricScene.setActionView(tab.value);\n                }}\n              />\n            );\n\n            if (tab.description) {\n              return (\n                <Tooltip key={index} content={tab.description} placement=\"top\" theme=\"info\">\n                  {tabRender}\n                </Tooltip>\n              );\n            }\n            return tabRender;\n          })}\n        </TabsBar>\n      </Box>\n    );\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    actions: css({\n      [theme.breakpoints.up(theme.breakpoints.values.md)]: {\n        position: 'absolute',\n        right: 0,\n        top: 16,\n        zIndex: 2,\n      },\n    }),\n    customTabsBar: css({\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n}\n","import { type AdHocVariableFilter, type TimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { sceneGraph, type SceneObject } from '@grafana/scenes';\n\nimport { createMetricsLogsConnector, type FoundLokiDataSource } from './base';\nimport { VAR_FILTERS } from '../../shared/shared';\nimport { getTrailFor } from '../../shared/utils/utils';\nimport { getDataSourceFetcher } from '../../shared/utils/utils.datasource';\nimport { isAdHocFiltersVariable } from '../../shared/utils/utils.variables';\n\nconst knownLabelNameDiscrepancies = {\n  job: 'service_name', // `service.name` is `job` in Mimir and `service_name` in Loki\n  instance: 'service_instance_id', // `service.instance.id` is `instance` in Mimir and `service_instance_id` in Loki\n} as const;\n\nfunction isLabelNameThatShouldBeReplaced(x: string): x is keyof typeof knownLabelNameDiscrepancies {\n  return x in knownLabelNameDiscrepancies;\n}\n\nfunction replaceKnownLabelNames(labelName: string): string {\n  if (isLabelNameThatShouldBeReplaced(labelName)) {\n    return knownLabelNameDiscrepancies[labelName];\n  }\n\n  return labelName;\n}\n\n/**\n * Checks if a Loki data source has labels matching the current filters\n */\nasync function hasMatchingLabels(datasourceUid: string, filters: AdHocVariableFilter[], timeRange?: TimeRange) {\n  const ds = await getDataSourceSrv().get(datasourceUid);\n\n  // Get all available label keys for this data source\n  const labelKeys = await ds.getTagKeys?.({\n    timeRange,\n    filters: filters.map(({ key, operator, value }) => ({\n      key: replaceKnownLabelNames(key),\n      operator,\n      value,\n    })),\n  });\n\n  if (!Array.isArray(labelKeys)) {\n    return false;\n  }\n\n  const availableLabels = new Set(labelKeys.map((key) => key.text));\n\n  // Early return if none of our filter labels exist in this data source\n  const mappedFilterLabels = filters.map((f) => replaceKnownLabelNames(f.key));\n  const hasRequiredLabels = mappedFilterLabels.every((label) => availableLabels.has(label));\n  if (!hasRequiredLabels) {\n    return false;\n  }\n\n  // Check if each filter's value exists for its label\n  const results = await Promise.all(\n    filters.map(async (filter) => {\n      const lokiLabelName = replaceKnownLabelNames(filter.key);\n      const values = await ds.getTagValues?.({\n        key: lokiLabelName,\n        timeRange,\n        filters,\n      });\n\n      if (!Array.isArray(values)) {\n        return false;\n      }\n\n      return values.some((v) => v.text === filter.value);\n    })\n  );\n\n  // If any of the filters have no matching values, return false\n  return results.every(Boolean);\n}\n\nexport const createLabelsCrossReferenceConnector = (scene: SceneObject) => {\n  // In this connector, conditions have been met for related logs when label filters have been applied\n  let conditionsMetForRelatedLogs = false;\n\n  return createMetricsLogsConnector({\n    name: 'labelsCrossReference',\n    checkConditionsMetForRelatedLogs: () => conditionsMetForRelatedLogs,\n    async getDataSources(): Promise<FoundLokiDataSource[]> {\n      const trail = getTrailFor(scene);\n      const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail);\n\n      if (!isAdHocFiltersVariable(filtersVariable) || !filtersVariable.state.filters.length) {\n        conditionsMetForRelatedLogs = false;\n        return [];\n      }\n\n      conditionsMetForRelatedLogs = true;\n      const filters = filtersVariable.state.filters.map(({ key, operator, value }) => ({ key, operator, value }));\n\n      // Get current time range if available\n      const timeRange = scene.state.$timeRange?.state.value;\n\n      const lokiDataSources = await getDataSourceFetcher().getHealthyDataSources('loki');\n      const results = await Promise.all(\n        lokiDataSources.map(async ({ uid, name }) => {\n          const hasLabels = await hasMatchingLabels(uid, filters, timeRange);\n          return hasLabels ? { uid, name } : null;\n        })\n      );\n\n      return results.filter((ds): ds is FoundLokiDataSource => ds !== null);\n    },\n    getLokiQueryExpr(): string {\n      const trail = getTrailFor(scene);\n      const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail);\n\n      if (!isAdHocFiltersVariable(filtersVariable) || !filtersVariable.state.filters.length) {\n        return '';\n      }\n\n      const labelValuePairs = filtersVariable.state.filters.map(\n        (filter) => `${replaceKnownLabelNames(filter.key)}${filter.operator}\"${filter.value}\"`\n      );\n\n      return `{${labelValuePairs.join(',')}}`; // e.g. `{environment=\"dev\",region=\"us-west-1\"}`\n    },\n  });\n};\n","import { type DataSourceInstanceSettings, type DataSourceJsonData } from '@grafana/data';\nimport { MetricExpr, parser, PipelineExpr, Selector } from '@grafana/lezer-logql';\nimport { getBackendSrv, type BackendSrvRequest, type FetchResponse } from '@grafana/runtime';\nimport { type SyntaxNode } from '@lezer/common';\nimport { lastValueFrom } from 'rxjs';\n\nimport { createMetricsLogsConnector, type FoundLokiDataSource } from './base';\nimport { logger } from '../../shared/logger/logger';\nimport { getDataSourceFetcher } from '../../shared/utils/utils.datasource';\n\nexport interface RecordingRuleGroup {\n  name: string;\n  rules: RecordingRule[];\n}\n\nexport interface RecordingRule {\n  name: string;\n  query: string;\n  type: 'recording' | 'alerting' | string;\n  labels?: Record<string, string>;\n}\n\nexport interface ExtractedRecordingRule extends RecordingRule {\n  datasource: FoundLokiDataSource;\n  hasMultipleOccurrences?: boolean;\n}\n\nexport interface ExtractedRecordingRules {\n  [dataSourceUID: string]: ExtractedRecordingRule[];\n}\n\n/**\n * Fetch Loki recording rule groups from the specified datasource.\n *\n * @param datasourceSettings - The settings of the datasource instance.\n * @returns A promise that resolves to an array of recording rule groups.\n */\nasync function fetchRecordingRuleGroups(datasourceSettings: DataSourceInstanceSettings<DataSourceJsonData>) {\n  const recordingRuleUrl = `api/prometheus/${datasourceSettings.uid}/api/v1/rules`;\n  const recordingRules: BackendSrvRequest = { url: recordingRuleUrl, showErrorAlert: false, showSuccessAlert: false };\n  const res = await lastValueFrom<\n    FetchResponse<{\n      data: { groups: RecordingRuleGroup[] };\n    }>\n  >(getBackendSrv().fetch(recordingRules));\n\n  if (!res.ok) {\n    logger.warn(`Failed to fetch recording rules from Loki data source: ${datasourceSettings.name}`);\n    return [];\n  }\n\n  return res.data.data.groups;\n}\n\n/**\n * Extract recording rules from the provided rule groups and associate them with the given data source.\n *\n * @param ruleGroups - An array of recording rule groups to extract rules from.\n * @param ds - The data source instance settings to associate with the extracted rules.\n * @returns An array of extracted recording rules, each associated with the provided data source.\n */\nexport function extractRecordingRulesFromRuleGroups(\n  ruleGroups: RecordingRuleGroup[],\n  ds: DataSourceInstanceSettings<DataSourceJsonData>\n): ExtractedRecordingRule[] {\n  if (ruleGroups.length === 0) {\n    return [];\n  }\n\n  // We only want to return the first matching rule when there are multiple rules with same name\n  const extractedRules = new Map<string, ExtractedRecordingRule>();\n  ruleGroups.forEach((rg) => {\n    rg.rules\n      .filter((r) => r.type === 'recording')\n      .forEach(({ type, name, query }) => {\n        const isExist = extractedRules.has(name);\n        if (isExist) {\n          // We already have the rule.\n          const existingRule = extractedRules.get(name);\n          if (existingRule) {\n            existingRule.hasMultipleOccurrences = true;\n            extractedRules.set(name, existingRule);\n          }\n        } else {\n          extractedRules.set(name, {\n            type,\n            name,\n            query,\n            datasource: {\n              name: ds.name,\n              uid: ds.uid,\n            },\n            hasMultipleOccurrences: false,\n          });\n        }\n      });\n  });\n\n  return Array.from(extractedRules.values());\n}\n\n/**\n * Retrieve an array of Loki data sources that contain recording rules with the specified metric name.\n *\n * @param metricName - The name of the metric to search for within the recording rules.\n * @param extractedRecordingRules - An object containing extracted recording rules, where each key is a string and the value is an array of recording rules.\n * @returns An array of `FoundLokiDataSource` objects that contain recording rules with the specified metric name.\n */\nexport function getDataSourcesWithRecordingRulesContainingMetric(\n  metricName: string,\n  extractedRecordingRules: ExtractedRecordingRules\n): FoundLokiDataSource[] {\n  const foundLokiDataSources: FoundLokiDataSource[] = [];\n  Object.values(extractedRecordingRules).forEach((recRules) => {\n    recRules\n      .filter((rr) => rr.name === metricName)\n      .forEach((rr) => {\n        foundLokiDataSources.push(rr.datasource);\n      });\n  });\n\n  return foundLokiDataSources;\n}\n\n/**\n * Generate a Loki query string for a related metric based on the provided metric name, data source ID,\n * and extracted recording rules.\n *\n * @param metricName - The name of the metric for which to generate the Loki query.\n * @param dataSourceUid - The UID of the data source containing the recording rules.\n * @param extractedRecordingRules - An object containing recording rules, indexed by data source UID.\n * @returns The generated Loki query string, or an empty string if the data source UID or metric name is not found.\n */\nexport function getLokiQueryForRelatedMetric(\n  metricName: string,\n  dataSourceUid: string,\n  extractedRecordingRules: ExtractedRecordingRules\n): string {\n  if (!dataSourceUid || !extractedRecordingRules[dataSourceUid]) {\n    return '';\n  }\n  const targetRule = extractedRecordingRules[dataSourceUid].find((rule) => rule.name === metricName);\n  if (!targetRule) {\n    return '';\n  }\n  const lokiQuery = getLogQueryFromMetricsQuery(targetRule.query);\n\n  return lokiQuery;\n}\n\n/**\n * Fetch and extract Loki recording rules from all Loki data sources.\n *\n * @returns {Promise<ExtractedRecordingRules>} A promise that resolves to an object containing\n * the extracted recording rules, keyed by data source UID.\n *\n * @throws Will log a warning if fetching or extracting rules fails for any data source.\n */\nexport async function fetchAndExtractLokiRecordingRules() {\n  const lokiDataSources = await getDataSourceFetcher().getHealthyDataSources('loki');\n  const extractedRecordingRules: ExtractedRecordingRules = {};\n  await Promise.all(\n    lokiDataSources.map(async (dataSource) => {\n      try {\n        const ruleGroups: RecordingRuleGroup[] = await fetchRecordingRuleGroups(dataSource);\n        const extractedRules = extractRecordingRulesFromRuleGroups(ruleGroups, dataSource);\n        extractedRecordingRules[dataSource.uid] = extractedRules;\n      } catch (err) {\n        logger.warn(err);\n      }\n    })\n  );\n\n  return extractedRecordingRules;\n}\n\nexport const createLokiRecordingRulesConnector = () => {\n  let lokiRecordingRules: ExtractedRecordingRules = {};\n\n  // In this connector, conditions have been met for related logs\n  // when we find at least one data source with recording rules\n  // containing the selected metric\n  let conditionsMetForRelatedLogs = false;\n\n  return createMetricsLogsConnector({\n    name: 'lokiRecordingRules',\n    checkConditionsMetForRelatedLogs: () => conditionsMetForRelatedLogs,\n    async getDataSources(selectedMetric: string): Promise<FoundLokiDataSource[]> {\n      lokiRecordingRules = await fetchAndExtractLokiRecordingRules();\n      const lokiDataSources = getDataSourcesWithRecordingRulesContainingMetric(selectedMetric, lokiRecordingRules);\n      conditionsMetForRelatedLogs = Boolean(lokiDataSources.length);\n\n      return lokiDataSources;\n    },\n    getLokiQueryExpr(selectedMetric: string, datasourceUid: string): string {\n      return getLokiQueryForRelatedMetric(selectedMetric, datasourceUid, lokiRecordingRules);\n    },\n  });\n};\n\n/**\n * Returns whether the given query is a logs query (not a metrics query)\n * A query that's at least 3 characters long and doesn't contain a MetricExpr node is considered a logs query\n */\nfunction isLogsQuery(query: string): boolean {\n  if (query.trim().length <= 2) {\n    return false;\n  }\n\n  let hasMetricExpr = false;\n  const tree = parser.parse(query);\n\n  tree.iterate({\n    enter: ({ type }): false | void => {\n      if (type.id === MetricExpr) {\n        hasMetricExpr = true;\n        return false;\n      }\n    },\n  });\n\n  return !hasMetricExpr;\n}\n\n/**\n * Gets a node of the specified type from a LogQL query string\n * Returns undefined if no node of that type is found\n */\nfunction getNodeFromQuery(query: string, nodeType: number): SyntaxNode | undefined {\n  let foundNode: SyntaxNode | undefined;\n  const tree = parser.parse(query);\n\n  tree.iterate({\n    enter: (node): false | void => {\n      if (node.type.id === nodeType) {\n        foundNode = node.node;\n        return false;\n      }\n    },\n  });\n\n  return foundNode;\n}\n\n/**\n * Extracts the underlying log query from a metrics query\n * For metrics queries, it returns the selector and pipeline parts\n * For logs queries, it returns the original query unchanged\n * Returns an empty string if no valid query can be extracted\n *\n * @example\n * // Returns '{foo=\"bar\"} |= \"error\"'\n * getLogQueryFromMetricsQuery('rate({foo=\"bar\"} |= \"error\"[5m])')\n *\n * // Returns '{foo=\"bar\"}'\n * getLogQueryFromMetricsQuery('sum(rate({foo=\"bar\"}[5m]))')\n *\n * // Returns original query unchanged\n * getLogQueryFromMetricsQuery('{foo=\"bar\"} |= \"error\"')\n */\nexport function getLogQueryFromMetricsQuery(query: string): string {\n  // If it's already a logs query, return as-is\n  if (isLogsQuery(query)) {\n    return query;\n  }\n\n  // Get the selector node which contains the log query matchers\n  const selectorNode = getNodeFromQuery(query, Selector);\n  if (!selectorNode) {\n    return '';\n  }\n\n  const selector = query.substring(selectorNode.from, selectorNode.to);\n\n  // Get the pipeline expression node if it exists (contains filters, parsers etc.)\n  const pipelineExprNode = getNodeFromQuery(query, PipelineExpr);\n  const pipelineExpr = pipelineExprNode ? query.substring(pipelineExprNode.from, pipelineExprNode.to) : '';\n\n  // Combine selector with pipeline expression if it exists\n  return `${selector} ${pipelineExpr}`.trim();\n}\n","import { LoadingState } from '@grafana/data';\nimport { SceneQueryRunner, type QueryRunnerState } from '@grafana/scenes';\n\nimport { type MetricsLogsConnector } from '../../Integrations/logs/base';\nimport { createLabelsCrossReferenceConnector } from '../../Integrations/logs/labelsCrossReference';\nimport { createLokiRecordingRulesConnector } from '../../Integrations/logs/lokiRecordingRules';\nimport pluginJson from '../../plugin.json';\nimport { getDataSourceFetcher, type DataSource } from '../../shared/utils/utils.datasource';\nimport { type MetricScene } from '../MetricScene';\n\n/**\n * Manager class that handles the orchestration of related logs functionality.\n * This centralizes logs-related logic that was previously spread across multiple components.\n */\nexport class RelatedLogsOrchestrator {\n  private readonly _logsConnectors: MetricsLogsConnector[];\n  private readonly _metricScene: MetricScene;\n  private readonly _dataSourceFetcher = getDataSourceFetcher();\n  private readonly _changeHandlers = {\n    lokiDataSources: [] as Array<(dataSources: DataSource[]) => void>,\n    relatedLogsCount: [] as Array<(count: number) => void>,\n  };\n  /**\n   * Internal state that powers public properties defined by getters and setters.\n   */\n  private readonly _internalState = {\n    relatedLogsCount: 0,\n    lokiDataSources: [] as DataSource[],\n  };\n\n  constructor(metricScene: MetricScene) {\n    this._metricScene = metricScene;\n    this._logsConnectors = [createLokiRecordingRulesConnector(), createLabelsCrossReferenceConnector(metricScene)];\n  }\n\n  get lokiDataSources() {\n    return this._internalState.lokiDataSources;\n  }\n\n  set lokiDataSources(dataSources: DataSource[]) {\n    const currentDataSourcesSignature = this._internalState.lokiDataSources.map((ds) => ds.uid).join(',');\n    const newDataSourcesSignature = dataSources.map((ds) => ds.uid).join(',');\n\n    if (currentDataSourcesSignature && currentDataSourcesSignature === newDataSourcesSignature) {\n      return;\n    }\n\n    this._internalState.lokiDataSources = dataSources;\n    this._changeHandlers.lokiDataSources.forEach((handler) => handler(this._internalState.lokiDataSources));\n  }\n\n  set relatedLogsCount(count: number) {\n    this._internalState.relatedLogsCount = count;\n    this._changeHandlers.relatedLogsCount.forEach((handler) => handler(this._internalState.relatedLogsCount));\n  }\n\n  /**\n   * Add a listener that will be called when the lokiDataSources change.\n   */\n  addLokiDataSourcesChangeHandler(handler: (dataSources: DataSource[]) => void) {\n    this._changeHandlers.lokiDataSources.push(handler);\n  }\n\n  /**\n   * Add a listener that will be called when the relatedLogsCount changes.\n   */\n  addRelatedLogsCountChangeHandler(handler: (count: number) => void) {\n    this._changeHandlers.relatedLogsCount.push(handler);\n  }\n\n  /**\n   * Called when filters change to re-check for logs in datasources.\n   */\n  public handleFiltersChange(): void {\n    if (!this.lokiDataSources) {\n      return;\n    }\n\n    // When filters change, we need to reset our state to trigger updates in listeners\n    // Setting to empty array (vs undefined) signals we're actively checking\n    this.lokiDataSources = [];\n    this.relatedLogsCount = 0;\n\n    // Check all available datasources for logs after filter changes\n    this.findAndCheckAllDatasources();\n  }\n\n  /**\n   * Find all available datasources and check them for logs.\n   * This is used when filters change to ensure we're checking all possible datasources.\n   */\n  public async findAndCheckAllDatasources(): Promise<void> {\n    // Get all available Loki datasources\n    const allLokiDatasources = await this._dataSourceFetcher.getHealthyDataSources('loki');\n\n    // Check all datasources for logs\n    if (allLokiDatasources.length > 0) {\n      this.checkLogsInDataSources(allLokiDatasources);\n    } else {\n      // No datasources available\n      this.lokiDataSources = [];\n      this.relatedLogsCount = 0;\n    }\n  }\n\n  /**\n   * Get the Loki queries for a given datasource.\n   */\n  public getLokiQueries(\n    datasourceUid: string,\n    maxLines = 100\n  ): Array<{ refId: string; expr: string; maxLines: number }> {\n    const { metric } = this._metricScene.state;\n    const queriesByConnector = this._logsConnectors.reduce<Record<string, string>>((acc, connector, idx) => {\n      const lokiExpr = connector.getLokiQueryExpr(metric, datasourceUid);\n      if (lokiExpr) {\n        acc[connector.name ?? `connector-${idx}`] = lokiExpr;\n      }\n      return acc;\n    }, {});\n\n    const queries = Object.keys(queriesByConnector).map((connectorName) => ({\n      refId: `RelatedLogs-${connectorName}`,\n      expr: queriesByConnector[connectorName],\n      maxLines,\n      supportingQueryType: pluginJson.id,\n    }));\n\n    return queries;\n  }\n\n  /**\n   * Check each datasource for logs, then update the datasources and relatedLogsCount accordingly.\n   */\n  private checkLogsInDataSources(datasources: DataSource[]): void {\n    // Check each datasource for logs\n    const datasourcesWithLogs: DataSource[] = [];\n    let totalLogsCount = 0;\n    let totalChecked = 0;\n\n    // If no datasources to check, update immediately\n    if (datasources.length === 0) {\n      this.lokiDataSources = [];\n      this.relatedLogsCount = 0;\n      return;\n    }\n\n    // Check each datasource for logs\n    datasources.forEach((datasource) => {\n      const queryRunner = new SceneQueryRunner({\n        datasource: { uid: datasource.uid },\n        queries: [],\n        key: `related_logs_check_${datasource.uid}`,\n      });\n\n      // Build and set queries\n      queryRunner.setState({\n        queries: this.getLokiQueries(datasource.uid),\n      });\n\n      // Subscribe to results\n      queryRunner.subscribeToState((state) => {\n        if (state.data?.state === LoadingState.Done) {\n          totalChecked++;\n\n          // Check if we found logs in this datasource\n          if (state.data?.series) {\n            const rowCount = this.countLogsLines(state);\n            if (rowCount > 0) {\n              // This datasource has logs\n              datasourcesWithLogs.push(datasource);\n              totalLogsCount += rowCount;\n            }\n          }\n\n          // When all datasources have been checked\n          if (totalChecked === datasources.length) {\n            // Update state with our findings\n            this.lokiDataSources = datasourcesWithLogs;\n            this.relatedLogsCount = totalLogsCount;\n          }\n        }\n      });\n\n      // Activate query\n      queryRunner.activate();\n    });\n  }\n\n  /**\n   * Returns true if any of the connectors have conditions met for related logs to be shown.\n   */\n  public checkConditionsMetForRelatedLogs(): boolean {\n    return this._logsConnectors.some((connector) => connector.checkConditionsMetForRelatedLogs());\n  }\n\n  /**\n   * Given the state of a query runner running a Loki query, count the number of log lines.\n   */\n  public countLogsLines(state: QueryRunnerState): number {\n    return state.data?.series.reduce((sum: number, frame) => sum + frame.length, 0) ?? 0;\n  }\n}\n","import { css } from '@emotion/css';\nimport { type GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Stack, Text, TextLink, useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nexport function NoRelatedLogs() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Alert title=\"No related logs found\" severity=\"info\">\n        We couldn&apos;t find any logs related to the current metric with your selected filters.\n      </Alert>\n      <Text>\n        To find related logs, try the following:\n        <ul className={styles.list}>\n          <li>Adjust your label filters to include labels that exist in both the current metric and your logs</li>\n          <li>\n            Select a metric created by a{' '}\n            <TextLink external href=\"https://grafana.com/docs/loki/latest/alert/#recording-rules\">\n              Loki Recording Rule\n            </TextLink>\n          </li>\n          <li>Broaden the time range to include more data</li>\n        </ul>\n      </Text>\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Note: Related logs is an experimental feature.\n      </Text>\n    </Stack>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      paddingLeft: theme.spacing(2),\n      marginTop: theme.spacing(1),\n    }),\n  };\n}\n","import { config, usePluginLinks } from '@grafana/runtime';\nimport { type SceneDataQuery, type SceneTimeRangeState } from '@grafana/scenes';\nimport { LinkButton } from '@grafana/ui';\nimport React, { useMemo } from 'react';\n\nimport { reportExploreMetrics } from '../../shared/tracking/interactions';\n\nconst extensionPointId = 'grafana-metricsdrilldown-app/open-in-logs-drilldown/v1';\n\nexport interface LogsDrilldownLinkContext {\n  targets: SceneDataQuery[];\n  timeRange?: SceneTimeRangeState;\n}\n\nexport function OpenInLogsDrilldownButton({ context }: Readonly<{ context: LogsDrilldownLinkContext }>) {\n  const memoizedContext = useMemo(() => context, [context]);\n  const { links, isLoading } = usePluginLinks({\n    extensionPointId,\n    limitPerPlugin: 1,\n    context: memoizedContext,\n  });\n  const logsDrilldownLink = useMemo(() => {\n    return links.find(({ pluginId }) => pluginId === 'grafana-lokiexplore-app');\n  }, [links]);\n\n  if (isLoading) {\n    return (\n      <LinkButton variant=\"secondary\" size=\"sm\" disabled>\n        Loading...\n      </LinkButton>\n    );\n  }\n\n  const logsDrilldownLinkExists = typeof logsDrilldownLink !== 'undefined';\n\n  return (\n    <LinkButton\n      href={\n        // We prefix with the appSubUrl for environments that don't host grafana at the root.\n        logsDrilldownLinkExists\n          ? `${config.appSubUrl}${logsDrilldownLink.path}`\n          : `${config.appSubUrl}/a/grafana-lokiexplore-app` // We fall back to the app's landing page if a link can't get generated using the supplied `context`\n      }\n      target=\"_blank\"\n      tooltip={\n        logsDrilldownLinkExists\n          ? 'Use the Logs Drilldown app to explore these logs'\n          : 'Navigate to the Logs Drilldown app'\n      }\n      variant=\"secondary\"\n      size=\"sm\"\n      onClick={() => reportExploreMetrics('related_logs_action_clicked', { action: 'open_logs_drilldown' })}\n    >\n      {logsDrilldownLinkExists ? 'Open in Logs Drilldown' : 'Open Logs Drilldown'}\n    </LinkButton>\n  );\n}\n","import { LoadingState } from '@grafana/data';\nimport {\n  CustomVariable,\n  PanelBuilders,\n  SceneFlexItem,\n  SceneFlexLayout,\n  sceneGraph,\n  SceneObjectBase,\n  SceneQueryRunner,\n  SceneReactObject,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  VariableValueSelectors,\n  type QueryRunnerState,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneVariable,\n} from '@grafana/scenes';\nimport { Spinner, Stack } from '@grafana/ui';\nimport React from 'react';\n\nimport { NoRelatedLogs } from './NoRelatedLogsFound';\nimport { OpenInLogsDrilldownButton, type LogsDrilldownLinkContext } from './OpenInLogsDrilldownButton';\nimport { type RelatedLogsOrchestrator } from './RelatedLogsOrchestrator';\nimport { VAR_FILTERS, VAR_LOGS_DATASOURCE, VAR_LOGS_DATASOURCE_EXPR } from '../../shared/shared';\nimport { reportExploreMetrics } from '../../shared/tracking/interactions';\nimport { isCustomVariable } from '../../shared/utils/utils.variables';\n\ninterface RelatedLogsSceneProps {\n  orchestrator: RelatedLogsOrchestrator;\n}\n\ninterface RelatedLogsSceneState extends SceneObjectState, RelatedLogsSceneProps {\n  loading: boolean;\n  controls: SceneObject[];\n  body: SceneFlexLayout;\n  logsDrilldownLinkContext: LogsDrilldownLinkContext;\n}\n\nconst LOGS_PANEL_CONTAINER_KEY = 'related_logs/logs_panel_container';\nconst RELATED_LOGS_QUERY_KEY = 'related_logs/logs_query';\n\nexport class RelatedLogsScene extends SceneObjectBase<RelatedLogsSceneState> {\n  private _queryRunner?: SceneQueryRunner;\n\n  constructor(props: RelatedLogsSceneProps) {\n    super({\n      loading: false,\n      controls: [],\n      body: new SceneFlexLayout({\n        direction: 'column',\n        height: '100%',\n        minHeight: 500,\n        children: [\n          new SceneFlexItem({\n            key: LOGS_PANEL_CONTAINER_KEY,\n            body: undefined,\n          }),\n        ],\n      }),\n      orchestrator: props.orchestrator,\n      logsDrilldownLinkContext: {\n        targets: [],\n      },\n    });\n\n    this.addActivationHandler(() => {\n      this._onActivate();\n    });\n  }\n\n  private async _onActivate() {\n    // Register handler for future changes to lokiDataSources\n    this.state.orchestrator.addLokiDataSourcesChangeHandler(() => this.setupLogsPanel());\n\n    // If data sources have already been loaded, we don't need to fetch them again\n    if (!this.state.orchestrator.lokiDataSources.length) {\n      this.setState({ loading: true });\n      await this.state.orchestrator.findAndCheckAllDatasources();\n      this.setState({ loading: false });\n    } else {\n      this.setupLogsPanel();\n    }\n  }\n\n  private showNoLogsFound() {\n    const logsPanelContainer = sceneGraph.findByKeyAndType(this, LOGS_PANEL_CONTAINER_KEY, SceneFlexItem);\n    logsPanelContainer.setState({\n      body: new SceneReactObject({ component: NoRelatedLogs }),\n    });\n    this.setState({\n      controls: undefined,\n    });\n    this.state.orchestrator.relatedLogsCount = 0;\n  }\n\n  private _buildQueryRunner(): void {\n    this._queryRunner = new SceneQueryRunner({\n      datasource: { uid: VAR_LOGS_DATASOURCE_EXPR },\n      queries: [],\n      key: RELATED_LOGS_QUERY_KEY,\n    });\n    this._constructLogsDrilldownLinkContext(this._queryRunner.state);\n\n    // Set up subscription to query results\n    this._subs.add(\n      this._queryRunner.subscribeToState((state) => {\n        if (state.data?.state !== LoadingState.Done) {\n          // Only process completed query results\n          return;\n        }\n\n        const logLinesCount = this.state.orchestrator.countLogsLines(state);\n\n        if (logLinesCount === 0) {\n          // Show NoRelatedLogs if no logs found\n          this.showNoLogsFound();\n        }\n\n        this._constructLogsDrilldownLinkContext(state);\n      })\n    );\n  }\n\n  private setupLogsPanel(): void {\n    // Initialize query runner\n    this._buildQueryRunner();\n\n    // If no datasources can provide related logs given the current conditions, show the NoRelatedLogsScene\n    if (!this.state.orchestrator.lokiDataSources.length) {\n      this.showNoLogsFound();\n      return;\n    }\n\n    // Set up UI for logs panel\n    const logsPanelContainer = sceneGraph.findByKeyAndType(this, LOGS_PANEL_CONTAINER_KEY, SceneFlexItem);\n    logsPanelContainer.setState({\n      body: PanelBuilders.logs()\n        .setTitle('Logs')\n        .setOption('showLogContextToggle', true)\n        .setOption('showTime', true)\n        .setOption('showControls', true)\n        // See https://github.com/grafana/logs-drilldown/blob/5225d621bbf24756559a15ce68d71437be8ca83e/src/services/store.ts#L243\n        .setOption('controlsStorageKey', 'grafana.explore.logs')\n        .setData(this._queryRunner)\n        .build(),\n    });\n\n    // Set up variables for datasource selection\n    const logsDataSourceVariable = new CustomVariable({\n      name: VAR_LOGS_DATASOURCE,\n      label: 'Logs data source',\n      query: this.state.orchestrator.lokiDataSources.map((ds) => `${ds.name} : ${ds.uid}`).join(','),\n    });\n    this.setState({\n      $variables: new SceneVariableSet({ variables: [logsDataSourceVariable] }),\n      controls: [new VariableValueSelectors({ layout: 'vertical' })],\n    });\n    this._subs.add(\n      logsDataSourceVariable.subscribeToState((newState, prevState) => {\n        if (newState.value !== prevState.value) {\n          reportExploreMetrics('related_logs_action_clicked', { action: 'logs_data_source_changed' });\n        }\n      })\n    );\n\n    // Update Loki query\n    this.updateLokiQuery();\n  }\n\n  /**\n   * Construct the Logs Drilldown link context based on the query runner state\n   * @param state - The query runner state.\n   */\n  private _constructLogsDrilldownLinkContext(state: QueryRunnerState) {\n    const dsUid = (sceneGraph.lookupVariable(VAR_LOGS_DATASOURCE, this)?.getValue() ?? '') as string;\n    const queries = state.queries;\n    const targets: LogsDrilldownLinkContext['targets'] = [];\n\n    if (dsUid && queries.length) {\n      queries.forEach((query) => {\n        targets.push({\n          ...query,\n          datasource: {\n            uid: dsUid,\n            type: 'loki',\n          },\n        });\n      });\n    }\n\n    this.setState({\n      logsDrilldownLinkContext: { targets, timeRange: sceneGraph.getTimeRange(this).state },\n    });\n  }\n\n  /**\n   * Updates the Loki query based on the configured connectors, selected datasource, and current filters.\n   * This function is called when the selected datasource or filters change.\n   */\n  private updateLokiQuery() {\n    if (!this._queryRunner) {\n      return;\n    }\n\n    const selectedDatasourceVar = sceneGraph.lookupVariable(VAR_LOGS_DATASOURCE, this);\n\n    let selectedDatasourceUid: string | undefined = undefined;\n\n    if (isCustomVariable(selectedDatasourceVar)) {\n      selectedDatasourceUid = selectedDatasourceVar.getValue() as string;\n    }\n\n    if (!selectedDatasourceUid) {\n      return;\n    }\n\n    const queries = this.state.orchestrator.getLokiQueries(selectedDatasourceUid);\n\n    // If no queries were generated, show the NoRelatedLogsScene\n    if (queries.length === 0) {\n      this.showNoLogsFound();\n      return;\n    }\n\n    // Update queries - this will trigger the query runner to fetch new data\n    // The query results will be processed in the subscription handler\n    this._queryRunner.setState({ queries });\n  }\n\n  // Handle variable changes\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_LOGS_DATASOURCE, VAR_FILTERS],\n    onReferencedVariableValueChanged: (variable: SceneVariable) => {\n      if (variable.state.name === VAR_FILTERS) {\n        this.state.orchestrator.handleFiltersChange();\n      } else if (variable.state.name === VAR_LOGS_DATASOURCE) {\n        this.updateLokiQuery();\n      }\n    },\n  });\n\n  static readonly Component = ({ model }: SceneComponentProps<RelatedLogsScene>) => {\n    const { controls, body, logsDrilldownLinkContext, loading } = model.useState();\n\n    if (loading) {\n      return <Spinner />;\n    }\n\n    return (\n      <Stack gap={1} direction={'column'} grow={1} height=\"100%\">\n        <Stack gap={1} direction={'row'} justifyContent={'space-between'} alignItems={'start'}>\n          <Stack gap={1}>\n            {controls?.map((control) => (\n              <control.Component key={control.state.key} model={control} />\n            ))}\n          </Stack>\n          <OpenInLogsDrilldownButton context={logsDrilldownLinkContext} />\n        </Stack>\n        <body.Component model={body} />\n      </Stack>\n    );\n  };\n}\n","import { css } from '@emotion/css';\nimport { config } from '@grafana/runtime';\nimport {\n  ConstantVariable,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneVariableSet,\n  VariableDependencyConfig,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n} from '@grafana/scenes';\nimport { VariableHide } from '@grafana/schema';\nimport { useStyles2 } from '@grafana/ui';\nimport React from 'react';\n\nimport { RefreshMetricsEvent, VAR_FILTERS, VAR_METRIC, type MakeOptional } from '../shared/shared';\nimport { GroupByVariable } from './Breakdown/GroupByVariable';\nimport { actionViews, actionViewsDefinitions, type ActionViewType } from './MetricActionBar';\nimport { MetricGraphScene } from './MetricGraphScene';\nimport { RelatedLogsOrchestrator } from './RelatedLogs/RelatedLogsOrchestrator';\nimport { RelatedLogsScene } from './RelatedLogs/RelatedLogsScene';\n\ninterface MetricSceneState extends SceneObjectState {\n  body: MetricGraphScene;\n  metric: string;\n  actionView?: ActionViewType;\n  relatedLogsCount?: number;\n}\n\nexport class MetricScene extends SceneObjectBase<MetricSceneState> {\n  public readonly relatedLogsOrchestrator = new RelatedLogsOrchestrator(this);\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, { keys: ['actionView'] });\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [VAR_FILTERS],\n    onReferencedVariableValueChanged: () => {\n      // When filters change, we need to re-check for related logs\n\n      this.relatedLogsOrchestrator.handleFiltersChange();\n    },\n  });\n\n  public constructor(state: MakeOptional<MetricSceneState, 'body'>) {\n    super({\n      $variables: state.$variables ?? getVariableSet(state.metric),\n      body: state.body ?? new MetricGraphScene({ metric: state.metric }),\n      ...state,\n    });\n\n    this.addActivationHandler(this._onActivate.bind(this));\n  }\n\n  private _onActivate() {\n    if (this.state.actionView === undefined) {\n      this.setActionView(actionViews.breakdown);\n    }\n\n    this.relatedLogsOrchestrator.findAndCheckAllDatasources();\n    this.relatedLogsOrchestrator.addRelatedLogsCountChangeHandler((count) => {\n      this.setState({ relatedLogsCount: count });\n    });\n\n    this.subscribeToEvents();\n  }\n\n  private subscribeToEvents() {\n    if (config.featureToggles.enableScopesInMetricsExplore) {\n      // Push the scopes change event to the tabs\n      // The event is not propagated because the tabs are not part of the scene graph\n      this.subscribeToEvent(RefreshMetricsEvent, (event) => {\n        this.state.body.state.selectedTab?.publishEvent(event);\n      });\n    }\n  }\n\n  getUrlState() {\n    return { actionView: this.state.actionView };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    if (typeof values.actionView === 'string') {\n      if (this.state.actionView !== values.actionView) {\n        const actionViewDef = actionViewsDefinitions.find((v) => v.value === values.actionView);\n        if (actionViewDef) {\n          this.setActionView(actionViewDef.value);\n        }\n      }\n    } else if (values.actionView === null) {\n      this.setActionView(null);\n    }\n  }\n\n  public setActionView(actionViewType: ActionViewType | null) {\n    const { body } = this.state;\n    const actionViewDef = actionViewType ? actionViewsDefinitions.find((v) => v.value === actionViewType) : null;\n\n    if (actionViewDef && actionViewDef.value !== this.state.actionView) {\n      body.setState({ selectedTab: actionViewDef.getScene(this) });\n      this.setState({ actionView: actionViewDef.value });\n    } else {\n      body.setState({ selectedTab: undefined });\n      this.setState({ actionView: undefined });\n    }\n  }\n\n  static readonly Component = ({ model }: SceneComponentProps<MetricScene>) => {\n    const { body } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={styles.container} data-testid=\"metric-scene\">\n        <body.Component model={body} />\n      </div>\n    );\n  };\n\n  public createRelatedLogsScene(): SceneObject<SceneObjectState> {\n    return new RelatedLogsScene({\n      orchestrator: this.relatedLogsOrchestrator,\n    });\n  }\n}\n\nfunction getVariableSet(metric: string) {\n  return new SceneVariableSet({\n    variables: [\n      new ConstantVariable({\n        name: VAR_METRIC,\n        value: metric,\n        hide: VariableHide.hideVariable,\n      }),\n      new GroupByVariable(),\n    ],\n  });\n}\n\nconst getStyles = () => ({\n  container: css({\n    position: 'relative',\n    height: '100%',\n    width: '100%',\n    // Ensure proper flex behavior for sticky positioning\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { urlUtil, VariableHide, type AdHocVariableFilter, type GrafanaTheme2 } from '@grafana/data';\nimport { utf8Support } from '@grafana/prometheus';\nimport { config, useChromeHeaderHeight } from '@grafana/runtime';\nimport {\n  AdHocFiltersVariable,\n  SceneControlsSpacer,\n  sceneGraph,\n  SceneObjectBase,\n  SceneObjectUrlSyncConfig,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  sceneUtils,\n  SceneVariableSet,\n  ScopesVariable,\n  UrlSyncContextProvider,\n  VariableValueSelectors,\n  type SceneComponentProps,\n  type SceneObject,\n  type SceneObjectState,\n  type SceneObjectUrlValues,\n  type SceneObjectWithUrlSync,\n  type SceneVariable,\n} from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport React, { useEffect } from 'react';\n\nimport { GiveFeedbackButton } from 'AppDataTrail/header/GiveFeedbackButton';\nimport { SceneDrawer } from 'MetricsReducer/components/SceneDrawer';\nimport { displaySuccess } from 'MetricsReducer/helpers/displayStatus';\nimport { addRecentMetric } from 'MetricsReducer/list-controls/MetricsSorter/MetricsSorter';\nimport { MetricsVariable } from 'MetricsReducer/metrics-variables/MetricsVariable';\nimport { MetricsReducer } from 'MetricsReducer/MetricsReducer';\nimport { ConfigurePanelForm } from 'shared/GmdVizPanel/components/ConfigurePanelForm/ConfigurePanelForm';\nimport { EventApplyPanelConfig } from 'shared/GmdVizPanel/components/ConfigurePanelForm/EventApplyPanelConfig';\nimport { EventCancelConfigurePanel } from 'shared/GmdVizPanel/components/ConfigurePanelForm/EventCancelConfigurePanel';\nimport { EventConfigurePanel } from 'shared/GmdVizPanel/components/EventConfigurePanel';\nimport { GmdVizPanel } from 'shared/GmdVizPanel/GmdVizPanel';\nimport { getMetricType, getMetricTypeSync, type MetricType } from 'shared/GmdVizPanel/matchers/getMetricType';\n\nimport { PluginInfo } from './header/PluginInfo/PluginInfo';\nimport { SelectNewMetricButton } from './header/SelectNewMetricButton';\nimport { MetricDatasourceHelper } from './MetricDatasourceHelper/MetricDatasourceHelper';\nimport { MetricsDrilldownDataSourceVariable } from './MetricsDrilldownDataSourceVariable';\nimport { resetYAxisSync } from '../MetricScene/Breakdown/MetricLabelsList/behaviors/syncYAxis';\nimport { MetricScene } from '../MetricScene/MetricScene';\nimport { MetricSelectedEvent, trailDS, VAR_FILTERS } from '../shared/shared';\nimport { reportChangeInLabelFilters, reportExploreMetrics } from '../shared/tracking/interactions';\nimport { limitAdhocProviders } from '../shared/utils/utils';\nimport { getAppBackgroundColor } from '../shared/utils/utils.styles';\nimport { isAdHocFiltersVariable } from '../shared/utils/utils.variables';\n\nexport interface DataTrailState extends SceneObjectState {\n  topScene?: SceneObject;\n  embedded?: boolean;\n  controls: SceneObject[];\n  createdAt: number;\n\n  // wingman\n  dashboardMetrics?: Record<string, number>;\n  alertingMetrics?: Record<string, number>;\n\n  // just for the starting data source\n  initialDS?: string;\n  initialFilters?: AdHocVariableFilter[];\n\n  // Synced with url\n  metric?: string;\n\n  urlNamespace?: string; // optional namespace for url params, to avoid conflicts with other plugins in embedded mode\n\n  drawer: SceneDrawer;\n}\n\nexport class DataTrail extends SceneObjectBase<DataTrailState> implements SceneObjectWithUrlSync {\n  private disableReportFiltersInteraction = false;\n  private datasourceHelper = new MetricDatasourceHelper(this);\n\n  protected _urlSync = new SceneObjectUrlSyncConfig(this, {\n    keys: ['metric'],\n  });\n\n  getUrlState(): SceneObjectUrlValues {\n    return {\n      metric: this.state.metric,\n    };\n  }\n\n  updateFromUrl(values: SceneObjectUrlValues) {\n    this.updateStateForNewMetric((values.metric as string) || undefined);\n  }\n\n  public constructor(state: Partial<DataTrailState>) {\n    super({\n      $timeRange: state.$timeRange ?? new SceneTimeRange({}),\n      $variables: state.$variables ?? getVariableSet(state.initialDS, state.metric, state.initialFilters),\n      controls: state.controls ?? [\n        new VariableValueSelectors({ layout: 'vertical' }),\n        new SceneControlsSpacer(),\n        new SceneTimePicker({}),\n        new SceneRefreshPicker({}),\n      ],\n      createdAt: state.createdAt ?? new Date().getTime(),\n      dashboardMetrics: {},\n      alertingMetrics: {},\n      drawer: new SceneDrawer({}),\n      ...state,\n    });\n\n    this.addActivationHandler(this.onActivate.bind(this));\n  }\n\n  private onActivate() {\n    this.datasourceHelper.init();\n\n    this.updateStateForNewMetric(this.state.metric);\n    this.subscribeToEvent(MetricSelectedEvent, (event) => this.handleMetricSelectedEvent(event));\n\n    this.initFilters();\n    this.initConfigPrometheusFunction();\n  }\n\n  private updateStateForNewMetric(metric?: string) {\n    if (!this.state.topScene || metric !== this.state.metric) {\n      // Update controls based on whether a metric is selected\n      const baseControls = [new VariableValueSelectors({ layout: 'vertical' }), new SceneControlsSpacer()];\n\n      // Only add SelectNewMetricButton when a metric is selected\n      const controls = metric\n        ? [...baseControls, new SelectNewMetricButton(), new SceneTimePicker({}), new SceneRefreshPicker({})]\n        : [...baseControls, new SceneTimePicker({}), new SceneRefreshPicker({})];\n\n      this.setState({\n        metric,\n        topScene: metric ? new MetricScene({ metric }) : new MetricsReducer(),\n        controls,\n      });\n    }\n  }\n\n  private initFilters() {\n    const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    if (!isAdHocFiltersVariable(filtersVariable)) {\n      return;\n    }\n\n    limitAdhocProviders(this, filtersVariable, this.datasourceHelper);\n\n    // we ensure that, in the MetricsReducer, the Ad Hoc filters will display all the label names and values and\n    // we ensure that, in the MetricScene, the queries in the Scene graph will be considered and used as a filter\n    // to fetch label names and values\n    filtersVariable?.setState({\n      useQueriesAsFilterForOptions: Boolean(this.state.metric),\n    });\n\n    this.subscribeToState((newState, prevState) => {\n      if (newState.metric !== prevState.metric) {\n        const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n\n        if (isAdHocFiltersVariable(filtersVariable)) {\n          filtersVariable.setState({\n            useQueriesAsFilterForOptions: Boolean(newState.metric),\n          });\n        }\n      }\n    });\n\n    this._subs.add(\n      filtersVariable?.subscribeToState((newState, prevState) => {\n        if (!this.disableReportFiltersInteraction && newState.filters !== prevState.filters) {\n          reportChangeInLabelFilters(newState.filters, prevState.filters);\n        }\n      })\n    );\n  }\n\n  private initConfigPrometheusFunction() {\n    this.subscribeToState((newState, prevState) => {\n      if (newState.metric !== prevState.metric) {\n        // ensures that the drawer is closed when using browser nav buttons\n        this.state.drawer.close();\n      }\n    });\n\n    this.subscribeToEvent(EventConfigurePanel, async (event) => {\n      const { metric } = event.payload;\n\n      getMetricType(metric, this)\n        .catch(() => getMetricTypeSync(metric) as MetricType)\n        .then((metricType) => {\n          reportExploreMetrics('configure_panel_opened', { metricType });\n        });\n\n      const metricType = await getMetricType(metric, this);\n\n      this.state.drawer.open({\n        title: 'Configure the Prometheus function',\n        subTitle: `${metric} (${metricType})`,\n        body: new ConfigurePanelForm({ metric }),\n      });\n    });\n\n    this.subscribeToEvent(EventCancelConfigurePanel, () => {\n      this.state.drawer.close();\n    });\n\n    this.subscribeToEvent(EventApplyPanelConfig, async (event) => {\n      const { metric, config, restoreDefault } = event.payload;\n\n      getMetricType(metric, this)\n        .catch(() => getMetricTypeSync(metric) as MetricType)\n        .then((metricType) => {\n          if (restoreDefault) {\n            reportExploreMetrics('default_panel_config_restored', { metricType });\n          } else {\n            reportExploreMetrics('panel_config_applied', { metricType, configId: config.id });\n          }\n        });\n\n      this.state.drawer.close();\n\n      // because the Prometheus function used to display the metric is going to be updated, the range of\n      // values for syncing the axis will certainly change (e.g. switching from sum to avg)\n      // so we reset it before updating all the panels\n      resetYAxisSync(this.state.topScene || this);\n\n      const panelsToUpdate = sceneGraph.findAllObjects(\n        this.state.topScene || this,\n        (o) => o instanceof GmdVizPanel && o.state.metric === metric && !o.state.queryConfig.groupBy\n      ) as GmdVizPanel[];\n\n      for (const panel of panelsToUpdate) {\n        panel.update(config.panelOptions, config.queryOptions);\n      }\n\n      displaySuccess([`Configuration successfully ${restoreDefault ? 'restored' : 'applied'} for metric ${metric}!`]);\n    });\n  }\n\n  private async handleMetricSelectedEvent(event: MetricSelectedEvent) {\n    const { metric, urlValues } = event.payload;\n\n    if (metric) {\n      addRecentMetric(metric);\n    }\n\n    // Add metric to adhoc filters baseFilter\n    const filterVar = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    if (isAdHocFiltersVariable(filterVar)) {\n      filterVar.setState({\n        baseFilters: getBaseFiltersForMetric(metric),\n      });\n    }\n\n    this._urlSync.performBrowserHistoryAction(() => {\n      this.updateStateForNewMetric(metric);\n\n      if (urlValues) {\n        // make sure we reset the filters when navigating from a bookmark where urlsValues['var_vilters']: []\n        // it seems relevant to do it here and not anywhere else in the code base\n        if (!urlValues[`var-${VAR_FILTERS}`]?.length) {\n          urlValues[`var-${VAR_FILTERS}`] = [''];\n        }\n\n        const urlState = urlUtil.renderUrl('', urlValues);\n        sceneUtils.syncStateFromSearchParams(this, new URLSearchParams(urlState));\n      }\n    });\n  }\n\n  /**\n   * Assuming that the change in filter was already reported with a cause other than `'adhoc_filter'`,\n   * this will modify the adhoc filter variable and prevent the automatic reporting which would\n   * normally occur through the call to `reportChangeInLabelFilters`.\n   *\n   * See AddToFiltersGraphAction.tsx\n   */\n  public addFilterWithoutReportingInteraction(filter: AdHocVariableFilter) {\n    const variable = sceneGraph.lookupVariable(VAR_FILTERS, this);\n    if (!isAdHocFiltersVariable(variable)) {\n      return;\n    }\n\n    this.disableReportFiltersInteraction = true;\n    variable.setState({ filters: [...variable.state.filters, filter] });\n    this.disableReportFiltersInteraction = false;\n  }\n\n  public async getMetadataForMetric(metric: string) {\n    return this.datasourceHelper.getMetadataForMetric(metric);\n  }\n\n  public async isNativeHistogram(metric: string) {\n    return this.datasourceHelper.isNativeHistogram(metric);\n  }\n\n  getPrometheusBuildInfo = async () => {\n    return this.datasourceHelper.getPrometheusBuildInfo();\n  };\n\n  static readonly Component = ({ model }: SceneComponentProps<DataTrail>) => {\n    const { controls, topScene, embedded, drawer } = model.useState();\n\n    const chromeHeaderHeight = useChromeHeaderHeight() ?? 0;\n    const headerHeight = embedded ? 0 : chromeHeaderHeight;\n    const styles = useStyles2(getStyles, headerHeight, model);\n\n    // Set CSS custom property for app-controls height in embedded mode\n    useEffect(() => {\n      // Update on mount and when controls change\n      updateAppControlsHeight();\n\n      // Use ResizeObserver to watch for height changes\n      const appControls = document.querySelector('[data-testid=\"app-controls\"]');\n\n      if (!appControls) {\n        return;\n      }\n\n      const resizeObserver = new ResizeObserver(updateAppControlsHeight);\n      resizeObserver.observe(appControls);\n\n      return () => {\n        // Clean up\n        resizeObserver.disconnect();\n        document.documentElement.style.removeProperty('--app-controls-height');\n      };\n    }, [embedded, controls]);\n\n    return (\n      <>\n        <div className={styles.container}>\n          {controls && (\n            <div className={styles.controls} data-testid=\"app-controls\">\n              <GiveFeedbackButton />\n              {controls.map((control) => (\n                <control.Component key={control.state.key} model={control} />\n              ))}\n              <div className={styles.settingsInfo}>\n                <PluginInfo getPrometheusBuildInfo={model.getPrometheusBuildInfo} />\n              </div>\n            </div>\n          )}\n          {topScene && (\n            <UrlSyncContextProvider\n              scene={topScene}\n              createBrowserHistorySteps={true}\n              updateUrlOnInit={true}\n              namespace={model.state.urlNamespace}\n            >\n              <div className={styles.body}>{topScene && <topScene.Component model={topScene} />}</div>\n            </UrlSyncContextProvider>\n          )}\n        </div>\n        <drawer.Component model={drawer} />\n      </>\n    );\n  };\n}\n\nfunction getVariableSet(initialDS?: string, metric?: string, initialFilters?: AdHocVariableFilter[]) {\n  let variables: SceneVariable[] = [\n    new MetricsDrilldownDataSourceVariable({ initialDS }),\n    new MetricsVariable(),\n    new AdHocFiltersVariable({\n      key: VAR_FILTERS,\n      name: VAR_FILTERS,\n      label: 'Filters',\n      addFilterButtonText: 'Add label',\n      datasource: trailDS,\n      hide: VariableHide.dontHide,\n      layout: 'combobox',\n      filters: initialFilters ?? [],\n      baseFilters: getBaseFiltersForMetric(metric),\n      applyMode: 'manual',\n      allowCustomValue: true,\n      useQueriesAsFilterForOptions: false,\n      expressionBuilder: (filters: AdHocVariableFilter[]) => {\n        // remove any filters that include __name__ key in the expression\n        // to prevent the metric name from being set twice in the query and causing an error.\n        // also escapes equal signs to prevent invalid queries\n        // TODO: proper escaping as Scene does in https://github.com/grafana/scenes/blob/main/packages/scenes/src/variables/utils.ts#L45-L67\n        return (\n          filters\n            .filter((filter) => filter.key !== '__name__')\n            // eslint-disable-next-line sonarjs/no-nested-template-literals\n            .map((filter) => `${utf8Support(filter.key)}${filter.operator}\"${filter.value}\"`)\n            .join(',')\n        );\n      },\n    }),\n  ];\n\n  if (isScopesSupported()) {\n    variables.unshift(new ScopesVariable({ enable: true }));\n  }\n\n  return new SceneVariableSet({\n    variables,\n  });\n}\n\nfunction getStyles(theme: GrafanaTheme2, headerHeight: number, trail: DataTrail) {\n  const background = getAppBackgroundColor(theme, trail);\n\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      gap: theme.spacing(1),\n      flexDirection: 'column',\n      padding: theme.spacing(1, 2),\n      position: 'relative',\n      background,\n    }),\n    body: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      minHeight: 0, // Allow body to shrink below its content size\n    }),\n    controls: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      padding: theme.spacing(1, 0),\n      alignItems: 'flex-end',\n      flexWrap: 'wrap',\n      position: 'sticky',\n      background,\n      zIndex: theme.zIndex.navbarFixed,\n      top: headerHeight,\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n    }),\n    settingsInfo: css({\n      display: 'flex',\n      gap: theme.spacing(0.5),\n    }),\n  };\n}\n\nfunction getBaseFiltersForMetric(metric?: string): AdHocVariableFilter[] {\n  if (metric) {\n    return [{ key: '__name__', operator: '=', value: metric }];\n  }\n  return [];\n}\n\nfunction updateAppControlsHeight() {\n  const appControls = document.querySelector('[data-testid=\"app-controls\"]');\n\n  if (!appControls) {\n    return;\n  }\n\n  const { height } = appControls.getBoundingClientRect();\n  document.documentElement.style.setProperty('--app-controls-height', `${height}px`);\n}\n\nfunction isScopesSupported(): boolean {\n  return Boolean(\n    config.featureToggles.scopeFilters &&\n      config.featureToggles.enableScopesInMetricsExplore &&\n      // Scopes support in Grafana appears to begin with Grafana 12.0.0. We can remove\n      // the version check once the `dependencies.grafanaDependency` is updated to 12.0.0 or higher.\n      !config.buildInfo.version.startsWith('11.')\n  );\n}\n","import { type Scope } from '@grafana/data';\nimport { SceneObjectBase, type SceneObjectState } from '@grafana/scenes';\n\nfunction getSelectedScopes(): Scope[] {\n  return [];\n}\n\nexport function getClosestScopesFacade(): ScopesFacade {\n  return new ScopesFacade();\n}\n\ninterface SelectedScope {\n  scope: Scope;\n  path: string[];\n}\n\ninterface ScopesFacadeState extends SceneObjectState {\n  // A callback that will be executed when new scopes are set\n  handler?: (facade: ScopesFacade) => void;\n  // The render count is a workaround to force the URL sync manager to update the URL with the latest scopes\n  // Basically it starts at 0, and it is increased with every scopes value update\n  renderCount?: number;\n}\n\nexport class ScopesFacade extends SceneObjectBase<ScopesFacadeState> {\n  private selectedScopes: SelectedScope[] = [];\n  private onScopesChangeCallbacks: Array<(scopes: SelectedScope[]) => void> = [];\n\n  constructor() {\n    super({});\n  }\n\n  public getSelectedScopes(): SelectedScope[] {\n    return this.selectedScopes;\n  }\n\n  public getSelectedScopesNames(): string[] {\n    return this.selectedScopes.map(({ scope }) => scope.metadata.name);\n  }\n\n  public setSelectedScopes(scopes: SelectedScope[]) {\n    this.selectedScopes = scopes;\n    this.notifySubscribers();\n  }\n\n  public onScopesChange(callback: (scopes: SelectedScope[]) => void) {\n    this.onScopesChangeCallbacks.push(callback);\n    return () => {\n      this.onScopesChangeCallbacks = this.onScopesChangeCallbacks.filter((cb) => cb !== callback);\n    };\n  }\n\n  private notifySubscribers() {\n    for (const callback of this.onScopesChangeCallbacks) {\n      callback(this.selectedScopes);\n    }\n  }\n\n  public get value() {\n    return getSelectedScopes();\n  }\n}\n","import { urlUtil, type AdHocVariableFilter, type GetTagResponse, type MetricFindValue } from '@grafana/data';\nimport { type PromQuery } from '@grafana/prometheus';\nimport { config } from '@grafana/runtime';\nimport {\n  sceneGraph,\n  SceneTimeRange,\n  sceneUtils,\n  type AdHocFiltersVariable,\n  type SceneObject,\n  type SceneQueryRunner,\n  type SceneVariable,\n  type SceneVariableState,\n} from '@grafana/scenes';\n\nimport { DataTrail, type DataTrailState } from 'AppDataTrail/DataTrail';\nimport { logger } from 'shared/logger/logger';\nimport { isSceneQueryRunner } from 'shared/utils/utils.queries';\n\nimport { ROUTES } from '../constants/routes';\nimport { LOGS_METRIC } from '../shared';\nimport { getClosestScopesFacade } from './utils.scopes';\nimport { isAdHocFiltersVariable } from './utils.variables';\nimport { type MetricDatasourceHelper } from '../../AppDataTrail/MetricDatasourceHelper/MetricDatasourceHelper';\n\nexport function getTrailFor(model: SceneObject): DataTrail {\n  return sceneGraph.getAncestor(model, DataTrail);\n}\n\nexport function newMetricsTrail(state?: Partial<DataTrailState>): DataTrail {\n  return new DataTrail({\n    initialDS: state?.initialDS,\n    $timeRange: state?.$timeRange ?? new SceneTimeRange({ from: 'now-1h', to: 'now' }),\n    embedded: state?.embedded ?? false,\n    urlNamespace: state?.embedded ? 'gmd' : undefined,\n    ...state,\n  });\n}\n\nexport function getUrlForTrail(trail: DataTrail) {\n  const params = sceneUtils.getUrlState(trail);\n  return urlUtil.renderUrl(ROUTES.Drilldown, params);\n}\n\nexport function getMetricName(metric?: string) {\n  if (!metric) {\n    return 'All metrics';\n  }\n\n  if (metric === LOGS_METRIC) {\n    return 'Logs';\n  }\n\n  return metric;\n}\n\nexport function getColorByIndex(index: number) {\n  const visTheme = config.theme2.visualization;\n  return visTheme.getColorByName(visTheme.palette[index % 8]);\n}\n\nfunction getQueries(sceneObject: SceneObject): PromQuery[] {\n  const allQueryRunners = sceneGraph.findAllObjects(sceneObject, isSceneQueryRunner) as SceneQueryRunner[];\n  return allQueryRunners.flatMap((sqr) =>\n    sqr.state.queries.map((q) => ({ ...q, expr: sceneGraph.interpolate(sqr, q.expr) }))\n  );\n}\n\n// frontend hardening limit\nconst MAX_ADHOC_VARIABLE_OPTIONS = 10000;\n\n/**\n * Add custom providers for the adhoc filters variable that limit the responses for labels keys and label values.\n * Currently hard coded to 10000.\n *\n * The current provider functions for adhoc filter variables are the functions getTagKeys and getTagValues in the data source.\n * This function still uses these functions from inside the data source helper.\n *\n * @param dataTrail\n * @param limitedFilterVariable this is the filters variable\n * @param datasourceHelper\n */\nexport function limitAdhocProviders(\n  dataTrail: DataTrail,\n  limitedFilterVariable: SceneVariable<SceneVariableState> | null,\n  datasourceHelper: MetricDatasourceHelper\n) {\n  if (!isAdHocFiltersVariable(limitedFilterVariable)) {\n    return;\n  }\n\n  limitedFilterVariable.setState({\n    getTagKeysProvider: async (): Promise<{\n      replace?: boolean;\n      values: GetTagResponse | MetricFindValue[];\n    }> => {\n      // For the Prometheus label names endpoint, '/api/v1/labels'\n      // get the previously selected filters from the variable\n      // to use in the query to filter the response\n      // using filters, e.g. {previously_selected_label:\"value\"},\n      // as the series match[] parameter in Prometheus labels endpoint\n      const filters = limitedFilterVariable.state.filters;\n      // call getTagKeys and truncate the response\n      // we're passing the queries so we get the labels that adhere to the queries\n      // we're also passing the scopes so we get the labels that adhere to the scopes filters\n\n      const opts = {\n        filters,\n        scopes: getClosestScopesFacade()?.value,\n        queries: limitedFilterVariable.state.useQueriesAsFilterForOptions ? getQueries(dataTrail) : [],\n      };\n\n      // if there are too many queries it takes to much time to process the requests.\n      // In this case we favour responsiveness over reducing the number of options.\n      if (opts.queries.length > 20) {\n        opts.queries = [];\n      }\n\n      let values = (await datasourceHelper.getTagKeys(opts)).slice(0, MAX_ADHOC_VARIABLE_OPTIONS);\n\n      // use replace: true to override the default lookup in adhoc filter variable\n      return { replace: true, values };\n    },\n    getTagValuesProvider: async (\n      _: AdHocFiltersVariable,\n      filter: AdHocVariableFilter\n    ): Promise<{\n      replace?: boolean;\n      values: GetTagResponse | MetricFindValue[];\n    }> => {\n      // For the Prometheus label values endpoint, /api/v1/label/${interpolatedName}/values\n      // get the previously selected filters from the variable\n      // to use in the query to filter the response\n      // using filters, e.g. {previously_selected_label:\"value\"},\n      // as the series match[] parameter in Prometheus label values endpoint\n      const filtersValues = limitedFilterVariable.state.filters;\n      // remove current selected filter if updating a chosen filter\n      const filters = filtersValues.filter((f) => f.key !== filter.key);\n      // call getTagValues and truncate the response\n      // we're passing the queries so we get the label values that adhere to the queries\n      // we're also passing the scopes so we get the label values that adhere to the scopes filters\n\n      const opts = {\n        key: filter.key,\n        filters,\n        scopes: getClosestScopesFacade()?.value,\n        queries: limitedFilterVariable.state.useQueriesAsFilterForOptions ? getQueries(dataTrail) : [],\n      };\n\n      // if there are too many queries it takes to much time to process the requests.\n      // In this case we favour responsiveness over reducing the number of options.\n      if (opts.queries.length > 20) {\n        opts.queries = [];\n      }\n\n      const values = (await datasourceHelper.getTagValues(opts)).slice(0, MAX_ADHOC_VARIABLE_OPTIONS);\n      // use replace: true to override the default lookup in adhoc filter variable\n      return { replace: true, values };\n    },\n  });\n}\n\ninterface SceneType<T> extends Function {\n  new (...args: never[]): T;\n}\n\nexport function findObjectOfType<T extends SceneObject>(\n  scene: SceneObject,\n  check: (obj: SceneObject) => boolean,\n  returnType: SceneType<T>\n) {\n  const obj = sceneGraph.findObject(scene, check);\n  if (obj instanceof returnType) {\n    return obj;\n  } else if (obj !== null) {\n    logger.warn(`invalid return type: ${returnType.toString()}`);\n  }\n\n  return null;\n}\n\nexport function noOp() {}\n","import { type AdHocVariableFilter } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\n\nimport { type ExposedComponentName } from 'exposedComponents/components';\nimport { type PanelConfigPreset } from 'shared/GmdVizPanel/config/presets/types';\nimport { type MetricType } from 'shared/GmdVizPanel/matchers/getMetricType';\nimport { type PanelType } from 'shared/GmdVizPanel/types/available-panel-types';\nimport { getFaro } from 'shared/logger/faro/faro';\nimport { type SortSeriesByOption } from 'shared/services/sorting';\nimport { type SnakeCase } from 'shared/utils/utils.types';\n\nimport { type ActionViewType } from '../../MetricScene/MetricActionBar';\nimport { type LayoutType } from '../../MetricsReducer/list-controls/LayoutSwitcher';\nimport { type SortingOption as MetricsReducerSortByOption } from '../../MetricsReducer/list-controls/MetricsSorter/MetricsSorter';\nimport { GIT_COMMIT } from '../../version';\nimport { PLUGIN_ID } from '../constants/plugin';\nimport { HGFeatureToggles, isFeatureToggleEnabled } from '../utils/utils.feature-toggles';\n\nexport type ViewName = 'metrics-reducer' | 'metric-details';\n\ntype Interactions = {\n  // User selected a label to view its breakdown.\n  groupby_label_changed: {\n    label: string;\n  };\n  breakdown_panel_selected: {\n    label: string;\n  };\n  // User changed a label filter\n  label_filter_changed: {\n    label: string;\n    action: 'added' | 'removed' | 'changed';\n    cause: 'breakdown' | 'adhoc_filter';\n  };\n  // User changed the breakdown layout\n  breakdown_layout_changed: { layout: LayoutType };\n  // A metric exploration has started due to one of the following causes\n  exploration_started: {\n    cause: 'bookmark_clicked';\n  };\n  // A user has changed a bookmark\n  bookmark_changed: {\n    action: // Toggled on or off from the bookmark icon\n    | 'toggled_on'\n      | 'toggled_off'\n      // Deleted from the sidebar bookmarks list\n      | 'deleted';\n  };\n  // User changes metric explore settings\n  settings_changed: { stickyMainGraph?: boolean };\n  // User clicks on tab to change the action view\n  metric_action_view_changed: {\n    view: ActionViewType;\n\n    // The number of related logs\n    related_logs_count?: number;\n  };\n  // User clicks on one of the action buttons associated with a selected metric\n  selected_metric_action_clicked: {\n    action: // Opens the metric queries in Explore\n    | 'open_in_explore'\n      // Clicks on the share URL button\n      | 'share_url'\n      // Deselects the current selected metrics by clicking the \"Select new metric\" button\n      | 'unselect'\n      // When in embedded mode, clicked to open the exploration from the embedded view\n      | 'open_from_embedded';\n  };\n  // User clicks on one of the action buttons associated with related logs\n  related_logs_action_clicked: {\n    action: // Opens Logs Drilldown\n    | 'open_logs_drilldown'\n      // Logs data source changed\n      | 'logs_data_source_changed';\n  };\n  // User selects a metric\n  metric_selected: {\n    from: // By clicking \"Select\" on a metric panel when on the no-metric-selected metrics list view\n    | 'metric_list'\n      // By clicking \"Select\" on a metric panel when on the related metrics tab\n      | 'related_metrics';\n    // The number of search terms activated when the selection was made\n    searchTermCount: number | null;\n  };\n  // User opens/closes the prefix filter dropdown\n  prefix_filter_clicked: {\n    from: // By clicking \"Select\" on a metric panel when on the no-metric-selected metrics list view\n    | 'metric_list'\n      // By clicking \"Select\" on a metric panel when on the related metrics tab\n      | 'related_metrics';\n    action: // Opens the dropdown\n    | 'open'\n      // Closes the dropdown\n      | 'close';\n  };\n  // User types in the quick search bar\n  quick_search_used: {};\n  sorting_changed:\n    | {\n        // By clicking on the sort by variable in the metrics reducer\n        from: 'metrics-reducer';\n        // The sort by option selected\n        sortBy: MetricsReducerSortByOption;\n      }\n    | {\n        // By clicking on the sort by component in the label breakdown\n        from: 'label-breakdown';\n        // The sort by option selected\n        sortBy: SortSeriesByOption;\n      };\n  wasm_not_supported: {};\n  native_histogram_examples_closed: {};\n  native_histogram_example_clicked: {\n    metric: string;\n  };\n  // User toggles the Wingman sidebar\n  metrics_sidebar_toggled: {\n    action: // Opens the sidebar section\n    | 'opened'\n      // Closes the sidebar section\n      | 'closed';\n    section?: string;\n  };\n  // User clicks into the prefix filter section of the sidebar\n  sidebar_prefix_filter_section_clicked: {};\n  // User applies any prefix filter from the sidebar\n  sidebar_prefix_filter_applied: {\n    // Number of prefix filters applied (optional)\n    filter_count?: number;\n  };\n  // User clicks into the suffix filter section of the sidebar\n  sidebar_suffix_filter_section_clicked: {};\n  // User applies any suffix filter from the sidebar\n  sidebar_suffix_filter_applied: {\n    // Number of suffix filters applied (optional)\n    filter_count?: number;\n  };\n  // User selects a rules filter from the Wingman sidebar\n  sidebar_rules_filter_selected: {\n    filter_type: 'non_rules_metrics' | 'recording_rules';\n  };\n  // User applies a label filter from the sidebar\n  sidebar_group_by_label_filter_applied: {\n    label: string;\n  };\n  app_initialized: {\n    view: ViewName;\n    uel_epid: string;\n  };\n  // User took an action to view an exposed component\n  exposed_component_viewed: {\n    component: SnakeCase<ExposedComponentName>;\n  };\n  // User selects a different layout (grid/rows/single)\n  layout_changed: { layout: LayoutType };\n  // User changes the panel type for a histogram metric (e.g., from heatmap to percentiles)\n  histogram_panel_type_changed: { panelType: PanelType };\n  // App migrated some legacy user prefs (see src/UserPreferences/userStorage.ts)\n  user_preferences_migrated: {};\n  // User opens the \"Configure panel\"\n  configure_panel_opened: { metricType: MetricType };\n  // User applies a panel config\n  panel_config_applied: { metricType: MetricType; configId: string };\n  // User restores the default panel config\n  default_panel_config_restored: { metricType: MetricType };\n  // An invalid metric config has been found\n  invalid_metric_config: { metricConfig: PanelConfigPreset };\n  // the user has clicked on the \"Give feedback\" button in the app header\n  give_feedback_clicked: {};\n};\n\ntype OtherEvents = {\n  extreme_value_filter_behavior_triggered: {\n    expression: string;\n  };\n};\n\ntype AllEvents = Interactions & OtherEvents;\n\nconst INTERACTION_NAME_PREFIX = 'grafana_explore_metrics_';\n\nexport function reportExploreMetrics<E extends keyof AllEvents, P extends AllEvents[E]>(event: E, payload: P) {\n  reportInteraction(`${INTERACTION_NAME_PREFIX}${event}`, {\n    ...payload,\n    meta: {\n      // same naming as Faro (see src/tracking/faro/faro.ts)\n      appRelease: config.apps[PLUGIN_ID].version,\n      appVersion: GIT_COMMIT,\n    },\n  });\n\n  // Extra event tracking with Faro for \"Default Open Sidebar\" experiment\n  if (event.includes('sidebar')) {\n    getFaro()?.api.pushEvent(event, {\n      // Convert all payload values to strings\n      ...Object.fromEntries(Object.entries(payload).map(([key, value]) => [key, String(value)])),\n      defaultOpenSidebar: String(isFeatureToggleEnabled(HGFeatureToggles.sidebarOpenByDefault)),\n    });\n  }\n}\n\n/**\n * Reports a single label filter change event\n */\nfunction reportLabelFilterChange(label: string, action: 'added' | 'removed' | 'changed') {\n  reportExploreMetrics('label_filter_changed', {\n    label,\n    action,\n    cause: 'adhoc_filter',\n  });\n}\n\n/**\n * Detects and reports changes to an existing filter\n */\nfunction detectChangedFilters(newFilters: AdHocVariableFilter[], oldFilters: AdHocVariableFilter[]) {\n  for (const oldFilter of oldFilters) {\n    for (const newFilter of newFilters) {\n      if (oldFilter.key === newFilter.key && oldFilter.value !== newFilter.value) {\n        reportLabelFilterChange(oldFilter.key, 'changed');\n      }\n    }\n  }\n}\n\n/**\n * Detects and reports removed filters\n */\nfunction detectRemovedFilters(newFilters: AdHocVariableFilter[], oldFilters: AdHocVariableFilter[]) {\n  for (const oldFilter of oldFilters) {\n    const stillExists = newFilters.some((newFilter) => newFilter.key === oldFilter.key);\n    if (!stillExists) {\n      reportLabelFilterChange(oldFilter.key, 'removed');\n    }\n  }\n}\n\n/**\n * Detects and reports added filters\n */\nfunction detectAddedFilters(newFilters: AdHocVariableFilter[], oldFilters: AdHocVariableFilter[]) {\n  for (const newFilter of newFilters) {\n    const isNew = !oldFilters.some((oldFilter) => oldFilter.key === newFilter.key);\n    if (isNew) {\n      reportLabelFilterChange(newFilter.key, 'added');\n    }\n  }\n}\n\n/** Detect the single change in filters and report the event, assuming it came from manipulating the adhoc filter */\nexport function reportChangeInLabelFilters(newFilters: AdHocVariableFilter[], oldFilters: AdHocVariableFilter[]) {\n  if (newFilters.length === oldFilters.length) {\n    // Same number of filters - check for changed values\n    detectChangedFilters(newFilters, oldFilters);\n  } else if (newFilters.length < oldFilters.length) {\n    // Filters were removed\n    detectRemovedFilters(newFilters, oldFilters);\n  } else {\n    // Filters were added\n    detectAddedFilters(newFilters, oldFilters);\n  }\n}\n","export const localeCompare = new Intl.Collator('en', { sensitivity: 'base' }).compare;\n","import { Alert, type AlertVariant } from '@grafana/ui';\nimport React from 'react';\n\nimport { ensureErrorObject } from './useCatchExceptions';\nimport { logger, type ErrorContext } from '../shared/logger/logger';\n\ntype InlineBannerProps = {\n  severity: AlertVariant;\n  title: string;\n  message?: string | React.ReactNode;\n  error?: Error;\n  errorContext?: ErrorContext;\n  children?: React.ReactNode;\n};\n\n// adds HTTP status, if available\nfunction formatErrorMessage(error: any) {\n  const message = error.message || error.toString();\n  const infos = [];\n  if (error.statusText) {\n    infos.push(error.statusText);\n  }\n  if (error.status) {\n    infos.push(`HTTP ${error.status}`);\n  }\n  return infos.length ? `${message} (${infos.join(' - ')})` : message;\n}\n\nexport function InlineBanner({ severity, title, message, error, errorContext, children }: Readonly<InlineBannerProps>) {\n  let errorObject;\n\n  if (error) {\n    errorObject = ensureErrorObject(error, 'Unknown error!');\n\n    logger.error(errorObject, {\n      ...(errorObject.cause || {}),\n      ...errorContext,\n      bannerTitle: title,\n    });\n  }\n\n  return (\n    <Alert title={title} severity={severity}>\n      {errorObject && (\n        <>\n          {formatErrorMessage(errorObject)}\n          <br />\n        </>\n      )}\n      {message}\n      {children}\n    </Alert>\n  );\n}\n","import { createContext, useContext } from 'react';\n\nimport { type DataTrail } from 'AppDataTrail/DataTrail';\nimport { newMetricsTrail } from 'shared/utils/utils';\n\ninterface AppContextState {\n  trail: DataTrail;\n}\n\nexport const defaultTrail = newMetricsTrail();\n\nexport const AppContext = createContext<AppContextState>({\n  trail: defaultTrail,\n});\n\nexport function useMetricsAppContext() {\n  return useContext(AppContext);\n}\n","import React, { lazy } from 'react';\nimport { Navigate, Route, Routes, useLocation } from 'react-router-dom';\n\nimport { ROUTES } from 'shared/constants/routes';\n\nimport { useMetricsAppContext } from './AppContext';\n\nexport const Trail = lazy(() => import('./Trail'));\n\n// For /trail links, redirect to /drilldown with the same search params\nconst TrailRedirect = () => {\n  const location = useLocation();\n  return <Navigate to={`${ROUTES.Drilldown}${location.search}`} replace />;\n};\n\nexport const AppRoutes = () => {\n  const { trail } = useMetricsAppContext();\n\n  return (\n    <Routes>\n      <Route path={ROUTES.Drilldown} element={<Trail trail={trail} />} />\n      <Route path={ROUTES.Trail} element={<TrailRedirect />} />\n      {/* catch-all route */}\n      <Route path=\"*\" element={<Navigate to={ROUTES.Drilldown} replace />} />\n    </Routes>\n  );\n};\n"],"names":["PREF_KEYS","DATASOURCE","RECENT_METRICS","BOOKMARKS","METRIC_PREFS","BREAKDOWN_SORTBY","SIDEBAR_SECTION","ensureErrorObject","error","defaultMessage","Error","message","e","prop","Object","getOwnPropertyNames","useCatchExceptions","setError","useState","useEffect","onError","errorEvent","filename","URL","protocol","endsWith","logger","lineno","toString","colno","shouldTreatAsApplicationError","onUnHandledRejection","event","reason","type","undefined","window","addEventListener","removeEventListener","getLabelValueFromDataFrame","frame","labels","fields","keys","length","sortAlphabetical","series","direction","compareFn","a","b","localeCompare","sort","labelA","labelB","sortByFieldReducer","sortBy","fieldReducer","fieldReducers","get","seriesCalcs","map","dataFrame","field","value","reduce","doStandardCalcs","getOutliers","joined","outerJoinDataFrames","frames","points","filter","f","FieldType","number","Float64Array","values","OutlierDetector","dbscan","sensitivity","detect","calculateOutlierValue","outliers","index","seriesResults","isOutlier","outlierIntervals","sortSeries","memoize","origSeries","wasmSupported","sortByOutliers","msg","displayWarning","ReducerID","stdDev","firstTimestamp","seriesIsNotEmpty","lastTimestamp","support","WebAssembly","reportExploreMetrics","displayError","msgs","context","acc","i","handheldBy","getAppEvents","publish","AppEvents","alertError","name","payload","warn","alertWarning","displaySuccess","alertSuccess","ErrorView","styles","useStyles2","getStyles","navigate","useNavigate","pathname","search","useLocation","onClickReload","useCallback","searchParams","URLSearchParams","newSearchParams","key","has","forEach","set","location","reload","isCollapseOpen","setIsCollapseOpen","div","className","container","InlineBanner","severity","title","errorContext","p","TextLink","href","onClick","Collapse","callStack","collapsible","label","isOpen","onToggle","pre","code","stack","theme","css","margin","spacing","backgroundColor","border","paddingLeft","outline","boxShadow","marginLeft","marginRight","display","HGFeatureToggles","sidebarOpenByDefault","isFeatureToggleEnabled","featureToggle","featureToggles","PROMETHEUS_DATA_SOURCE_REGEX","isPrometheusDataSource","input","test","uid","DataSourceFetcher","cachedDataSources","this","cache","pendingRequest","pendingRequests","fetchHealthyDataSources","finally","delete","dataSources","allDataSourcesOfType","getDataSourceSrv","getList","logs","ds","healthyDataSources","unhealthyDataSources","Promise","all","health","getBackendSrv","showSuccessAlert","showErrorAlert","status","push","join","Map","dataSourceFetcherSingleton","getDataSourceFetcher","userStorage","migrate","hasMigrations","migrations","legacyKey","newKey","existingItem","localStorage","getItem","JSON","parse","setItem","removeItem","buildStorageKey","service","storageKey","item","stringify","clear","constructor","pluginJson","trackUsage","GiveFeedbackButton","wrapper","feedback","target","rel","Icon","position","top","right","color","colors","text","secondary","fontSize","typography","bodySmall","link","SceneDrawer","SceneObjectBase","state","super","open","subTitle","body","setState","close","Component","model","Drawer","size","subtitle","closeOnMaskClick","onClose","EventSortByChanged","BusEventWithPayload","usageRequestOptions","fetchAlertingMetrics","alertingRules","metricCounts","relevantRules","rule","data","queryPromises","query","expr","datasourceUid","metrics","extractMetricNames","metric","parseAlertingRules","counts","result","usageType","count","transformCountsToAlertingUsage","err","dashboardRequestMap","getDashboardLimited","limitFunction","dashboardUid","url","dashboardRequestsFailedCount","promise","then","dashboard","catch","resolve","concurrency","fetchDashboardMetrics","dashboards","limit","response","dashboardSearchResponse","dashboardData","panels","getDashboardsWithPanels","panel","getPanelsWithTargets","processTargetsForMetrics","targets","datasource","dashboardName","dashboardUrl","updateMetricUsage","MetricUsageFetcher","getUsageMetrics","_usageState","metricsPromise","fetcher","getUsageForMetric","metricName","getUsageDetailsForMetric","getRecentMetrics","recentMetrics","thirtyDaysAgo","Date","now","RECENT_METRICS_EXPIRY_DAYS","validMetrics","timestamp","sortByOptions","VAR_WINGMAN_SORT_BY","MetricsSorter","activationHandler","sortByVar","sceneGraph","getVariables","getByName","supportedSortByOptions","getValue","changeValueTo","_subs","add","subscribeToState","newState","prevState","publishEvent","usageFetcher","metricsToCounts","$variables","SceneVariableSet","variables","CustomVariable","option","description","inputControls","VariableValueSelectors","layout","initialized","Set","addActivationHandler","sortMetricsWithRecentFirst","allRecentMetrics","m","allRecentMetricsSet","recent","nonRecent","sortedNonRecent","sortMetricsAlphabetically","includes","data-testid","VAR_FILTERS","VAR_GROUP_BY","VAR_DATASOURCE","VAR_DATASOURCE_EXPR","VAR_LOGS_DATASOURCE","VAR_OTHER_METRIC_FILTERS","LOGS_METRIC","trailDS","MetricSelectedEvent","RefreshMetricsEvent","BusEventBase","EventMetricsVariableActivated","EventMetricsVariableDeactivated","EventMetricsVariableLoaded","withLifecycleEvents","variable","TypeError","loading","options","sub","unsubscribe","VAR_METRICS_VARIABLE","MetricsVariable","QueryVariable","labelMatcher","addLifeCycleEvents","operator","includeAll","skipUrlSync","refresh","VariableRefresh","onTimeRangeChanged","VariableSort","alphabeticalAsc","hide","VariableHide","hideVariable","MetricsDrilldownDataSourceVariable","DataSourceVariable","onActivate","getCurrentDataSource","prometheusDataSources","config","datasources","uidFromUrl","uidFromLocalStorage","currentDataSource","find","isDefault","initialDS","pluginId","bind","areArraysEqual","array1","array2","isEqual","isClassicHistogramMetric","languageProviderVersionIs","languageProvider","fetchLabelValues","queryLabelKeys","MetricDatasourceHelper","getRuntimeDatasource","__sceneObject","trail","init","reset","subs","metricsVariable","findByKeyAndType","onNewMetrics","datasourceVariable","metadata","classicHistograms","fetchMetricsMetadata","metricsVariableOptions","metricData","getMetadataForMetric","request","queryMetadata","queryMetricsMetadata","metricsMetadata","getQueryMetricsMetadata","loadMetadata","retrieveMetricsMetadata","loadMetricsMetadata","getLoadMetricsMetadata","metricMetadata","entries","getTagKeys","isWrappedInQuotes","slice","unwrapQuotes","getTagValues","fetchLabels","params","timeRange","matcher","fetchLabelsWithMatch","labelName","queryLabelValues","fetchSeriesValuesWithMatch","getPrometheusDataSourceForScene","sceneObject","dsVariable","findByKey","getPrometheusBuildInfo","application","repository","buildDate","replace","getMetricDescription","help","unit","isAdHocFiltersVariable","isCustomVariable","isQueryVariable","NULL_GROUP_BY_VALUE","LabelsDataSource","RuntimeDataSource","LoadingState","Done","other","metricFindQuery","scopedVars","valueOf","match","labelOptions","getLabelsMatchAPISupport","filters","getFiltersFromVariable","processLabelOptions","getTimeRange","hasLabelsMatchAPISupport","filtersVariable","lookupVariable","startsWith","testDatasource","VAR_WINGMAN_GROUP_BY","LabelsVariable","refreshOptions","AdHocFiltersVariable","filterExpression","updateQuery","interpolate","placeholder","isMulti","allowCustomValue","Label","background","primary","shape","radius","default","weak","LayoutType","LayoutSwitcher","getUrlState","urlSearchParamName","updateFromUrl","stateUpdate","newLayout","o","DEFAULT_LAYOUT","DEFAULT_OPTIONS","_urlSync","SceneObjectUrlSyncConfig","onChange","RadioButtonGroup","aria-label","fullWidth","VAR_FILTERED_METRICS_VARIABLE","FilteredMetricsVariable","CountsProvider","useCounts","current","total","MetricVariableCountsProvider","nonFilteredVariable","filteredVariable","setInitCounts","initCounts","EventQuickSearchChanged","QuickSearch","newValue","toggleCountsDisplay","displayCounts","updateValue","notifyValueChange","useHumanFriendlyCountsMessage","targetName","countsProvider","tagName","tooltipContent","Boolean","_variableDependency","VariableDependencyConfig","variableNames","onReferencedVariableValueChanged","debounce","searchText","currentTarget","onKeyDown","preventDefault","Input","prefix","suffix","Tooltip","content","placement","Tag","colorIndex","IconButton","variant","tooltip","disabled","ListControls","EmbeddedScene","SceneFlexLayout","width","maxHeight","children","SceneFlexItem","headerWrapper","alignItems","MetricsVariableFilterEngine","setInitOptions","initOptions","cloneDeep","getFilteredOptions","filteredOptions","categories","applyCategoryFilters","prefixes","applyPrefixFilters","suffixes","applySuffixFilters","names","applyNameFilters","applyFilters","settings","forceUpdate","notify","updatedFilters","notifyUpdate","category","categoryRegex","buildRegex","concat","pattern","split","prefixesRegex","s","suffixesRegex","namePatterns","regexes","trim","r","RegExp","some","regex","flags","SceneVariableValueChangedEvent","metricToTargetLevenDistances","getLevenDistances","targetMetric","targetToDistances","distances","metricSplit","metricHalf","halfLeven","leven","wholeLeven","MetricsVariableSortEngine","lastMetrics","sortedMetrics","sortByUsage","metricList","aValue","bValue","metricsSorter","usageMetrics","scoreA","scoreB","sortMetricsByCount","SceneByVariableRepeater","performRepeat","hasDependencyInLoadingState","loadingLayout","getLayoutLoading","errorLayout","emptyLayout","currentBatchSize","variableName","MultiValueVariable","getLayoutError","getMultiVariableValues","getLayoutEmpty","initialPageSize","newChildren","getLayoutChild","increaseBatchSize","newBatchSize","pageSizeIncrement","useSizes","remaining","increment","onVariableUpdateCompleted","hasAllValue","Array","isArray","v","ShowMoreButton","batchSizes","Button","fill","tooltipPlacement","UsageData","usageCount","singularUsageType","pluralUsageType","icon","dashboardItems","usageContainer","Dropdown","overlay","Menu","style","maxWidth","overflowY","Item","id","menuItem","component","menuItemContent","cx","usageItem","clickableUsageItem","span","flexDirection","justifyContent","gap","padding","borderTopWidth","opacity","textDecoration","overflow","textOverflow","whiteSpace","VIZ_PANEL_HEIGHT","VIZ_PANEL_HEIGHT_WITH_USAGE_DATA_PREVIEW","WithUsageDataPreviewPanel","_onActivate","metricsReducer","getAncestor","MetricsReducer","enginesMap","updateSortBy","updateLayout","usage","dashboardInfo","gridLayout","SceneCSSGridLayout","currentGridLayoutHeight","autoRows","expectedPanelHeight","GroupsIcon","svg","stroke","height","viewBox","circle","cy","strokeWidth","path","d","vizPanelInGridItem","log","EventConfigurePanel","ConfigurePanelAction","userPrefs","isAlreadyConfigured","selectButton","active","maxContrast","SelectAction","EventPanelTypeChanged","CONFIG_PRESETS","TIMESERIES_AVG","TIMESERIES_SUM","TIMESERIES_STDDEV","TIMESERIES_PERCENTILES","TIMESERIES_MIN_MAX","TIMESERIES_AGE_TIME_MINUS_AVG","TIMESERIES_AGE_TIME_MINUS_MIN_MAX","HISTOGRAM_HEATMAP","HISTOGRAM_PERCENTILES","STATUS_UPDOWN_HISTORY","STATUS_UPDOWN_STAT","PROMQL_FUNCTIONS","fn","args","parameter","availableConfigPresetIds","availablePanelTypes","getPreferredConfigForMetric","metricConfig","every","panelOptions","queryOptions","queries","q","percentiles","isValid","PANEL_HEIGHT","QUERY_RESOLUTION","STATUS_UPDOWN_METRIC_REGEX","isStatusUpDownMetric","getPanelTypeForMetricSync","histogramType","buildQueryExpression","labelMatchers","addIgnoreUsageFilter","addExtremeValuesFiltering","defaultSelectors","utf8Support","MatchingOperator","equal","isValidLegacyName","expressionString","expression","replaceAll","expressionToString","Expression","defaultOperator","promql","and","left","DEFAULT_UNIT","UNIT_BYTES","UNIT_SECONDS","UNIT_PERCENT","UNIT_COUNT","UNIT_MAP","UNIT_LIST","RATE_UNIT_MAP","getUnitFromMetric","metricParts","toLowerCase","Math","max","part","getUnit","metricPart","getPerSecondRateUnit","buildHeatmapPanel","panelConfig","queryConfig","queryParams","isNativeHistogram","sum","rate","by","maxDataPoints","resolution","HIGH","refId","format","fromExploreMetrics","getHeatmapQueryRunnerParams","queryRunner","SceneQueryRunner","PanelBuilders","heatmap","setTitle","setDescription","setHeaderActions","headerActions","setMenu","menu","setShowMenuAlways","setData","setUnit","setOption","mode","HeatmapColorMode","Scheme","exponent","scheme","steps","reverse","legend","build","COUNTER_METRIC_REGEX","isCounterMetric","DEFAULT_PERCENTILES","getPercentilesQueryRunnerParams","isCounterMetricFn","isRateQuery","queryDefs","newExpr","entry","fnName","percentile","legendFormat","buildNonHistogramQueries","buildHistogramQueries","buildPercentilesPanel","$data","startColorIndex","fixedColorIndex","timeseries","showLegend","TooltipDisplayMode","Multi","SortOrder","Descending","setCustomFieldConfig","setOverrides","matchFieldsByQuery","overrideColor","fixedColor","getColorByIndex","setBehaviors","behaviors","buildQueriesWithPresetFunctions","defaultPromqlFn","UP_DOWN_VALUE_MAPPINGS","MappingType","ValueToText","buildStatPanel","interval","getStatQueryRunnerParams","stat","setColor","setMappings","buildStatushistoryPanel","min","getStatushistoryQueryRunnerParams","statushistory","VisibilityMode","Never","getTimeseriesQueryRunnerParams","groupBy","buildGroupByQueries","avg","isDataFrameAllNaN","valuesField","entities","NaN","extremeValueFilterBehavior","findDescendents","GmdVizPanel","queryRunnerSub","dataFrameType","meta","runQueries","titleItems","VizPanelExtremeValuesMessage","level","extremeValuedisclaimer","warningMessage","aria-hidden","warning","main","info","addRefId","source","pipe","addUnspecifiedLabel","sliceSeries","start","end","stats","unshift","displayName","buildTimeseriesPanel","SceneDataTransformer","transformations","MAX_SERIES_TO_RENDER_WHEN_GROUPED_BY","vizPanel","buildGroupByPanel","vizPanelBuilder","discardPanelTypeUpdates","updateBody","subscribeToStateChanges","subscribeToEvents","getTrailFor","bodySub","DataFrameType","HeatmapCells","subscribeToEvent","panelType","update","discardUserPrefs","prefConfig","M","MEDIUM","GRID_TEMPLATE_COLUMNS","GRID_TEMPLATE_ROWS","MetricsList","subscribeToLayoutChange","layoutSwitcher","onChangeState","templateColumns","ROWS","isLazy","$behaviors","sync","DashboardCursorSync","Crosshair","SceneReactObject","reactNode","Spinner","inline","SceneCSSGridItem","footer","marginTop","borderRadius","shouldDisplayShowMoreButton","MetricsGroupByRow","labelValue","labelCardinality","canvas","containerHeader","marginBottom","paddingBottom","borderBottom","medium","headerButtons","zIndex","collapsableSectionBody","groupName","lineHeight","isCollapsed","setIsCollapsed","adHocFiltersVariable","CollapsableSection","VAR_LABEL_VALUES","LabelValuesVariable","MetricsGroupByList","rowGap","EventFiltersChanged","RULE_GROUP_LABELS","EventSectionValueChanged","SectionTitle","h6","infoIcon","fontWeight","fontWeightLight","cursor","CheckboxWithCount","checked","checkboxWrapper","Checkbox","CheckBoxList","groups","selectedGroups","onSelectionChange","checkboxListHeader","noResults","ul","checkboxList","group","li","checkboxItem","g","newGroups","shade","fontStyle","MetricsFilterSection","filteredMetricsVariable","updateLists","updateCounts","computeGroups","originalOptions","filterEngine","filtersWithoutCurrentType","getFilters","optionsForCounting","newGroupsWithCount","showHideEmpty","showSearch","filter_count","filterType","filter_type","switchContainer","switchLabel","searchInput","flexBasis","flexShrink","hideEmpty","setHideEmpty","searchValue","setSearchValue","filteredGroups","useMemo","Switch","computeMetricPrefixGroups","rawPrefixesMap","parts","prefixesMap","from","computeMetricSuffixGroups","rawSuffixesMap","suffixesMap","isRecordingRule","computeRulesGroups","rulesMap","genBookmarkKey","urlValues","actionView","filterUrlValues","truncateValue","maxLength","substring","BookmarkListItem","props","onSelect","onDelete","bookmark","createdAt","filtersFromUrl","getFiltersFromUrl","heading","getMetricName","cardHeightClassName","compactHeight","cardTall","cardClassName","card","wide","cardWide","article","Card","Heading","metricValue","Meta","secondaryFont","primaryFont","deleteButton","SecondaryActions","date","dateTimeFormat","wordBreak","borderTop","borderRight","borderLeft","flexWrap","gridArea","letterSpacing","bottom","BookmarksList","bookmarksList","paddingRight","emptyState","LabelsList","selectedLabel","onSelectLabel","onClearSelection","listHeader","selected","list","RadioButtonList","flex","bookmarks","gotoBookmark","removeBookmark","allBookmarks","setAllBookmarks","bookmarksFromStorage","dsValue","addBookmark","newBookmark","sceneUtils","bookmarksForStorage","bookmarkKey","useBookmarks","cause","action","LabelsBrowser","labelsVariable","selectLabel","useLabelsBrowser","labelsList","onInputChange","onInputKeyDown","onInputClear","Settings","CustomIcons","rect","x","y","rx","SideBarButton","ariaLabel","visible","iconOrText","buttonIcon","ButtonChild","availableIconsIndex","button","metricFiltersVariables","SideBar","cleanupOtherMetricsVar","initOtherMetricsVar","sectionValues","newSectionValues","setOtherMetricFilters","visibleSection","setActiveSection","otherMetricFiltersVar","varToTextMap","newFilters","keyLabel","hideLabel","currentVariableSet","readOnly","applyMode","getSectionValuesFromUrl","urlSearchParams","filterKey","filterValueFromUrl","sectionKey","sections","section","buttonsBar","boxSizing","borderTopLeftRadius","borderBottomLeftRadius","buttonContainer","transition","selectedBorder","visibility","closeButton","groupByValue","updateBasedOnGroupBy","hasGroupByValue","initVariablesFilteringAndSorting","sortEngine","quickSearch","filterSections","findAllObjects","sortByVariable","filterSection","listControls","sidebar","dataSource","registerRuntimeDataSource","registerRuntimeDataSources","useChromeHeaderHeight","chromeHeaderHeight","APP_HEADER_HEIGHT","getMetricType","dataTrail","metricType","getMetricTypeSync","isAgeMetric","DEFAULT_TIMESERIES_AGE_PRESETS","DEFAULT_HISTOGRAMS_PRESETS","DEFAULT_STATUS_UP_DOWN_PRESETS","DEFAULT_TIMESERIES_PRESETS","DEFAULT_TIMESERIES_RATE_PRESETS","getConfigPresetsForMetric","EventApplyPanelConfig","EventCancelConfigurePanel","AVAILABLE_PERCENTILES_OPTIONS","WithConfigPanelOptions","initPercentilesParams","show","presetId","isSelected","onTogglePercentile","newQueryConfig","Number","checkedOptions","onClickPreset","bodyAndParams","paramsContainer","param","radioContainer","htmlFor","ConfigurePanelForm","syncTimeRange","buildBody","metricScene","DataTrail","to","timeZone","presets","selectedPresetId","onSelectPreset","restoreDefault","userPrefForMetric","getPanelConfigFromPreset","preset","omit","$timeRange","SceneTimeRange","controls","SceneTimePicker","SceneRefreshPicker","isConfirmModalOpen","onClickRestoreDefault","onClickConfirmRestoreDefault","defaultPreset","closeConfirmModal","onClickCancel","onClickApplyConfig","presetPanel","presetWithQueryParams","controlsContainer","messageContainer","formButtonsContainer","control","ConfirmModal","confirmText","onConfirm","onDismiss","PluginLogo","memo","img","logo","src","pluginCommitSha","GIT_COMMIT","pluginCommitURL","buildInfo","grafanaBuildInfo","InfoMenuHeader","version","updated","usePluginContext","menuHeader","h5","InfoMenu","isDev","shortCommitSha","promBuildInfo","setPromBuildInfo","header","Divider","edition","env","commit","revision","PluginInfo","UI_TEXT","OPEN_EXPLORE_LABEL","COPY_URL_LABEL","BOOKMARK_LABEL","SELECT_NEW_METRIC_TOOLTIP","SelectNewMetricButton","onSelectNewMetric","embedded","LinkButton","createAppUrl","getUrlForTrail","ToolbarButton","EventForceSyncYAxis","EventResetSyncYAxis","EventTimeseriesDataReceived","syncYAxis","vizPanelsParent","NEGATIVE_INFINITY","POSITIVE_INFINITY","timeRangeSub","resetSub","forceSub","newMax","newMin","nonSyncedPanels","findTimeseriesPanels","t","fieldConfig","defaults","findNewMaxMin","updateTimeseriesAxis","dataReceivedSub","panelKey","VizPanel","defineProperty","configurable","enumerable","writable","clearFieldConfigCache","merge","DEFAULT_ALL_OPTION","COMBOBOX_PLACEHOLDER","GroupBySelector","processedOptions","Combobox","noOp","combobox","isClearable","GroupByVariable","filterOptions","String","defaultToAll","getAppBackgroundColor","isLight","ignore","next","Field","addCardinalityInfo","originalTitle","dataSub","ctaText","publishTimeseriesData","getData","SelectLabelAction","groupByVariable","BookmarkHeaderAction","isCurrentStateBookmarked","currentKey","isBookmarked","currentUrlState","isCurrentlyBookmarked","updatedBookmarks","actualBookmarkState","bookmarkButton","GmdVizPanelVariantSelector","currentPanelType","newPanelType","MAIN_PANEL_MIN_HEIGHT","XL","TOPVIEW_PANEL_MENU_KEY","MetricGraphScene","gmdVizPanel","topView","minHeight","PanelMenu","selectedTab","actionBar","MetricActionBar","headerHeight","flexGrow","tabContent","stickyTop","paddingTop","nonSticky","useRef","useResizeObserver","ref","onResize","requestAnimationFrame","getBoundingClientRect","document","documentElement","setProperty","updateActionBarHeight","CopyUrlAction","create","iconClassName","navigator","clipboard","appUrl","PLUGIN_BASE_URL","writeText","ExploreAction","panelMenuInstance","exploreUrl","viz","panelData","getExploreURL","shortcut","isSceneQueryRunner","extensionPointId","AddToExplorationButton","getPanelConfigAndDataFrames","findObjectOfType","getQueries","getContext","dsUid","findObject","getFilter","updateFieldConfigOverrides","properties","existingOverride","overrides","displayNameFromDS","fieldName","ctx","origin","logoPath","MimirLogo","drillDownLabel","links","usePluginLinks","limitPerPlugin","filterNameAndValueObj","InvestigationAction","addToExplorationsButton","explorationsButton","addExplorationsLink","activate","getInvestigationLink","items","addToExplorations","getPluginLinkExtensions","extensions","getObservablePluginLinks","firstValueFrom","addItem","setItems","VizPanelMenu","investigationItems","MetricLabelsList","actionsLookup","syncStateFromSearchParams","Controls","labelIndex","AddToFiltersGraphAction","addFilterWithoutReportingInteraction","SortBySelector","sortByTooltip","SceneByFrameRepeater","Loading","filteredSeries","filterAndSort","initFilterAndSort","getCounts","dataProvider","LabelValuesCountsProvider","byFrameRepeater","MetricLabelValuesList","subscribeToQuickSearchChange","subscribeToSortByChange","sortBySelector","SINGLE","buildSinglePanel","existingByFrameRepeater","buildByFrameRepeater","prefMetricConfig","errors","frameIndex","canAddToFilters","quickSearchField","GRID","singlePanelContainer","listContainer","listFooter","SingleMetricPanelComponent","ByFrameRepeaterComponent","LabelBreakdownScene","getVariable","oldState","enableScopesInMetricsExplore","stickyControls","searchField","METRIC_PREFIX_ALL_OPTION","PrefixFilterDropdown","metricPrefix","parseMetricPrefixes","prefixGroups","newOptions","selectOption","tooltipIcon","InlineField","InlineLabel","RelatedListControls","RelatedMetricsScene","searchSticky","actionViews","actionViewsDefinitions","getScene","createRelatedLogsScene","actions","breakpoints","up","md","customTabsBar","MetricScene","Box","paddingY","Stack","TabsBar","tab","counter","relatedLogsCount","isActive","tabRender","Tab","onChangeTab","view","related_logs_count","relatedLogsOrchestrator","checkConditionsMetForRelatedLogs","setActionView","knownLabelNameDiscrepancies","job","instance","replaceKnownLabelNames","createLabelsCrossReferenceConnector","scene","conditionsMetForRelatedLogs","getDataSources","lokiDataSources","getHealthyDataSources","results","hasLabels","labelKeys","availableLabels","lokiLabelName","hasMatchingLabels","getLokiQueryExpr","getLokiQueryForRelatedMetric","dataSourceUid","extractedRecordingRules","targetRule","hasMetricExpr","tree","parser","iterate","enter","MetricExpr","isLogsQuery","selectorNode","getNodeFromQuery","Selector","selector","pipelineExprNode","PipelineExpr","pipelineExpr","getLogQueryFromMetricsQuery","fetchAndExtractLokiRecordingRules","extractedRules","ruleGroups","rg","rules","existingRule","hasMultipleOccurrences","extractRecordingRulesFromRuleGroups","datasourceSettings","recordingRules","res","lastValueFrom","fetch","ok","createLokiRecordingRulesConnector","lokiRecordingRules","selectedMetric","foundLokiDataSources","recRules","rr","getDataSourcesWithRecordingRulesContainingMetric","nodeType","foundNode","node","RelatedLogsOrchestrator","_internalState","currentDataSourcesSignature","newDataSourcesSignature","_changeHandlers","handler","addLokiDataSourcesChangeHandler","addRelatedLogsCountChangeHandler","findAndCheckAllDatasources","allLokiDatasources","_dataSourceFetcher","checkLogsInDataSources","maxLines","_metricScene","queriesByConnector","_logsConnectors","connector","idx","lokiExpr","connectorName","supportingQueryType","datasourcesWithLogs","totalLogsCount","totalChecked","getLokiQueries","rowCount","countLogsLines","NoRelatedLogs","Alert","Text","external","OpenInLogsDrilldownButton","memoizedContext","isLoading","logsDrilldownLink","logsDrilldownLinkExists","appSubUrl","LOGS_PANEL_CONTAINER_KEY","RelatedLogsScene","orchestrator","setupLogsPanel","showNoLogsFound","_buildQueryRunner","_queryRunner","_constructLogsDrilldownLinkContext","logsDataSourceVariable","updateLokiQuery","logsDrilldownLinkContext","selectedDatasourceVar","selectedDatasourceUid","handleFiltersChange","grow","actionViewDef","actionViewType","ConstantVariable","updateStateForNewMetric","datasourceHelper","handleMetricSelectedEvent","initFilters","initConfigPrometheusFunction","topScene","baseControls","SceneControlsSpacer","limitAdhocProviders","useQueriesAsFilterForOptions","disableReportFiltersInteraction","reportChangeInLabelFilters","drawer","configId","objectsWithBehavior","__name__","resetYAxisSync","panelsToUpdate","filteredMetrics","updatedMetrics","errorObject","addRecentMetric","filterVar","baseFilters","getBaseFiltersForMetric","performBrowserHistoryAction","urlState","urlUtil","renderUrl","getVariableSet","initialFilters","getTime","dashboardMetrics","alertingMetrics","addFilterButtonText","dontHide","expressionBuilder","scopeFilters","ScopesVariable","enable","navbarFixed","settingsInfo","updateAppControlsHeight","appControls","querySelector","resizeObserver","ResizeObserver","observe","disconnect","removeProperty","UrlSyncContextProvider","createBrowserHistorySteps","updateUrlOnInit","namespace","urlNamespace","getClosestScopesFacade","ScopesFacade","getSelectedScopes","selectedScopes","getSelectedScopesNames","scope","setSelectedScopes","scopes","notifySubscribers","onScopesChange","callback","onScopesChangeCallbacks","cb","newMetricsTrail","ROUTES","Drilldown","visTheme","theme2","visualization","getColorByName","palette","flatMap","sqr","MAX_ADHOC_VARIABLE_OPTIONS","limitedFilterVariable","getTagKeysProvider","opts","getTagValuesProvider","_","check","returnType","obj","INTERACTION_NAME_PREFIX","getFaro","reportInteraction","appRelease","apps","PLUGIN_ID","appVersion","api","pushEvent","fromEntries","defaultOpenSidebar","reportLabelFilterChange","oldFilters","oldFilter","newFilter","detectChangedFilters","detectRemovedFilters","detectAddedFilters","Intl","Collator","compare","bannerTitle","infos","statusText","formatErrorMessage","br","defaultTrail","AppContext","createContext","useMetricsAppContext","useContext","Trail","lazy","TrailRedirect","Navigate","AppRoutes","Routes","Route","element"],"sourceRoot":""}